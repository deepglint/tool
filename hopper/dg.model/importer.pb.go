// Code generated by protoc-gen-go.
// source: importer.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImportDSType int32

const (
	ImportDSType_IDSTYPE_UNKNOWN    ImportDSType = 0
	ImportDSType_IDSTYPE_HTTP       ImportDSType = 1
	ImportDSType_IDSTYPE_HTTPS      ImportDSType = 2
	ImportDSType_IDSTYPE_FTP        ImportDSType = 3
	ImportDSType_IDSTYPE_SAMBA      ImportDSType = 4
	ImportDSType_IDSTYPE_DATABASE   ImportDSType = 5
	ImportDSType_IDSTYPE_KAFKA      ImportDSType = 6
	ImportDSType_IDSTYPE_NSQ        ImportDSType = 7
	ImportDSType_IDSTYPE_HTTPSERVER ImportDSType = 8
	ImportDSType_IDSTYPE_CUSTOM     ImportDSType = 255
)

var ImportDSType_name = map[int32]string{
	0:   "IDSTYPE_UNKNOWN",
	1:   "IDSTYPE_HTTP",
	2:   "IDSTYPE_HTTPS",
	3:   "IDSTYPE_FTP",
	4:   "IDSTYPE_SAMBA",
	5:   "IDSTYPE_DATABASE",
	6:   "IDSTYPE_KAFKA",
	7:   "IDSTYPE_NSQ",
	8:   "IDSTYPE_HTTPSERVER",
	255: "IDSTYPE_CUSTOM",
}
var ImportDSType_value = map[string]int32{
	"IDSTYPE_UNKNOWN":    0,
	"IDSTYPE_HTTP":       1,
	"IDSTYPE_HTTPS":      2,
	"IDSTYPE_FTP":        3,
	"IDSTYPE_SAMBA":      4,
	"IDSTYPE_DATABASE":   5,
	"IDSTYPE_KAFKA":      6,
	"IDSTYPE_NSQ":        7,
	"IDSTYPE_HTTPSERVER": 8,
	"IDSTYPE_CUSTOM":     255,
}

func (x ImportDSType) String() string {
	return proto.EnumName(ImportDSType_name, int32(x))
}
func (ImportDSType) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

type OutputDSType int32

const (
	OutputDSType_ODSTYPE_UNKNOWN OutputDSType = 0
	OutputDSType_ODSTYPE_HTTP    OutputDSType = 1
	OutputDSType_ODSTYPE_HTTPS   OutputDSType = 2
	OutputDSType_ODSTYPE_KAFKA   OutputDSType = 3
	OutputDSType_ODSTYPE_NSQ     OutputDSType = 4
	OutputDSType_ODSTYPE_GRPC    OutputDSType = 5
	OutputDSType_ODSTYPE_TCP     OutputDSType = 6
	OutputDSType_ODSTYPE_CUSTOM  OutputDSType = 255
)

var OutputDSType_name = map[int32]string{
	0:   "ODSTYPE_UNKNOWN",
	1:   "ODSTYPE_HTTP",
	2:   "ODSTYPE_HTTPS",
	3:   "ODSTYPE_KAFKA",
	4:   "ODSTYPE_NSQ",
	5:   "ODSTYPE_GRPC",
	6:   "ODSTYPE_TCP",
	255: "ODSTYPE_CUSTOM",
}
var OutputDSType_value = map[string]int32{
	"ODSTYPE_UNKNOWN": 0,
	"ODSTYPE_HTTP":    1,
	"ODSTYPE_HTTPS":   2,
	"ODSTYPE_KAFKA":   3,
	"ODSTYPE_NSQ":     4,
	"ODSTYPE_GRPC":    5,
	"ODSTYPE_TCP":     6,
	"ODSTYPE_CUSTOM":  255,
}

func (x OutputDSType) String() string {
	return proto.EnumName(OutputDSType_name, int32(x))
}
func (OutputDSType) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

type DataSourceAttr struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key"`
	Value string `protobuf:"bytes,2,opt,name=Value,json=value" json:"Value"`
}

func (m *DataSourceAttr) Reset()                    { *m = DataSourceAttr{} }
func (m *DataSourceAttr) String() string            { return proto.CompactTextString(m) }
func (*DataSourceAttr) ProtoMessage()               {}
func (*DataSourceAttr) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

type ImportDataSource struct {
	Type              ImportDSType      `protobuf:"varint,1,opt,name=Type,json=type,enum=dg.model.ImportDSType" json:"Type"`
	Attributes        []*DataSourceAttr `protobuf:"bytes,2,rep,name=Attributes,json=attributes" json:"Attributes"`
	DefaultRepoId     int32             `protobuf:"varint,3,opt,name=DefaultRepoId,json=defaultRepoId" json:"DefaultRepoId"`
	DefaultSensorId   int32             `protobuf:"varint,4,opt,name=DefaultSensorId,json=defaultSensorId" json:"DefaultSensorId"`
	DefaultRepoName   string            `protobuf:"bytes,5,opt,name=DefaultRepoName,json=defaultRepoName" json:"DefaultRepoName"`
	DefaultSensorName string            `protobuf:"bytes,6,opt,name=DefaultSensorName,json=defaultSensorName" json:"DefaultSensorName"`
}

func (m *ImportDataSource) Reset()                    { *m = ImportDataSource{} }
func (m *ImportDataSource) String() string            { return proto.CompactTextString(m) }
func (*ImportDataSource) ProtoMessage()               {}
func (*ImportDataSource) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *ImportDataSource) GetAttributes() []*DataSourceAttr {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type InputObj struct {
	Id             int64           `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	SessionId      string          `protobuf:"bytes,2,opt,name=SessionId,json=sessionId" json:"SessionId"`
	Timestamp      int64           `protobuf:"varint,4,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	RepoId         int32           `protobuf:"varint,5,opt,name=RepoId,json=repoId" json:"RepoId"`
	RepoName       string          `protobuf:"bytes,6,opt,name=RepoName,json=repoName" json:"RepoName"`
	SensorId       int32           `protobuf:"varint,7,opt,name=SensorId,json=sensorId" json:"SensorId"`
	SensorName     string          `protobuf:"bytes,8,opt,name=SensorName,json=sensorName" json:"SensorName"`
	UniqueSensorId string          `protobuf:"bytes,9,opt,name=UniqueSensorId,json=uniqueSensorId" json:"UniqueSensorId"`
	Url            string          `protobuf:"bytes,10,opt,name=Url,json=url" json:"Url"`
	BinData        []byte          `protobuf:"bytes,11,opt,name=BinData,json=binData,proto3" json:"BinData"`
	Resp           bool            `protobuf:"varint,16,opt,name=Resp,json=resp" json:"Resp"`
	Sync           bool            `protobuf:"varint,17,opt,name=Sync,json=sync" json:"Sync"`
	Output         *OutputEndpoint `protobuf:"bytes,18,opt,name=Output,json=output" json:"Output"`
}

func (m *InputObj) Reset()                    { *m = InputObj{} }
func (m *InputObj) String() string            { return proto.CompactTextString(m) }
func (*InputObj) ProtoMessage()               {}
func (*InputObj) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *InputObj) GetOutput() *OutputEndpoint {
	if m != nil {
		return m.Output
	}
	return nil
}

type OutputEndpoint struct {
	Type        OutputDSType          `protobuf:"varint,1,opt,name=Type,json=type,enum=dg.model.OutputDSType" json:"Type"`
	Attributes  []*DataSourceAttr     `protobuf:"bytes,2,rep,name=Attributes,json=attributes" json:"Attributes"`
	SpeedLimit  int32                 `protobuf:"varint,3,opt,name=SpeedLimit,json=speedLimit" json:"SpeedLimit"`
	RecTypes    []RecognizeType       `protobuf:"varint,4,rep,packed,name=RecTypes,json=recTypes,enum=dg.model.RecognizeType" json:"RecTypes"`
	RecFuncs    []RecognizeFunctions  `protobuf:"varint,5,rep,packed,name=RecFuncs,json=recFuncs,enum=dg.model.RecognizeFunctions" json:"RecFuncs"`
	RelativeROI []*WitnessRelativeROI `protobuf:"bytes,6,rep,name=RelativeROI,json=relativeROI" json:"RelativeROI"`
}

func (m *OutputEndpoint) Reset()                    { *m = OutputEndpoint{} }
func (m *OutputEndpoint) String() string            { return proto.CompactTextString(m) }
func (*OutputEndpoint) ProtoMessage()               {}
func (*OutputEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *OutputEndpoint) GetAttributes() []*DataSourceAttr {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *OutputEndpoint) GetRelativeROI() []*WitnessRelativeROI {
	if m != nil {
		return m.RelativeROI
	}
	return nil
}

type OutputObj struct {
	Id             int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	SessionId      string `protobuf:"bytes,2,opt,name=SessionId,json=sessionId" json:"SessionId"`
	Timestamp      int64  `protobuf:"varint,4,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	RepoId         int32  `protobuf:"varint,5,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorId       int32  `protobuf:"varint,6,opt,name=SensorId,json=sensorId" json:"SensorId"`
	UniqueSensorId string `protobuf:"bytes,7,opt,name=UniqueSensorId,json=uniqueSensorId" json:"UniqueSensorId"`
	PlateText      string `protobuf:"bytes,8,opt,name=PlateText,json=plateText" json:"PlateText"`
	VehicleImage   string `protobuf:"bytes,9,opt,name=VehicleImage,json=vehicleImage" json:"VehicleImage"`
	PlateTypeId    int32  `protobuf:"varint,16,opt,name=PlateTypeId,json=plateTypeId" json:"PlateTypeId"`
	PlateColorId   int32  `protobuf:"varint,17,opt,name=PlateColorId,json=plateColorId" json:"PlateColorId"`
	VehicleTypeId  int32  `protobuf:"varint,18,opt,name=VehicleTypeId,json=vehicleTypeId" json:"VehicleTypeId"`
	VehicleColorId int32  `protobuf:"varint,19,opt,name=VehicleColorId,json=vehicleColorId" json:"VehicleColorId"`
	BrandId        int32  `protobuf:"varint,20,opt,name=BrandId,json=brandId" json:"BrandId"`
	SubBrandId     int32  `protobuf:"varint,21,opt,name=SubBrandId,json=subBrandId" json:"SubBrandId"`
	ModelYearId    int32  `protobuf:"varint,22,opt,name=ModelYearId,json=modelYearId" json:"ModelYearId"`
	PlateType      string `protobuf:"bytes,32,opt,name=PlateType,json=plateType" json:"PlateType"`
	PlateColor     string `protobuf:"bytes,33,opt,name=PlateColor,json=plateColor" json:"PlateColor"`
	VehicleType    string `protobuf:"bytes,34,opt,name=VehicleType,json=vehicleType" json:"VehicleType"`
	VehicleColor   string `protobuf:"bytes,35,opt,name=VehicleColor,json=vehicleColor" json:"VehicleColor"`
	Brand          string `protobuf:"bytes,36,opt,name=Brand,json=brand" json:"Brand"`
	SubBrand       string `protobuf:"bytes,37,opt,name=SubBrand,json=subBrand" json:"SubBrand"`
	ModelYear      string `protobuf:"bytes,38,opt,name=ModelYear,json=modelYear" json:"ModelYear"`
}

func (m *OutputObj) Reset()                    { *m = OutputObj{} }
func (m *OutputObj) String() string            { return proto.CompactTextString(m) }
func (*OutputObj) ProtoMessage()               {}
func (*OutputObj) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

func init() {
	proto.RegisterType((*DataSourceAttr)(nil), "dg.model.DataSourceAttr")
	proto.RegisterType((*ImportDataSource)(nil), "dg.model.ImportDataSource")
	proto.RegisterType((*InputObj)(nil), "dg.model.InputObj")
	proto.RegisterType((*OutputEndpoint)(nil), "dg.model.OutputEndpoint")
	proto.RegisterType((*OutputObj)(nil), "dg.model.OutputObj")
	proto.RegisterEnum("dg.model.ImportDSType", ImportDSType_name, ImportDSType_value)
	proto.RegisterEnum("dg.model.OutputDSType", OutputDSType_name, OutputDSType_value)
}

func init() { proto.RegisterFile("importer.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x18, 0x25, 0x71, 0x7e, 0xbf, 0xa4, 0x8e, 0x33, 0xbb, 0x14, 0xab, 0x5a, 0xa1, 0x12, 0x96, 0x55,
	0x55, 0xa1, 0x0a, 0xed, 0xde, 0xec, 0x15, 0x52, 0xda, 0xa6, 0x10, 0x95, 0xc6, 0xc1, 0x4e, 0xbb,
	0xda, 0x2b, 0xe4, 0xc4, 0x43, 0x31, 0xc4, 0x3f, 0xd8, 0xe3, 0xb0, 0xe5, 0x69, 0xb8, 0xe0, 0x25,
	0x78, 0x00, 0x9e, 0x80, 0x57, 0xe1, 0x1e, 0xbe, 0x99, 0xf1, 0xcf, 0xb8, 0x2d, 0x77, 0x68, 0x6f,
	0x22, 0xcf, 0x99, 0x33, 0xdf, 0x9c, 0xf3, 0xcd, 0xf1, 0x38, 0xa0, 0xfb, 0x41, 0x1c, 0x25, 0x8c,
	0x26, 0x27, 0x71, 0x12, 0xb1, 0x88, 0xf4, 0xbc, 0xdb, 0x93, 0x20, 0xf2, 0xe8, 0xf6, 0x60, 0x18,
	0xb8, 0x2c, 0xf1, 0xdf, 0x49, 0xfc, 0x60, 0xef, 0x17, 0x9f, 0x85, 0x34, 0x4d, 0xe5, 0x70, 0xf2,
	0x1a, 0xf4, 0x73, 0x97, 0xb9, 0x4e, 0x94, 0x25, 0x1b, 0x3a, 0x65, 0x2c, 0x21, 0x06, 0x68, 0x97,
	0xf4, 0xce, 0x6c, 0x1c, 0x36, 0x8e, 0xfa, 0xb6, 0xf6, 0x13, 0xbd, 0x23, 0x4f, 0xa1, 0x7d, 0xe3,
	0x6e, 0x33, 0x6a, 0x36, 0x05, 0xd6, 0xde, 0xf1, 0xc1, 0xe4, 0xb7, 0x26, 0x18, 0x73, 0xb1, 0x67,
	0x55, 0x80, 0x1c, 0x43, 0x6b, 0x75, 0x17, 0x53, 0xb1, 0x5a, 0x7f, 0xb9, 0x7f, 0x52, 0x88, 0x38,
	0xc9, 0x99, 0x0e, 0x9f, 0xb5, 0x5b, 0x0c, 0x7f, 0xc9, 0x6b, 0x00, 0xbe, 0xa1, 0xbf, 0xce, 0x18,
	0x4d, 0xb1, 0xb6, 0x76, 0x34, 0x78, 0x69, 0x56, 0x2b, 0xea, 0xb2, 0x6c, 0x70, 0x4b, 0x2e, 0x79,
	0x0e, 0x7b, 0xe7, 0xf4, 0x7b, 0x37, 0xdb, 0x32, 0x9b, 0xc6, 0xd1, 0xdc, 0x33, 0x35, 0xdc, 0xae,
	0x6d, 0xef, 0x79, 0x2a, 0x48, 0x8e, 0x60, 0x94, 0xb3, 0x1c, 0x1a, 0xa6, 0x51, 0x82, 0xbc, 0x96,
	0xe0, 0x8d, 0xbc, 0x3a, 0xac, 0x30, 0xf9, 0xd2, 0x85, 0x1b, 0x50, 0xb3, 0x2d, 0xac, 0x8e, 0xbc,
	0x3a, 0x4c, 0x3e, 0x87, 0x71, 0xad, 0xa6, 0xe0, 0x76, 0x04, 0x77, 0xec, 0xdd, 0x9f, 0x98, 0xfc,
	0xdd, 0x84, 0xde, 0x3c, 0x8c, 0x33, 0x66, 0xad, 0x7f, 0x24, 0x3a, 0x34, 0x51, 0x01, 0x6f, 0x8c,
	0x66, 0x37, 0x7d, 0x8f, 0x3c, 0x83, 0xbe, 0x83, 0xe7, 0xe0, 0x47, 0x21, 0xc2, 0xb2, 0xb3, 0xfd,
	0xb4, 0x00, 0xf8, 0xec, 0xca, 0x0f, 0x68, 0xca, 0xdc, 0x20, 0x16, 0xb2, 0x35, 0xbb, 0xcf, 0x0a,
	0x80, 0xec, 0x43, 0x27, 0x77, 0xde, 0x16, 0x8e, 0x3a, 0x89, 0xb4, 0x7c, 0x00, 0xbd, 0xd2, 0x81,
	0x54, 0xd5, 0x4b, 0x0a, 0xe9, 0x38, 0x57, 0xf6, 0xa1, 0x2b, 0x56, 0xf5, 0xd2, 0xa2, 0x01, 0x1f,
	0x03, 0x28, 0x7e, 0x7a, 0x62, 0x25, 0xa4, 0x25, 0x42, 0x5e, 0x80, 0x7e, 0x1d, 0xfa, 0x3f, 0x67,
	0xb4, 0xac, 0xd0, 0x17, 0x1c, 0x3d, 0xab, 0xa1, 0x3c, 0x3b, 0xd7, 0xc9, 0xd6, 0x04, 0x99, 0x9d,
	0x2c, 0xd9, 0x12, 0x13, 0xba, 0xa7, 0x7e, 0xc8, 0xcf, 0xd2, 0x1c, 0x20, 0x3a, 0xb4, 0xbb, 0x6b,
	0x39, 0x24, 0x04, 0x5a, 0x36, 0x4d, 0x63, 0xd3, 0x40, 0xb8, 0x67, 0xb7, 0x12, 0x7c, 0xe6, 0x98,
	0x73, 0x17, 0x6e, 0xcc, 0xb1, 0xc4, 0x52, 0x7c, 0x26, 0x5f, 0x40, 0xc7, 0xca, 0x18, 0x36, 0xd1,
	0x24, 0x88, 0xd6, 0x22, 0x22, 0xf1, 0x59, 0xe8, 0xc5, 0x91, 0x1f, 0x32, 0xbb, 0x13, 0x89, 0xf1,
	0xe4, 0xcf, 0x26, 0xe8, 0xf5, 0xa9, 0xff, 0xce, 0xa5, 0xe4, 0xfd, 0x4f, 0xb9, 0xe4, 0x6d, 0x8c,
	0x29, 0xf5, 0xbe, 0xf1, 0x03, 0x9f, 0xe5, 0xa1, 0x84, 0xb4, 0x44, 0xc8, 0x2b, 0x7e, 0x3c, 0x1b,
	0xbe, 0x55, 0x8a, 0x67, 0xaa, 0xa1, 0x92, 0x8f, 0xaa, 0xba, 0x38, 0x13, 0xdd, 0x86, 0xfe, 0xaf,
	0x54, 0x48, 0xc1, 0x73, 0x93, 0x44, 0x94, 0xc3, 0x17, 0x5d, 0x64, 0xe1, 0x26, 0xc5, 0xd3, 0xe6,
	0x8b, 0x9e, 0x3d, 0xb2, 0x88, 0xcf, 0x33, 0x8c, 0x4e, 0x2a, 0x56, 0x0a, 0x36, 0xf9, 0x12, 0x06,
	0x36, 0xdd, 0xba, 0xcc, 0xdf, 0x51, 0xdb, 0x9a, 0x63, 0x20, 0xb8, 0x13, 0x65, 0xf1, 0x1b, 0x79,
	0x13, 0x28, 0x1c, 0x7b, 0x90, 0x54, 0x83, 0xc9, 0x1f, 0x6d, 0xe8, 0xcb, 0xfe, 0xbc, 0xc7, 0xfc,
	0x96, 0x09, 0xeb, 0xdc, 0xcb, 0xe8, 0xc3, 0x0c, 0x76, 0x1f, 0xcd, 0x20, 0xee, 0xbc, 0x44, 0x0f,
	0x74, 0x45, 0xdf, 0xb1, 0x3c, 0xca, 0xfd, 0xb8, 0x00, 0xc8, 0x04, 0x86, 0x37, 0xf4, 0x07, 0x7f,
	0xb3, 0xa5, 0xf3, 0xc0, 0xbd, 0xa5, 0x79, 0x8e, 0x87, 0x3b, 0x05, 0x23, 0x87, 0x30, 0x90, 0x15,
	0xb0, 0xff, 0xb8, 0x8d, 0x21, 0x84, 0x0c, 0xe2, 0x0a, 0xe2, 0x55, 0x04, 0xe3, 0x2c, 0xda, 0x0a,
	0x25, 0x63, 0x41, 0x19, 0xc6, 0x0a, 0xc6, 0x2f, 0xa9, 0x7c, 0xa7, 0xbc, 0x0e, 0x91, 0x97, 0xd4,
	0x4e, 0x05, 0xb9, 0xab, 0x9c, 0x55, 0xd4, 0x7a, 0x22, 0x68, 0xfa, 0xae, 0x86, 0x8a, 0xf7, 0x28,
	0x71, 0x43, 0x0f, 0x09, 0x4f, 0x05, 0xa1, 0xbb, 0x96, 0x43, 0x11, 0xba, 0x6c, 0x5d, 0x4c, 0x7e,
	0x98, 0x87, 0xae, 0x44, 0xb8, 0x9b, 0x2b, 0x7e, 0xdc, 0x6f, 0xa9, 0xcb, 0xcb, 0xef, 0x4b, 0x37,
	0x41, 0x05, 0x55, 0x1d, 0xe3, 0x6f, 0xc8, 0xa1, 0xda, 0x31, 0xfe, 0x3a, 0x60, 0xfd, 0xca, 0xab,
	0xf9, 0x89, 0xbc, 0x1b, 0x2a, 0xa7, 0xbc, 0xbe, 0xe2, 0xd3, 0x9c, 0x08, 0xc2, 0x40, 0x71, 0xa9,
	0xf4, 0x5c, 0xd6, 0xf8, 0xb4, 0xd6, 0x73, 0x59, 0x05, 0xbf, 0x31, 0x42, 0xb0, 0xf9, 0x5c, 0x7e,
	0x63, 0x84, 0x3b, 0x91, 0x87, 0xdc, 0x89, 0xf9, 0x99, 0xbc, 0xcf, 0x0a, 0x67, 0x5c, 0x75, 0xe9,
	0xcb, 0x7c, 0x21, 0x55, 0x97, 0xae, 0x8e, 0xff, 0x6a, 0xc0, 0x50, 0xfd, 0xe6, 0x90, 0x27, 0x30,
	0x9a, 0xe3, 0xe3, 0xdb, 0xe5, 0xec, 0xbb, 0xeb, 0xc5, 0xe5, 0xc2, 0x7a, 0xb3, 0x30, 0x3e, 0xc0,
	0xfb, 0x6a, 0x58, 0x80, 0x5f, 0xaf, 0x56, 0x4b, 0xa3, 0x41, 0xc6, 0xb0, 0xa7, 0x22, 0x8e, 0xd1,
	0x24, 0x23, 0x18, 0x14, 0xd0, 0x05, 0x72, 0x34, 0x95, 0xe3, 0x4c, 0xaf, 0x4e, 0xa7, 0x46, 0x0b,
	0xe5, 0x1b, 0x05, 0x74, 0x3e, 0x5d, 0x4d, 0x4f, 0xa7, 0xce, 0xcc, 0x68, 0xab, 0xc4, 0xcb, 0xe9,
	0xc5, 0xe5, 0xd4, 0xe8, 0xa8, 0xc5, 0x16, 0xce, 0xb7, 0x46, 0x17, 0x5f, 0x05, 0x52, 0xdb, 0x70,
	0x66, 0xdf, 0xcc, 0x6c, 0xa3, 0x87, 0x7a, 0xf5, 0x02, 0x3f, 0xbb, 0x76, 0x56, 0xd6, 0x95, 0xf1,
	0x4f, 0xe3, 0xf8, 0x77, 0x74, 0xa5, 0xde, 0x58, 0xdc, 0x95, 0xf5, 0x98, 0x2b, 0xeb, 0x81, 0x2b,
	0xeb, 0x9e, 0x2b, 0x05, 0x92, 0xda, 0x34, 0xae, 0xcd, 0x52, 0xb4, 0xb5, 0xd4, 0x42, 0x5f, 0xd9,
	0xcb, 0x33, 0x74, 0xa4, 0x50, 0x56, 0x67, 0x4b, 0xf4, 0x83, 0x32, 0xad, 0xfb, 0x32, 0xd7, 0x1d,
	0xf1, 0xdf, 0xe2, 0xd5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x93, 0x67, 0x8d, 0x3d, 0x94, 0x08,
	0x00, 0x00,
}
