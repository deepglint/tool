// Code generated by protoc-gen-go.
// source: searchpedestrian.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PedestrianQuery struct {
	BaseQuery        *BaseQuery                    `protobuf:"bytes,1,opt,name=BaseQuery,json=baseQuery" json:"BaseQuery"`
	GenderId         []int32                       `protobuf:"varint,4,rep,packed,name=GenderId,json=genderId" json:"GenderId"`
	GenderConfidence float32                       `protobuf:"fixed32,5,opt,name=GenderConfidence,json=genderConfidence" json:"GenderConfidence"`
	AgeId            []int32                       `protobuf:"varint,6,rep,packed,name=AgeId,json=ageId" json:"AgeId"`
	AgeConfidence    float32                       `protobuf:"fixed32,7,opt,name=AgeConfidence,json=ageConfidence" json:"AgeConfidence"`
	NationId         []int32                       `protobuf:"varint,8,rep,packed,name=NationId,json=nationId" json:"NationId"`
	NationConfidence float32                       `protobuf:"fixed32,9,opt,name=NationConfidence,json=nationConfidence" json:"NationConfidence"`
	ColorId          []int32                       `protobuf:"varint,10,rep,packed,name=ColorId,json=colorId" json:"ColorId"`
	ColorConfidence  float32                       `protobuf:"fixed32,11,opt,name=ColorConfidence,json=colorConfidence" json:"ColorConfidence"`
	Categorys        map[int32]*PedestrianCategory `protobuf:"bytes,16,rep,name=Categorys,json=categorys" json:"Categorys" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PedestrianQuery) Reset()                    { *m = PedestrianQuery{} }
func (m *PedestrianQuery) String() string            { return proto.CompactTextString(m) }
func (*PedestrianQuery) ProtoMessage()               {}
func (*PedestrianQuery) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *PedestrianQuery) GetBaseQuery() *BaseQuery {
	if m != nil {
		return m.BaseQuery
	}
	return nil
}

func (m *PedestrianQuery) GetCategorys() map[int32]*PedestrianCategory {
	if m != nil {
		return m.Categorys
	}
	return nil
}

type PedestrianCategory struct {
	Items []int32 `protobuf:"varint,1,rep,packed,name=Items,json=items" json:"Items"`
}

func (m *PedestrianCategory) Reset()                    { *m = PedestrianCategory{} }
func (m *PedestrianCategory) String() string            { return proto.CompactTextString(m) }
func (*PedestrianCategory) ProtoMessage()               {}
func (*PedestrianCategory) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

type PedestrianResult struct {
	AllSize       int32            `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize  int32            `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	RetPedestrian []*RetPedestrian `protobuf:"bytes,3,rep,name=RetPedestrian,json=retPedestrian" json:"RetPedestrian"`
}

func (m *PedestrianResult) Reset()                    { *m = PedestrianResult{} }
func (m *PedestrianResult) String() string            { return proto.CompactTextString(m) }
func (*PedestrianResult) ProtoMessage()               {}
func (*PedestrianResult) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *PedestrianResult) GetRetPedestrian() []*RetPedestrian {
	if m != nil {
		return m.RetPedestrian
	}
	return nil
}

type RetPedestrian struct {
	Metadata                *SrcMetadata             `protobuf:"bytes,1,opt,name=Metadata,json=metadata" json:"Metadata"`
	Img                     *Image                   `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img"`
	RecPedestrian           *RecPedestrian           `protobuf:"bytes,3,opt,name=RecPedestrian,json=recPedestrian" json:"RecPedestrian"`
	PedestrianAuxiliaryInfo *PedestrianAuxiliaryInfo `protobuf:"bytes,4,opt,name=PedestrianAuxiliaryInfo,json=pedestrianAuxiliaryInfo" json:"PedestrianAuxiliaryInfo"`
}

func (m *RetPedestrian) Reset()                    { *m = RetPedestrian{} }
func (m *RetPedestrian) String() string            { return proto.CompactTextString(m) }
func (*RetPedestrian) ProtoMessage()               {}
func (*RetPedestrian) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *RetPedestrian) GetMetadata() *SrcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RetPedestrian) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *RetPedestrian) GetRecPedestrian() *RecPedestrian {
	if m != nil {
		return m.RecPedestrian
	}
	return nil
}

func (m *RetPedestrian) GetPedestrianAuxiliaryInfo() *PedestrianAuxiliaryInfo {
	if m != nil {
		return m.PedestrianAuxiliaryInfo
	}
	return nil
}

type PedestrianAuxiliaryInfo struct {
	ThumbnailImageUri string `protobuf:"bytes,1,opt,name=ThumbnailImageUri,json=thumbnailImageUri" json:"ThumbnailImageUri"`
}

func (m *PedestrianAuxiliaryInfo) Reset()                    { *m = PedestrianAuxiliaryInfo{} }
func (m *PedestrianAuxiliaryInfo) String() string            { return proto.CompactTextString(m) }
func (*PedestrianAuxiliaryInfo) ProtoMessage()               {}
func (*PedestrianAuxiliaryInfo) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

type GroupPedestrianResult struct {
	AllSize            int32                 `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize       int32                 `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	GroupRetPedestrian []*GroupRetPedestrian `protobuf:"bytes,3,rep,name=GroupRetPedestrian,json=groupRetPedestrian" json:"GroupRetPedestrian"`
}

func (m *GroupPedestrianResult) Reset()                    { *m = GroupPedestrianResult{} }
func (m *GroupPedestrianResult) String() string            { return proto.CompactTextString(m) }
func (*GroupPedestrianResult) ProtoMessage()               {}
func (*GroupPedestrianResult) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

func (m *GroupPedestrianResult) GetGroupRetPedestrian() []*GroupRetPedestrian {
	if m != nil {
		return m.GroupRetPedestrian
	}
	return nil
}

type GroupRetPedestrian struct {
	RetPedestrian []*RetPedestrian `protobuf:"bytes,1,rep,name=RetPedestrian,json=retPedestrian" json:"RetPedestrian"`
}

func (m *GroupRetPedestrian) Reset()                    { *m = GroupRetPedestrian{} }
func (m *GroupRetPedestrian) String() string            { return proto.CompactTextString(m) }
func (*GroupRetPedestrian) ProtoMessage()               {}
func (*GroupRetPedestrian) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *GroupRetPedestrian) GetRetPedestrian() []*RetPedestrian {
	if m != nil {
		return m.RetPedestrian
	}
	return nil
}

func init() {
	proto.RegisterType((*PedestrianQuery)(nil), "dg.model.PedestrianQuery")
	proto.RegisterType((*PedestrianCategory)(nil), "dg.model.PedestrianCategory")
	proto.RegisterType((*PedestrianResult)(nil), "dg.model.PedestrianResult")
	proto.RegisterType((*RetPedestrian)(nil), "dg.model.RetPedestrian")
	proto.RegisterType((*PedestrianAuxiliaryInfo)(nil), "dg.model.PedestrianAuxiliaryInfo")
	proto.RegisterType((*GroupPedestrianResult)(nil), "dg.model.GroupPedestrianResult")
	proto.RegisterType((*GroupRetPedestrian)(nil), "dg.model.GroupRetPedestrian")
}

func init() { proto.RegisterFile("searchpedestrian.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x4f, 0xaf, 0xd2, 0x4e,
	0x14, 0x4d, 0xe9, 0xaf, 0x8f, 0x72, 0x81, 0x1f, 0xbc, 0xd1, 0x27, 0x0d, 0x71, 0xf1, 0x5e, 0xe3,
	0x82, 0xbc, 0x18, 0x12, 0x71, 0x63, 0x4c, 0x5c, 0x20, 0x51, 0x42, 0xa2, 0x46, 0x07, 0xdd, 0xe8,
	0x6a, 0x68, 0xe7, 0xf5, 0x35, 0xb6, 0x33, 0x64, 0x3a, 0x35, 0xe2, 0xce, 0x4f, 0xe0, 0x87, 0xf0,
	0x4b, 0xba, 0xb4, 0x9d, 0x29, 0xf4, 0x0f, 0xb8, 0x30, 0x71, 0x37, 0xe7, 0x9e, 0x33, 0xa7, 0x67,
	0xee, 0xbd, 0x00, 0xf7, 0x12, 0x4a, 0x84, 0x77, 0xbb, 0xa5, 0x3e, 0x4d, 0xa4, 0x08, 0x09, 0x9b,
	0x6e, 0x05, 0x97, 0x1c, 0xd9, 0x7e, 0x30, 0x8d, 0xb9, 0x4f, 0xa3, 0x71, 0xcf, 0xe3, 0x71, 0xcc,
	0x8b, 0xfa, 0x18, 0x69, 0x7d, 0xb5, 0xe6, 0xfe, 0x32, 0x61, 0xf0, 0xf6, 0x60, 0xf0, 0x2e, 0xa5,
	0x62, 0x87, 0x1e, 0x41, 0xe7, 0x39, 0x49, 0xa8, 0x02, 0x8e, 0x71, 0x69, 0x4c, 0xba, 0xb3, 0x3b,
	0xd3, 0xbd, 0xe7, 0xf4, 0x40, 0xe1, 0xce, 0x66, 0x7f, 0x44, 0x63, 0xb0, 0x97, 0x94, 0xf9, 0x54,
	0xac, 0x7c, 0xe7, 0xbf, 0x4b, 0x73, 0x62, 0x61, 0x3b, 0x28, 0x30, 0xba, 0x86, 0xa1, 0xe6, 0x16,
	0x9c, 0xdd, 0x84, 0x3e, 0x65, 0x1e, 0x75, 0xac, 0xcc, 0xb5, 0x85, 0x87, 0x41, 0xa3, 0x8e, 0xee,
	0x82, 0x35, 0x0f, 0x68, 0x66, 0x72, 0xa6, 0x4c, 0x2c, 0x92, 0x03, 0xf4, 0x00, 0xfa, 0x59, 0xb5,
	0x72, 0xbd, 0xad, 0xae, 0xf7, 0x49, 0xb5, 0x98, 0x67, 0x78, 0x43, 0x64, 0xc8, 0x59, 0x76, 0xdd,
	0xd6, 0x19, 0x58, 0x81, 0xf3, 0x0c, 0x9a, 0xab, 0x98, 0x74, 0x74, 0x06, 0xd6, 0xa8, 0x23, 0x07,
	0xda, 0x0b, 0x1e, 0xf1, 0xfc, 0x29, 0xa0, 0x6c, 0xda, 0x9e, 0x86, 0x68, 0x02, 0x03, 0xc5, 0x54,
	0x4c, 0xba, 0xca, 0x64, 0xe0, 0xd5, 0xcb, 0xe8, 0x25, 0x74, 0x16, 0x44, 0xd2, 0x80, 0x8b, 0x5d,
	0xe2, 0x0c, 0x33, 0x97, 0xee, 0x6c, 0x52, 0xb6, 0xb0, 0xd1, 0xf0, 0xe9, 0x41, 0xfa, 0x82, 0xc9,
	0xbc, 0xaf, 0xde, 0x1e, 0x8f, 0x3f, 0xc2, 0xff, 0x75, 0x12, 0x0d, 0xc1, 0xfc, 0x4c, 0xf5, 0x58,
	0x2c, 0x9c, 0x1f, 0xd1, 0x0c, 0xac, 0x2f, 0x24, 0x4a, 0xa9, 0xd3, 0x52, 0xa3, 0xba, 0x7f, 0xea,
	0x3b, 0x7b, 0x13, 0xac, 0xa5, 0x4f, 0x5b, 0x4f, 0x0c, 0xf7, 0x1a, 0xd0, 0xb1, 0x20, 0x9f, 0xc0,
	0x4a, 0xd2, 0x38, 0xc9, 0xbe, 0xa0, 0x26, 0x10, 0xe6, 0xc0, 0xfd, 0x61, 0xc0, 0xb0, 0x14, 0x63,
	0x9a, 0xa4, 0x91, 0xcc, 0x1b, 0x35, 0x8f, 0xa2, 0x75, 0xf8, 0x8d, 0x16, 0x71, 0xda, 0x44, 0x43,
	0xe4, 0x42, 0x0f, 0x53, 0x99, 0x0a, 0x46, 0x7d, 0x45, 0xb7, 0x14, 0xdd, 0x13, 0x95, 0x1a, 0x7a,
	0x06, 0xfd, 0x4c, 0x53, 0x9a, 0x3a, 0xa6, 0x6a, 0xd3, 0xa8, 0x8c, 0x5f, 0xa3, 0x71, 0x5f, 0x54,
	0xa1, 0xfb, 0xbd, 0xd5, 0xb8, 0x9f, 0xad, 0xad, 0xfd, 0x9a, 0x4a, 0xe2, 0x13, 0x49, 0x8a, 0xad,
	0xbd, 0x28, 0xbd, 0xd6, 0xc2, 0xdb, 0x93, 0xd8, 0x8e, 0x8b, 0x13, 0xba, 0x02, 0x73, 0x15, 0x07,
	0x45, 0xe3, 0x06, 0xa5, 0x7a, 0x15, 0x67, 0xab, 0x85, 0xcd, 0x30, 0x0e, 0x74, 0x4c, 0xaf, 0x16,
	0xd3, 0x68, 0xc6, 0xf4, 0xea, 0x31, 0x2b, 0x10, 0x7d, 0x82, 0x51, 0x89, 0xe6, 0xe9, 0xd7, 0x30,
	0x0a, 0x89, 0xd8, 0xad, 0xd8, 0x0d, 0xcf, 0x7e, 0x27, 0xb9, 0xd1, 0xd5, 0xa9, 0x71, 0xd5, 0x84,
	0x78, 0xb4, 0x3d, 0x4d, 0xb8, 0xcb, 0x3f, 0x9a, 0xa3, 0x87, 0x70, 0xfe, 0xfe, 0x36, 0x8d, 0x37,
	0x8c, 0x84, 0x91, 0x7a, 0xcd, 0x07, 0x11, 0xaa, 0xae, 0x74, 0xf0, 0xb9, 0x6c, 0x12, 0xee, 0x4f,
	0x03, 0x2e, 0x96, 0x82, 0xa7, 0xdb, 0x7f, 0x3c, 0xe3, 0x57, 0x80, 0x94, 0xed, 0xa9, 0x41, 0x57,
	0xf6, 0xf4, 0x58, 0x83, 0x51, 0x70, 0x54, 0x73, 0xd7, 0xa7, 0xdc, 0x8e, 0xf7, 0xc8, 0xf8, 0x9b,
	0x3d, 0xda, 0x9c, 0xa9, 0xff, 0xc1, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xda, 0xc9, 0x9d,
	0xd8, 0x4d, 0x05, 0x00, 0x00,
}
