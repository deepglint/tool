// Code generated by protoc-gen-go.
// source: invalidvehicle.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CGSSourceType int32

const (
	CGSSourceType_CGS_Source_Type_Unknown  CGSSourceType = 0
	CGSSourceType_CGS_Source_Type_City     CGSSourceType = 1
	CGSSourceType_CGS_Source_Type_Province CGSSourceType = 2
	CGSSourceType_CGS_Source_Type_Country  CGSSourceType = 3
)

var CGSSourceType_name = map[int32]string{
	0: "CGS_Source_Type_Unknown",
	1: "CGS_Source_Type_City",
	2: "CGS_Source_Type_Province",
	3: "CGS_Source_Type_Country",
}
var CGSSourceType_value = map[string]int32{
	"CGS_Source_Type_Unknown":  0,
	"CGS_Source_Type_City":     1,
	"CGS_Source_Type_Province": 2,
	"CGS_Source_Type_Country":  3,
}

func (x CGSSourceType) String() string {
	return proto.EnumName(CGSSourceType_name, int32(x))
}
func (CGSSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type InvalidVehicleType int32

const (
	InvalidVehicleType_Invalid_Type_Unknown       InvalidVehicleType = 0
	InvalidVehicleType_Invalid_Type_Vehicle_Brand InvalidVehicleType = 1
	InvalidVehicleType_Invalid_Type_Vehicle_Color InvalidVehicleType = 2
	InvalidVehicleType_Invalid_Type_Vehicle_Type  InvalidVehicleType = 3
	InvalidVehicleType_Invalid_type_Plate_Type    InvalidVehicleType = 4
	InvalidVehicleType_Invalid_Type_Retired       InvalidVehicleType = 5
	InvalidVehicleType_Invalid_Type_Consistent    InvalidVehicleType = 8
)

var InvalidVehicleType_name = map[int32]string{
	0: "Invalid_Type_Unknown",
	1: "Invalid_Type_Vehicle_Brand",
	2: "Invalid_Type_Vehicle_Color",
	3: "Invalid_Type_Vehicle_Type",
	4: "Invalid_type_Plate_Type",
	5: "Invalid_Type_Retired",
	8: "Invalid_Type_Consistent",
}
var InvalidVehicleType_value = map[string]int32{
	"Invalid_Type_Unknown":       0,
	"Invalid_Type_Vehicle_Brand": 1,
	"Invalid_Type_Vehicle_Color": 2,
	"Invalid_Type_Vehicle_Type":  3,
	"Invalid_type_Plate_Type":    4,
	"Invalid_Type_Retired":       5,
	"Invalid_Type_Consistent":    8,
}

func (x InvalidVehicleType) String() string {
	return proto.EnumName(InvalidVehicleType_name, int32(x))
}
func (InvalidVehicleType) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

type CGSVehicle struct {
	Id              int64   `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	Owner           string  `protobuf:"bytes,2,opt,name=Owner,json=owner" json:"Owner"`
	IdNumber        string  `protobuf:"bytes,3,opt,name=IdNumber,json=idNumber" json:"IdNumber"`
	PhoneNumber     string  `protobuf:"bytes,4,opt,name=PhoneNumber,json=phoneNumber" json:"PhoneNumber"`
	Address         string  `protobuf:"bytes,5,opt,name=Address,json=address" json:"Address"`
	DetailAddress   string  `protobuf:"bytes,6,opt,name=DetailAddress,json=detailAddress" json:"DetailAddress"`
	EmailAddress    string  `protobuf:"bytes,7,opt,name=EmailAddress,json=emailAddress" json:"EmailAddress"`
	DetailContact   string  `protobuf:"bytes,8,opt,name=DetailContact,json=detailContact" json:"DetailContact"`
	PlateType       string  `protobuf:"bytes,9,opt,name=PlateType,json=plateType" json:"PlateType"`
	PlateText       string  `protobuf:"bytes,10,opt,name=PlateText,json=plateText" json:"PlateText"`
	VehicleBrand    string  `protobuf:"bytes,11,opt,name=VehicleBrand,json=vehicleBrand" json:"VehicleBrand"`
	VehicleModel    string  `protobuf:"bytes,12,opt,name=VehicleModel,json=vehicleModel" json:"VehicleModel"`
	VehicleIdNumber string  `protobuf:"bytes,13,opt,name=VehicleIdNumber,json=vehicleIdNumber" json:"VehicleIdNumber"`
	VehicleType     string  `protobuf:"bytes,14,opt,name=VehicleType,json=vehicleType" json:"VehicleType"`
	VehicleColor    string  `protobuf:"bytes,15,opt,name=VehicleColor,json=vehicleColor" json:"VehicleColor"`
	VehicleStatus   string  `protobuf:"bytes,16,opt,name=VehicleStatus,json=vehicleStatus" json:"VehicleStatus"`
	UseNatrue       string  `protobuf:"bytes,17,opt,name=UseNatrue,json=useNatrue" json:"UseNatrue"`
	ManufactureDate string  `protobuf:"bytes,18,opt,name=ManufactureDate,json=manufactureDate" json:"ManufactureDate"`
	RecordDate      string  `protobuf:"bytes,19,opt,name=RecordDate,json=recordDate" json:"RecordDate"`
	RetireDate      string  `protobuf:"bytes,20,opt,name=RetireDate,json=retireDate" json:"RetireDate"`
	EngineNumber    string  `protobuf:"bytes,21,opt,name=EngineNumber,json=engineNumber" json:"EngineNumber"`
	EngineType      string  `protobuf:"bytes,22,opt,name=EngineType,json=engineType" json:"EngineType"`
	Displacement    float32 `protobuf:"fixed32,23,opt,name=Displacement,json=displacement" json:"Displacement"`
	Power           float32 `protobuf:"fixed32,24,opt,name=Power,json=power" json:"Power"`
	LoadCapacity    float32 `protobuf:"fixed32,25,opt,name=LoadCapacity,json=loadCapacity" json:"LoadCapacity"`
	CarryCapacity   int32   `protobuf:"varint,26,opt,name=CarryCapacity,json=carryCapacity" json:"CarryCapacity"`
}

func (m *CGSVehicle) Reset()                    { *m = CGSVehicle{} }
func (m *CGSVehicle) String() string            { return proto.CompactTextString(m) }
func (*CGSVehicle) ProtoMessage()               {}
func (*CGSVehicle) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

type InvalidVehicle struct {
	Id                      int64              `protobuf:"varint,1,opt,name=Id,json=id" json:"Id"`
	Timestamp               int64              `protobuf:"varint,2,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	RepoId                  int32              `protobuf:"varint,3,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorId                int32              `protobuf:"varint,4,opt,name=SensorId,json=sensorId" json:"SensorId"`
	PlateText               string             `protobuf:"bytes,5,opt,name=PlateText,json=plateText" json:"PlateText"`
	PlateType               int32              `protobuf:"varint,8,opt,name=PlateType,json=plateType" json:"PlateType"`
	PlateTypeConfidence     float32            `protobuf:"fixed32,9,opt,name=PlateTypeConfidence,json=plateTypeConfidence" json:"PlateTypeConfidence"`
	VehicleType             int32              `protobuf:"varint,10,opt,name=VehicleType,json=vehicleType" json:"VehicleType"`
	VehicleTypeConfidence   float32            `protobuf:"fixed32,11,opt,name=VehicleTypeConfidence,json=vehicleTypeConfidence" json:"VehicleTypeConfidence"`
	VehicleBrand            int32              `protobuf:"varint,12,opt,name=VehicleBrand,json=vehicleBrand" json:"VehicleBrand"`
	VehicleBrandConfindence float32            `protobuf:"fixed32,13,opt,name=VehicleBrandConfindence,json=vehicleBrandConfindence" json:"VehicleBrandConfindence"`
	VehicleColor            int32              `protobuf:"varint,14,opt,name=VehicleColor,json=vehicleColor" json:"VehicleColor"`
	VehicleColorConfidence  float32            `protobuf:"fixed32,15,opt,name=VehicleColorConfidence,json=vehicleColorConfidence" json:"VehicleColorConfidence"`
	VehicleId               int64              `protobuf:"varint,16,opt,name=VehicleId,json=vehicleId" json:"VehicleId"`
	CgsId                   int64              `protobuf:"varint,17,opt,name=CgsId,json=cgsId" json:"CgsId"`
	InvalidType             InvalidVehicleType `protobuf:"varint,18,opt,name=InvalidType,json=invalidType,enum=dg.model.InvalidVehicleType" json:"InvalidType"`
}

func (m *InvalidVehicle) Reset()                    { *m = InvalidVehicle{} }
func (m *InvalidVehicle) String() string            { return proto.CompactTextString(m) }
func (*InvalidVehicle) ProtoMessage()               {}
func (*InvalidVehicle) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

type InvalidVehicleResult struct {
	AllSize        int32             `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize   int32             `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	InvalidVehicle []*InvalidVehicle `protobuf:"bytes,3,rep,name=InvalidVehicle,json=invalidVehicle" json:"InvalidVehicle"`
}

func (m *InvalidVehicleResult) Reset()                    { *m = InvalidVehicleResult{} }
func (m *InvalidVehicleResult) String() string            { return proto.CompactTextString(m) }
func (*InvalidVehicleResult) ProtoMessage()               {}
func (*InvalidVehicleResult) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *InvalidVehicleResult) GetInvalidVehicle() []*InvalidVehicle {
	if m != nil {
		return m.InvalidVehicle
	}
	return nil
}

func init() {
	proto.RegisterType((*CGSVehicle)(nil), "dg.model.CGSVehicle")
	proto.RegisterType((*InvalidVehicle)(nil), "dg.model.InvalidVehicle")
	proto.RegisterType((*InvalidVehicleResult)(nil), "dg.model.InvalidVehicleResult")
	proto.RegisterEnum("dg.model.CGSSourceType", CGSSourceType_name, CGSSourceType_value)
	proto.RegisterEnum("dg.model.InvalidVehicleType", InvalidVehicleType_name, InvalidVehicleType_value)
}

func init() { proto.RegisterFile("invalidvehicle.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x55, 0x5d, 0x6f, 0xdb, 0x36,
	0x14, 0x9d, 0xed, 0xc8, 0xb1, 0xe9, 0x8f, 0xa8, 0x8c, 0x93, 0xb0, 0x59, 0x57, 0x14, 0xc1, 0x1e,
	0x82, 0x3e, 0x04, 0x43, 0x37, 0x0c, 0x7b, 0x1a, 0xb6, 0x29, 0x43, 0x11, 0x60, 0xed, 0x02, 0xb9,
	0xdd, 0x6b, 0xa0, 0x8a, 0x6c, 0x4a, 0x4c, 0x26, 0x05, 0x8a, 0x52, 0xe6, 0xbd, 0xed, 0x4f, 0xec,
	0xff, 0x0d, 0x18, 0xf6, 0x3b, 0x46, 0x5e, 0x4a, 0x32, 0x65, 0x3b, 0x8f, 0xf7, 0x9c, 0xc3, 0xab,
	0xab, 0xa3, 0x7b, 0x28, 0xb4, 0xe0, 0xa2, 0x4a, 0x32, 0x4e, 0x2b, 0xf6, 0x89, 0xa7, 0x19, 0xbb,
	0xca, 0x95, 0xd4, 0x12, 0x8f, 0xe8, 0xfd, 0xd5, 0x4a, 0x52, 0x96, 0x5d, 0xfc, 0x3b, 0x44, 0x28,
	0x7a, 0xbd, 0xfc, 0xcd, 0xd1, 0x78, 0x8e, 0xfa, 0x37, 0x94, 0xf4, 0x5e, 0xf4, 0x2e, 0x07, 0x71,
	0x9f, 0x53, 0xbc, 0x40, 0xc1, 0xaf, 0x0f, 0x82, 0x29, 0xd2, 0x37, 0xd0, 0x38, 0x0e, 0xa4, 0x2d,
	0xf0, 0x39, 0x1a, 0xdd, 0xd0, 0xb7, 0xe5, 0xea, 0x83, 0x21, 0x06, 0x40, 0x8c, 0x78, 0x5d, 0xe3,
	0x17, 0x68, 0x72, 0xfb, 0x49, 0x0a, 0x56, 0xd3, 0x07, 0x40, 0x4f, 0xf2, 0x0d, 0x84, 0x09, 0x3a,
	0xfc, 0x91, 0x52, 0xc5, 0x8a, 0x82, 0x04, 0xc0, 0x1e, 0x26, 0xae, 0xc4, 0x5f, 0xa2, 0xd9, 0x35,
	0xd3, 0x09, 0xcf, 0x1a, 0x7e, 0x08, 0xfc, 0x8c, 0xfa, 0x20, 0xbe, 0x40, 0xd3, 0x9f, 0x57, 0x9e,
	0xe8, 0x10, 0x44, 0x53, 0xe6, 0x61, 0x9b, 0x4e, 0x91, 0x14, 0x3a, 0x49, 0x35, 0x19, 0xf9, 0x9d,
	0x6a, 0x10, 0x3f, 0x43, 0xe3, 0xdb, 0x2c, 0xd1, 0xec, 0xdd, 0x3a, 0x67, 0x64, 0x0c, 0x8a, 0x71,
	0xde, 0x00, 0x1b, 0x96, 0xfd, 0xa1, 0x09, 0xf2, 0x59, 0x03, 0xd8, 0x29, 0x6a, 0xd3, 0x7e, 0x52,
	0x89, 0xa0, 0x64, 0xe2, 0xa6, 0xa8, 0x3c, 0xcc, 0xd3, 0xbc, 0xb1, 0x66, 0x93, 0x69, 0x47, 0x03,
	0x18, 0xbe, 0x44, 0x47, 0xb5, 0xa6, 0xb5, 0x74, 0x06, 0xb2, 0xa3, 0xaa, 0x0b, 0x5b, 0x67, 0x6b,
	0x25, 0xcc, 0x3b, 0x77, 0xce, 0x56, 0x1b, 0xc8, 0x7b, 0x5e, 0x24, 0x33, 0xa9, 0xc8, 0x51, 0xe7,
	0x79, 0x80, 0x59, 0x67, 0x6a, 0xcd, 0x52, 0x27, 0xba, 0x2c, 0x48, 0xe8, 0x9c, 0xa9, 0x7c, 0xd0,
	0xbe, 0xfb, 0xfb, 0x82, 0xbd, 0x4d, 0xb4, 0x2a, 0x19, 0x79, 0xe2, 0xde, 0xbd, 0x6c, 0x00, 0x3b,
	0xf3, 0x9b, 0x44, 0x94, 0x1f, 0x8d, 0x87, 0xa5, 0x62, 0xd7, 0xc6, 0x12, 0x82, 0xdd, 0xcc, 0xab,
	0x2e, 0x8c, 0x9f, 0x23, 0x14, 0xb3, 0x54, 0x2a, 0x0a, 0xa2, 0x63, 0x10, 0x21, 0xd5, 0x22, 0x8e,
	0xd7, 0xbc, 0x6e, 0xb2, 0x68, 0xf8, 0x06, 0x81, 0x6f, 0x2d, 0xee, 0x79, 0xbb, 0x4e, 0x27, 0xf5,
	0xb7, 0xf6, 0x30, 0xdb, 0xc3, 0x69, 0xc0, 0x96, 0x53, 0xd7, 0x83, 0xb5, 0x88, 0xed, 0x71, 0xcd,
	0x0b, 0xf3, 0xe5, 0x52, 0xb6, 0x62, 0x42, 0x93, 0x33, 0xa3, 0xe8, 0xc7, 0x53, 0xea, 0x61, 0x76,
	0xcf, 0x6f, 0xe5, 0x83, 0x79, 0x00, 0x01, 0x32, 0xc8, 0x6d, 0x61, 0x4f, 0xfe, 0x22, 0x13, 0x1a,
	0x25, 0x79, 0x92, 0x72, 0xbd, 0x26, 0x4f, 0xdd, 0xc9, 0xcc, 0xc3, 0xac, 0x9f, 0x51, 0xa2, 0xd4,
	0xba, 0x15, 0x9d, 0x1b, 0x51, 0x10, 0xcf, 0x52, 0x1f, 0xbc, 0xf8, 0xef, 0x00, 0xcd, 0x6f, 0x5c,
	0x12, 0x1f, 0x8b, 0x9a, 0xb1, 0xfc, 0x1d, 0x5f, 0xb1, 0x42, 0x27, 0xab, 0x1c, 0xe2, 0x36, 0x88,
	0xc7, 0xba, 0x01, 0xf0, 0x29, 0x1a, 0xc6, 0x2c, 0x97, 0xe6, 0xc4, 0x00, 0xfa, 0x0f, 0x15, 0x54,
	0x36, 0x8a, 0x4b, 0x26, 0x0a, 0xa9, 0x0c, 0x73, 0x00, 0xcc, 0xa8, 0xa8, 0xeb, 0xee, 0x02, 0x07,
	0xdb, 0x0b, 0xdc, 0x59, 0xfe, 0x11, 0x1c, 0xf5, 0x96, 0xff, 0x2b, 0x74, 0xdc, 0xb2, 0x26, 0x2e,
	0x1f, 0x39, 0x65, 0x22, 0x75, 0x21, 0xe9, 0xc7, 0xc7, 0xf9, 0x2e, 0xb5, 0xbd, 0x9e, 0x08, 0x3a,
	0x76, 0xd6, 0xf3, 0x1b, 0x74, 0xe2, 0x29, 0xbc, 0xae, 0x13, 0xe8, 0x7a, 0x52, 0xed, 0x23, 0x77,
	0x82, 0x36, 0x85, 0xc6, 0xdd, 0xa0, 0x7d, 0x87, 0xce, 0x7c, 0x0d, 0x9c, 0x16, 0xae, 0xf7, 0x0c,
	0x7a, 0x9f, 0x55, 0xfb, 0xe9, 0x9d, 0xc8, 0xcc, 0x3b, 0xdd, 0x5d, 0x64, 0xbe, 0x45, 0xa7, 0xbe,
	0xc6, 0x1b, 0xfc, 0x08, 0x9a, 0x9f, 0x56, 0x7b, 0x59, 0xeb, 0x70, 0x1b, 0x6d, 0x88, 0x99, 0xf9,
	0xa2, 0x6d, 0xa8, 0xed, 0xca, 0x45, 0xf7, 0x85, 0x61, 0x9e, 0x00, 0x13, 0xa4, 0xb6, 0xc0, 0xdf,
	0xa3, 0x49, 0xbd, 0x27, 0xe0, 0xa2, 0x8d, 0xd5, 0xfc, 0xd5, 0xb3, 0xab, 0xe6, 0xbe, 0xbe, 0xea,
	0x2e, 0x91, 0xd5, 0xc4, 0x13, 0xbe, 0x39, 0x70, 0xf1, 0x77, 0x0f, 0x2d, 0xba, 0x9a, 0x98, 0x15,
	0x65, 0xa6, 0xe1, 0xd6, 0xcd, 0xb2, 0x25, 0xff, 0x93, 0xc1, 0xce, 0x05, 0xe6, 0xd6, 0x75, 0xa5,
	0xb5, 0xc0, 0x64, 0xb0, 0x54, 0x82, 0x51, 0xa0, 0xfb, 0xce, 0x02, 0xe5, 0x61, 0xf8, 0x87, 0xed,
	0xf5, 0x35, 0x6b, 0x38, 0xb8, 0x9c, 0xbc, 0x22, 0x8f, 0x4d, 0x16, 0xcf, 0x79, 0xa7, 0x7e, 0xf9,
	0x57, 0xcf, 0x04, 0xe5, 0xf5, 0x72, 0x29, 0x4b, 0x95, 0xba, 0x75, 0xf8, 0x1c, 0x9d, 0x19, 0xe0,
	0xce, 0x21, 0x77, 0x16, 0xba, 0x7b, 0x2f, 0x7e, 0x17, 0xe6, 0x17, 0x13, 0x7e, 0x66, 0xc6, 0x5d,
	0x6c, 0x93, 0x91, 0x09, 0x52, 0xd8, 0x33, 0xae, 0x92, 0x6d, 0xe6, 0x56, 0xc9, 0x8a, 0x1b, 0xc7,
	0xc3, 0xfe, 0xbe, 0xa6, 0x91, 0x2c, 0x85, 0x56, 0xeb, 0x70, 0xf0, 0xf2, 0x9f, 0x1e, 0xc2, 0xbb,
	0x06, 0xda, 0x67, 0xd5, 0xe8, 0xf6, 0x14, 0xcf, 0xd1, 0x79, 0x87, 0xa9, 0x4f, 0xdd, 0xc1, 0x1a,
	0x99, 0x59, 0x1e, 0xe3, 0x61, 0x13, 0xcc, 0x34, 0x5f, 0xa0, 0xa7, 0x7b, 0x79, 0x5b, 0x84, 0x03,
	0x3b, 0x6c, 0x43, 0x6b, 0x78, 0x0f, 0x1b, 0x2b, 0x47, 0x1e, 0xec, 0x4c, 0xe5, 0xee, 0x49, 0x1a,
	0x06, 0xfe, 0xb1, 0xfa, 0x05, 0x45, 0xc1, 0x0b, 0x6d, 0xee, 0xb1, 0x70, 0xf4, 0x61, 0x08, 0x7f,
	0xf8, 0xaf, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x21, 0x2d, 0x8a, 0x8f, 0xf9, 0x07, 0x00, 0x00,
}
