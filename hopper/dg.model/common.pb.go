// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package dg_model is a generated protocol buffer package.

It is generated from these files:
	common.proto
	deepdata.proto
	localcommon.proto
	ranker.proto

It has these top-level messages:
	SrcMetadata
	Cutboard
	PointF
	Rect
	RotatedRect
	CutboardImage
	Color
	FeatureVector
	NullMessage
	FaceAttribute
	Image
	FaceAlignResult
	RecFace
	NameAndConfidence
	CategoryAndFeature
	PeopleAttr
	RecVehicle
	RecNonMotorVehicle
	Passenger
	RecPedestrian
	VehicleModelType
	LicensePlate
	VehicleSymbol
	Symbol
	StorageConfig
	VehicleObj
	PedestrianObj
	NonMotorVehicleObj
	GenericObj
	Time
	MatrixError
	RankRepoSizeRequest
	RankRepoSizeResponse
	RankRequestContext
	RankResponseContext
	RankFeatureRequest
	RankFeatureResponse
	RankFeaturesPairRequest
	RankFeaturesPairResponse
	RankItem
	SearchRequest
	SearchResponse
	RankImageRequest
	RankImageResponse
	GetImageContentRequest
	GetImageContentResponse
	FeatureRankingRequest
	FeatureRankingResponse
	InfoAndFeature
	AddFeaturesRequest
	AddFeaturesResponse
	ObjectProperty
*/
package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ObjType int32

const (
	ObjType_OBJ_TYPE_UNKNOWN             ObjType = 0
	ObjType_OBJ_TYPE_CAR                 ObjType = 1
	ObjType_OBJ_TYPE_BICYCLE             ObjType = 2
	ObjType_OBJ_TYPE_TRICYCLE            ObjType = 3
	ObjType_OBJ_TYPE_PEDESTRIAN          ObjType = 4
	ObjType_OBJ_TYPE_FACE                ObjType = 1024
	ObjType_OBJ_TYPE_VEHICLE_VECTOR      ObjType = 2048
	ObjType_OBJ_TYPE_BICYCLE_VECTOR      ObjType = 2049
	ObjType_OBJ_TYPE_TRICYCLE_VECTOR     ObjType = 2050
	ObjType_OBJ_TYPE_PEDESTRIAN_VECTOR   ObjType = 2051
	ObjType_OBJ_TYPE_FACE_VECTOR         ObjType = 3072
	ObjType_OBJ_TYPE_VEHICLE_CUTBOARD    ObjType = 4096
	ObjType_OBJ_TYPE_BICYCLE_CUTBOARD    ObjType = 4097
	ObjType_OBJ_TYPE_TRICYCLE_CUTBOARD   ObjType = 4098
	ObjType_OBJ_TYPE_PEDESTRIAN_CUTBOARD ObjType = 4099
	ObjType_OBJ_TYPE_FACE_CUTBOARD       ObjType = 5120
)

var ObjType_name = map[int32]string{
	0:    "OBJ_TYPE_UNKNOWN",
	1:    "OBJ_TYPE_CAR",
	2:    "OBJ_TYPE_BICYCLE",
	3:    "OBJ_TYPE_TRICYCLE",
	4:    "OBJ_TYPE_PEDESTRIAN",
	1024: "OBJ_TYPE_FACE",
	2048: "OBJ_TYPE_VEHICLE_VECTOR",
	2049: "OBJ_TYPE_BICYCLE_VECTOR",
	2050: "OBJ_TYPE_TRICYCLE_VECTOR",
	2051: "OBJ_TYPE_PEDESTRIAN_VECTOR",
	3072: "OBJ_TYPE_FACE_VECTOR",
	4096: "OBJ_TYPE_VEHICLE_CUTBOARD",
	4097: "OBJ_TYPE_BICYCLE_CUTBOARD",
	4098: "OBJ_TYPE_TRICYCLE_CUTBOARD",
	4099: "OBJ_TYPE_PEDESTRIAN_CUTBOARD",
	5120: "OBJ_TYPE_FACE_CUTBOARD",
}
var ObjType_value = map[string]int32{
	"OBJ_TYPE_UNKNOWN":             0,
	"OBJ_TYPE_CAR":                 1,
	"OBJ_TYPE_BICYCLE":             2,
	"OBJ_TYPE_TRICYCLE":            3,
	"OBJ_TYPE_PEDESTRIAN":          4,
	"OBJ_TYPE_FACE":                1024,
	"OBJ_TYPE_VEHICLE_VECTOR":      2048,
	"OBJ_TYPE_BICYCLE_VECTOR":      2049,
	"OBJ_TYPE_TRICYCLE_VECTOR":     2050,
	"OBJ_TYPE_PEDESTRIAN_VECTOR":   2051,
	"OBJ_TYPE_FACE_VECTOR":         3072,
	"OBJ_TYPE_VEHICLE_CUTBOARD":    4096,
	"OBJ_TYPE_BICYCLE_CUTBOARD":    4097,
	"OBJ_TYPE_TRICYCLE_CUTBOARD":   4098,
	"OBJ_TYPE_PEDESTRIAN_CUTBOARD": 4099,
	"OBJ_TYPE_FACE_CUTBOARD":       5120,
}

func (x ObjType) String() string {
	return proto.EnumName(ObjType_name, int32(x))
}
func (ObjType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DataFmtType int32

const (
	DataFmtType_UNKNOWNFMT DataFmtType = 0
	DataFmtType_JSON       DataFmtType = 1
	DataFmtType_PROTOBUF   DataFmtType = 2
	DataFmtType_CSV        DataFmtType = 3
	DataFmtType_PDF        DataFmtType = 4
)

var DataFmtType_name = map[int32]string{
	0: "UNKNOWNFMT",
	1: "JSON",
	2: "PROTOBUF",
	3: "CSV",
	4: "PDF",
}
var DataFmtType_value = map[string]int32{
	"UNKNOWNFMT": 0,
	"JSON":       1,
	"PROTOBUF":   2,
	"CSV":        3,
	"PDF":        4,
}

func (x DataFmtType) String() string {
	return proto.EnumName(DataFmtType_name, int32(x))
}
func (DataFmtType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SexType int32

const (
	SexType_SEX_TYPE_UNKNOWN SexType = 0
	SexType_SEX_TYPE_MALE    SexType = 1
	SexType_SEX_TYPE_FEMALE  SexType = 2
)

var SexType_name = map[int32]string{
	0: "SEX_TYPE_UNKNOWN",
	1: "SEX_TYPE_MALE",
	2: "SEX_TYPE_FEMALE",
}
var SexType_value = map[string]int32{
	"SEX_TYPE_UNKNOWN": 0,
	"SEX_TYPE_MALE":    1,
	"SEX_TYPE_FEMALE":  2,
}

func (x SexType) String() string {
	return proto.EnumName(SexType_name, int32(x))
}
func (SexType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type NationalType int32

const (
	NationalType_NATIONAL_TYPE_UNKNOWN  NationalType = 0
	NationalType_NATIONAL_TYPE_HAN      NationalType = 1
	NationalType_NATIONAL_TYPE_MINORITY NationalType = 2
)

var NationalType_name = map[int32]string{
	0: "NATIONAL_TYPE_UNKNOWN",
	1: "NATIONAL_TYPE_HAN",
	2: "NATIONAL_TYPE_MINORITY",
}
var NationalType_value = map[string]int32{
	"NATIONAL_TYPE_UNKNOWN":  0,
	"NATIONAL_TYPE_HAN":      1,
	"NATIONAL_TYPE_MINORITY": 2,
}

func (x NationalType) String() string {
	return proto.EnumName(NationalType_name, int32(x))
}
func (NationalType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type AgeType int32

const (
	AgeType_AGE_TYPE_UNKNOWN AgeType = 0
	AgeType_AGE_TYPE_LT15    AgeType = 1
	AgeType_AGE_TYPE_1530    AgeType = 2
	AgeType_AGE_TYPE_3050    AgeType = 3
	AgeType_AGE_TYPE_50UP    AgeType = 4
)

var AgeType_name = map[int32]string{
	0: "AGE_TYPE_UNKNOWN",
	1: "AGE_TYPE_LT15",
	2: "AGE_TYPE_1530",
	3: "AGE_TYPE_3050",
	4: "AGE_TYPE_50UP",
}
var AgeType_value = map[string]int32{
	"AGE_TYPE_UNKNOWN": 0,
	"AGE_TYPE_LT15":    1,
	"AGE_TYPE_1530":    2,
	"AGE_TYPE_3050":    3,
	"AGE_TYPE_50UP":    4,
}

func (x AgeType) String() string {
	return proto.EnumName(AgeType_name, int32(x))
}
func (AgeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type NonMotorVehicleGesture int32

const (
	NonMotorVehicleGesture_ATTITUDE_POSITIVE NonMotorVehicleGesture = 0
	NonMotorVehicleGesture_ATTITUDE_RIGHT    NonMotorVehicleGesture = 1
	NonMotorVehicleGesture_ATTITUDE_LEFT     NonMotorVehicleGesture = 2
	NonMotorVehicleGesture_ATTITUDE_BACK     NonMotorVehicleGesture = 3
)

var NonMotorVehicleGesture_name = map[int32]string{
	0: "ATTITUDE_POSITIVE",
	1: "ATTITUDE_RIGHT",
	2: "ATTITUDE_LEFT",
	3: "ATTITUDE_BACK",
}
var NonMotorVehicleGesture_value = map[string]int32{
	"ATTITUDE_POSITIVE": 0,
	"ATTITUDE_RIGHT":    1,
	"ATTITUDE_LEFT":     2,
	"ATTITUDE_BACK":     3,
}

func (x NonMotorVehicleGesture) String() string {
	return proto.EnumName(NonMotorVehicleGesture_name, int32(x))
}
func (NonMotorVehicleGesture) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DBType int32

const (
	DBType_KAFKA     DBType = 0
	DBType_POSTGRES  DBType = 1
	DBType_FILEIMAGE DBType = 2
)

var DBType_name = map[int32]string{
	0: "KAFKA",
	1: "POSTGRES",
	2: "FILEIMAGE",
}
var DBType_value = map[string]int32{
	"KAFKA":     0,
	"POSTGRES":  1,
	"FILEIMAGE": 2,
}

func (x DBType) String() string {
	return proto.EnumName(DBType_name, int32(x))
}
func (DBType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type SrcMetadata struct {
	Timestamp   int64   `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Duration    int32   `protobuf:"varint,2,opt,name=Duration,json=duration" json:"Duration,omitempty"`
	SensorId    int32   `protobuf:"varint,3,opt,name=SensorId,json=sensorId" json:"SensorId,omitempty"`
	SensorName  string  `protobuf:"bytes,4,opt,name=SensorName,json=sensorName" json:"SensorName,omitempty"`
	SensorUrl   string  `protobuf:"bytes,5,opt,name=SensorUrl,json=sensorUrl" json:"SensorUrl,omitempty"`
	RepoId      int32   `protobuf:"varint,6,opt,name=RepoId,json=repoId" json:"RepoId,omitempty"`
	RepoInfo    string  `protobuf:"bytes,7,opt,name=RepoInfo,json=repoInfo" json:"RepoInfo,omitempty"`
	ObjType     ObjType `protobuf:"varint,8,opt,name=ObjType,json=objType,enum=dg.model.ObjType" json:"ObjType,omitempty"`
	SensorIdStr string  `protobuf:"bytes,9,opt,name=SensorIdStr,json=sensorIdStr" json:"SensorIdStr,omitempty"`
}

func (m *SrcMetadata) Reset()                    { *m = SrcMetadata{} }
func (m *SrcMetadata) String() string            { return proto.CompactTextString(m) }
func (*SrcMetadata) ProtoMessage()               {}
func (*SrcMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SrcMetadata) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SrcMetadata) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SrcMetadata) GetSensorId() int32 {
	if m != nil {
		return m.SensorId
	}
	return 0
}

func (m *SrcMetadata) GetSensorName() string {
	if m != nil {
		return m.SensorName
	}
	return ""
}

func (m *SrcMetadata) GetSensorUrl() string {
	if m != nil {
		return m.SensorUrl
	}
	return ""
}

func (m *SrcMetadata) GetRepoId() int32 {
	if m != nil {
		return m.RepoId
	}
	return 0
}

func (m *SrcMetadata) GetRepoInfo() string {
	if m != nil {
		return m.RepoInfo
	}
	return ""
}

func (m *SrcMetadata) GetObjType() ObjType {
	if m != nil {
		return m.ObjType
	}
	return ObjType_OBJ_TYPE_UNKNOWN
}

func (m *SrcMetadata) GetSensorIdStr() string {
	if m != nil {
		return m.SensorIdStr
	}
	return ""
}

type Cutboard struct {
	X          int32   `protobuf:"varint,1,opt,name=X,json=x" json:"X,omitempty"`
	Y          int32   `protobuf:"varint,2,opt,name=Y,json=y" json:"Y,omitempty"`
	Width      int32   `protobuf:"varint,3,opt,name=Width,json=width" json:"Width,omitempty"`
	Height     int32   `protobuf:"varint,4,opt,name=Height,json=height" json:"Height,omitempty"`
	ResWidth   int32   `protobuf:"varint,5,opt,name=ResWidth,json=resWidth" json:"ResWidth,omitempty"`
	ResHeight  int32   `protobuf:"varint,6,opt,name=ResHeight,json=resHeight" json:"ResHeight,omitempty"`
	Confidence float32 `protobuf:"fixed32,7,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
}

func (m *Cutboard) Reset()                    { *m = Cutboard{} }
func (m *Cutboard) String() string            { return proto.CompactTextString(m) }
func (*Cutboard) ProtoMessage()               {}
func (*Cutboard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cutboard) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Cutboard) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Cutboard) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Cutboard) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Cutboard) GetResWidth() int32 {
	if m != nil {
		return m.ResWidth
	}
	return 0
}

func (m *Cutboard) GetResHeight() int32 {
	if m != nil {
		return m.ResHeight
	}
	return 0
}

func (m *Cutboard) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type PointF struct {
	X float32 `protobuf:"fixed32,1,opt,name=X,json=x" json:"X,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=Y,json=y" json:"Y,omitempty"`
}

func (m *PointF) Reset()                    { *m = PointF{} }
func (m *PointF) String() string            { return proto.CompactTextString(m) }
func (*PointF) ProtoMessage()               {}
func (*PointF) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PointF) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PointF) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Rect struct {
	X      int32 `protobuf:"varint,1,opt,name=X,json=x" json:"X,omitempty"`
	Y      int32 `protobuf:"varint,2,opt,name=Y,json=y" json:"Y,omitempty"`
	Width  int32 `protobuf:"varint,3,opt,name=Width,json=width" json:"Width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=Height,json=height" json:"Height,omitempty"`
}

func (m *Rect) Reset()                    { *m = Rect{} }
func (m *Rect) String() string            { return proto.CompactTextString(m) }
func (*Rect) ProtoMessage()               {}
func (*Rect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Rect) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Rect) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Rect) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Rect) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type RotatedRect struct {
	CenterX float32 `protobuf:"fixed32,1,opt,name=CenterX,json=centerX" json:"CenterX,omitempty"`
	CenterY float32 `protobuf:"fixed32,2,opt,name=CenterY,json=centerY" json:"CenterY,omitempty"`
	Width   float32 `protobuf:"fixed32,3,opt,name=Width,json=width" json:"Width,omitempty"`
	Height  float32 `protobuf:"fixed32,4,opt,name=Height,json=height" json:"Height,omitempty"`
	Angle   float32 `protobuf:"fixed32,5,opt,name=Angle,json=angle" json:"Angle,omitempty"`
}

func (m *RotatedRect) Reset()                    { *m = RotatedRect{} }
func (m *RotatedRect) String() string            { return proto.CompactTextString(m) }
func (*RotatedRect) ProtoMessage()               {}
func (*RotatedRect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RotatedRect) GetCenterX() float32 {
	if m != nil {
		return m.CenterX
	}
	return 0
}

func (m *RotatedRect) GetCenterY() float32 {
	if m != nil {
		return m.CenterY
	}
	return 0
}

func (m *RotatedRect) GetWidth() float32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *RotatedRect) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RotatedRect) GetAngle() float32 {
	if m != nil {
		return m.Angle
	}
	return 0
}

type CutboardImage struct {
	Cutboard *Cutboard    `protobuf:"bytes,1,opt,name=Cutboard,json=cutboard" json:"Cutboard,omitempty"`
	Img      *Image       `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img,omitempty"`
	Rect     *RotatedRect `protobuf:"bytes,3,opt,name=Rect,json=rect" json:"Rect,omitempty"`
}

func (m *CutboardImage) Reset()                    { *m = CutboardImage{} }
func (m *CutboardImage) String() string            { return proto.CompactTextString(m) }
func (*CutboardImage) ProtoMessage()               {}
func (*CutboardImage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CutboardImage) GetCutboard() *Cutboard {
	if m != nil {
		return m.Cutboard
	}
	return nil
}

func (m *CutboardImage) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *CutboardImage) GetRect() *RotatedRect {
	if m != nil {
		return m.Rect
	}
	return nil
}

type Color struct {
	ColorId    int32   `protobuf:"varint,1,opt,name=ColorId,json=colorId" json:"ColorId,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	ColorName  string  `protobuf:"bytes,3,opt,name=ColorName,json=colorName" json:"ColorName,omitempty"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Color) GetColorId() int32 {
	if m != nil {
		return m.ColorId
	}
	return 0
}

func (m *Color) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *Color) GetColorName() string {
	if m != nil {
		return m.ColorName
	}
	return ""
}

type FeatureVector struct {
	Id      int64  `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Feature string `protobuf:"bytes,2,opt,name=Feature,json=feature" json:"Feature,omitempty"`
}

func (m *FeatureVector) Reset()                    { *m = FeatureVector{} }
func (m *FeatureVector) String() string            { return proto.CompactTextString(m) }
func (*FeatureVector) ProtoMessage()               {}
func (*FeatureVector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FeatureVector) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FeatureVector) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

type NullMessage struct {
}

func (m *NullMessage) Reset()                    { *m = NullMessage{} }
func (m *NullMessage) String() string            { return proto.CompactTextString(m) }
func (*NullMessage) ProtoMessage()               {}
func (*NullMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type FaceAttribute struct {
	AttributeId int32   `protobuf:"varint,1,opt,name=AttributeId,json=attributeId" json:"AttributeId,omitempty"`
	Name        string  `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	ValueId     int32   `protobuf:"varint,3,opt,name=ValueId,json=valueId" json:"ValueId,omitempty"`
	Confidence  float32 `protobuf:"fixed32,4,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*FaceAttribute_ValueBool
	//	*FaceAttribute_ValueInt
	//	*FaceAttribute_ValueFloat
	//	*FaceAttribute_ValueString
	Value isFaceAttribute_Value `protobuf_oneof:"Value"`
}

func (m *FaceAttribute) Reset()                    { *m = FaceAttribute{} }
func (m *FaceAttribute) String() string            { return proto.CompactTextString(m) }
func (*FaceAttribute) ProtoMessage()               {}
func (*FaceAttribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isFaceAttribute_Value interface {
	isFaceAttribute_Value()
}

type FaceAttribute_ValueBool struct {
	ValueBool bool `protobuf:"varint,9,opt,name=ValueBool,json=valueBool,oneof"`
}
type FaceAttribute_ValueInt struct {
	ValueInt int32 `protobuf:"varint,10,opt,name=ValueInt,json=valueInt,oneof"`
}
type FaceAttribute_ValueFloat struct {
	ValueFloat float32 `protobuf:"fixed32,11,opt,name=ValueFloat,json=valueFloat,oneof"`
}
type FaceAttribute_ValueString struct {
	ValueString string `protobuf:"bytes,12,opt,name=ValueString,json=valueString,oneof"`
}

func (*FaceAttribute_ValueBool) isFaceAttribute_Value()   {}
func (*FaceAttribute_ValueInt) isFaceAttribute_Value()    {}
func (*FaceAttribute_ValueFloat) isFaceAttribute_Value()  {}
func (*FaceAttribute_ValueString) isFaceAttribute_Value() {}

func (m *FaceAttribute) GetValue() isFaceAttribute_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FaceAttribute) GetAttributeId() int32 {
	if m != nil {
		return m.AttributeId
	}
	return 0
}

func (m *FaceAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FaceAttribute) GetValueId() int32 {
	if m != nil {
		return m.ValueId
	}
	return 0
}

func (m *FaceAttribute) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *FaceAttribute) GetValueBool() bool {
	if x, ok := m.GetValue().(*FaceAttribute_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (m *FaceAttribute) GetValueInt() int32 {
	if x, ok := m.GetValue().(*FaceAttribute_ValueInt); ok {
		return x.ValueInt
	}
	return 0
}

func (m *FaceAttribute) GetValueFloat() float32 {
	if x, ok := m.GetValue().(*FaceAttribute_ValueFloat); ok {
		return x.ValueFloat
	}
	return 0
}

func (m *FaceAttribute) GetValueString() string {
	if x, ok := m.GetValue().(*FaceAttribute_ValueString); ok {
		return x.ValueString
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FaceAttribute) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FaceAttribute_OneofMarshaler, _FaceAttribute_OneofUnmarshaler, _FaceAttribute_OneofSizer, []interface{}{
		(*FaceAttribute_ValueBool)(nil),
		(*FaceAttribute_ValueInt)(nil),
		(*FaceAttribute_ValueFloat)(nil),
		(*FaceAttribute_ValueString)(nil),
	}
}

func _FaceAttribute_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FaceAttribute)
	// Value
	switch x := m.Value.(type) {
	case *FaceAttribute_ValueBool:
		t := uint64(0)
		if x.ValueBool {
			t = 1
		}
		b.EncodeVarint(9<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *FaceAttribute_ValueInt:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.ValueInt))
	case *FaceAttribute_ValueFloat:
		b.EncodeVarint(11<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.ValueFloat)))
	case *FaceAttribute_ValueString:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ValueString)
	case nil:
	default:
		return fmt.Errorf("FaceAttribute.Value has unexpected type %T", x)
	}
	return nil
}

func _FaceAttribute_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FaceAttribute)
	switch tag {
	case 9: // Value.ValueBool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FaceAttribute_ValueBool{x != 0}
		return true, err
	case 10: // Value.ValueInt
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &FaceAttribute_ValueInt{int32(x)}
		return true, err
	case 11: // Value.ValueFloat
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &FaceAttribute_ValueFloat{math.Float32frombits(uint32(x))}
		return true, err
	case 12: // Value.ValueString
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &FaceAttribute_ValueString{x}
		return true, err
	default:
		return false, nil
	}
}

func _FaceAttribute_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FaceAttribute)
	// Value
	switch x := m.Value.(type) {
	case *FaceAttribute_ValueBool:
		n += proto.SizeVarint(9<<3 | proto.WireVarint)
		n += 1
	case *FaceAttribute_ValueInt:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.ValueInt))
	case *FaceAttribute_ValueFloat:
		n += proto.SizeVarint(11<<3 | proto.WireFixed32)
		n += 4
	case *FaceAttribute_ValueString:
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ValueString)))
		n += len(x.ValueString)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Image struct {
	Id      string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Width   int32  `protobuf:"varint,2,opt,name=Width,json=width" json:"Width,omitempty"`
	Height  int32  `protobuf:"varint,3,opt,name=Height,json=height" json:"Height,omitempty"`
	URI     string `protobuf:"bytes,4,opt,name=URI,json=uRI" json:"URI,omitempty"`
	BinData string `protobuf:"bytes,5,opt,name=BinData,json=binData" json:"BinData,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Image) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (m *Image) GetBinData() string {
	if m != nil {
		return m.BinData
	}
	return ""
}

type FaceAlignResult struct {
	LandMarks      []*PointF          `protobuf:"bytes,1,rep,name=LandMarks,json=landMarks" json:"LandMarks,omitempty"`
	LandMarkScores []float32          `protobuf:"fixed32,2,rep,packed,name=LandMarkScores,json=landMarkScores" json:"LandMarkScores,omitempty"`
	Box            *Rect              `protobuf:"bytes,3,opt,name=Box,json=box" json:"Box,omitempty"`
	Scores         map[string]float32 `protobuf:"bytes,4,rep,name=Scores,json=scores" json:"Scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
}

func (m *FaceAlignResult) Reset()                    { *m = FaceAlignResult{} }
func (m *FaceAlignResult) String() string            { return proto.CompactTextString(m) }
func (*FaceAlignResult) ProtoMessage()               {}
func (*FaceAlignResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FaceAlignResult) GetLandMarks() []*PointF {
	if m != nil {
		return m.LandMarks
	}
	return nil
}

func (m *FaceAlignResult) GetLandMarkScores() []float32 {
	if m != nil {
		return m.LandMarkScores
	}
	return nil
}

func (m *FaceAlignResult) GetBox() *Rect {
	if m != nil {
		return m.Box
	}
	return nil
}

func (m *FaceAlignResult) GetScores() map[string]float32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

type RecFace struct {
	Id          int64              `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Confidence  float32            `protobuf:"fixed32,2,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	Img         *CutboardImage     `protobuf:"bytes,3,opt,name=Img,json=img" json:"Img,omitempty"`
	AlignResult *FaceAlignResult   `protobuf:"bytes,4,opt,name=AlignResult,json=alignResult" json:"AlignResult,omitempty"`
	Qualities   map[string]float32 `protobuf:"bytes,5,rep,name=Qualities,json=qualities" json:"Qualities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Features    string             `protobuf:"bytes,6,opt,name=Features,json=features" json:"Features,omitempty"`
	Attributes  []*FaceAttribute   `protobuf:"bytes,7,rep,name=Attributes,json=attributes" json:"Attributes,omitempty"`
	FaceReId    string             `protobuf:"bytes,20,opt,name=FaceReId,json=faceReId" json:"FaceReId,omitempty"`
	QualityOK   bool               `protobuf:"varint,21,opt,name=QualityOK,json=qualityOK" json:"QualityOK,omitempty"`
}

func (m *RecFace) Reset()                    { *m = RecFace{} }
func (m *RecFace) String() string            { return proto.CompactTextString(m) }
func (*RecFace) ProtoMessage()               {}
func (*RecFace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *RecFace) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecFace) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *RecFace) GetImg() *CutboardImage {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *RecFace) GetAlignResult() *FaceAlignResult {
	if m != nil {
		return m.AlignResult
	}
	return nil
}

func (m *RecFace) GetQualities() map[string]float32 {
	if m != nil {
		return m.Qualities
	}
	return nil
}

func (m *RecFace) GetFeatures() string {
	if m != nil {
		return m.Features
	}
	return ""
}

func (m *RecFace) GetAttributes() []*FaceAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *RecFace) GetFaceReId() string {
	if m != nil {
		return m.FaceReId
	}
	return ""
}

func (m *RecFace) GetQualityOK() bool {
	if m != nil {
		return m.QualityOK
	}
	return false
}

type NameAndConfidence struct {
	Id         int32   `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Confidence float32 `protobuf:"fixed32,3,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
}

func (m *NameAndConfidence) Reset()                    { *m = NameAndConfidence{} }
func (m *NameAndConfidence) String() string            { return proto.CompactTextString(m) }
func (*NameAndConfidence) ProtoMessage()               {}
func (*NameAndConfidence) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NameAndConfidence) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NameAndConfidence) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameAndConfidence) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type CategoryAndFeature struct {
	Id           int32                `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	CategoryName string               `protobuf:"bytes,2,opt,name=CategoryName,json=categoryName" json:"CategoryName,omitempty"`
	Items        []*NameAndConfidence `protobuf:"bytes,3,rep,name=Items,json=items" json:"Items,omitempty"`
}

func (m *CategoryAndFeature) Reset()                    { *m = CategoryAndFeature{} }
func (m *CategoryAndFeature) String() string            { return proto.CompactTextString(m) }
func (*CategoryAndFeature) ProtoMessage()               {}
func (*CategoryAndFeature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CategoryAndFeature) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CategoryAndFeature) GetCategoryName() string {
	if m != nil {
		return m.CategoryName
	}
	return ""
}

func (m *CategoryAndFeature) GetItems() []*NameAndConfidence {
	if m != nil {
		return m.Items
	}
	return nil
}

type PeopleAttr struct {
	Sex      *NameAndConfidence    `protobuf:"bytes,1,opt,name=Sex,json=sex" json:"Sex,omitempty"`
	Age      *NameAndConfidence    `protobuf:"bytes,2,opt,name=Age,json=age" json:"Age,omitempty"`
	National *NameAndConfidence    `protobuf:"bytes,3,opt,name=National,json=national" json:"National,omitempty"`
	Category []*CategoryAndFeature `protobuf:"bytes,4,rep,name=Category,json=category" json:"Category,omitempty"`
}

func (m *PeopleAttr) Reset()                    { *m = PeopleAttr{} }
func (m *PeopleAttr) String() string            { return proto.CompactTextString(m) }
func (*PeopleAttr) ProtoMessage()               {}
func (*PeopleAttr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PeopleAttr) GetSex() *NameAndConfidence {
	if m != nil {
		return m.Sex
	}
	return nil
}

func (m *PeopleAttr) GetAge() *NameAndConfidence {
	if m != nil {
		return m.Age
	}
	return nil
}

func (m *PeopleAttr) GetNational() *NameAndConfidence {
	if m != nil {
		return m.National
	}
	return nil
}

func (m *PeopleAttr) GetCategory() []*CategoryAndFeature {
	if m != nil {
		return m.Category
	}
	return nil
}

type RecVehicle struct {
	Id              int64             `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	ModelType       *VehicleModelType `protobuf:"bytes,2,opt,name=ModelType,json=modelType" json:"ModelType,omitempty"`
	Color           *Color            `protobuf:"bytes,3,opt,name=Color,json=color" json:"Color,omitempty"`
	Plate           *LicensePlate     `protobuf:"bytes,4,opt,name=Plate,json=plate" json:"Plate,omitempty"`
	Img             *CutboardImage    `protobuf:"bytes,5,opt,name=Img,json=img" json:"Img,omitempty"`
	Symbols         []*VehicleSymbol  `protobuf:"bytes,6,rep,name=Symbols,json=symbols" json:"Symbols,omitempty"`
	Features        string            `protobuf:"bytes,7,opt,name=Features,json=features" json:"Features,omitempty"`
	VehicleType     ObjType           `protobuf:"varint,8,opt,name=VehicleType,json=vehicleType,enum=dg.model.ObjType" json:"VehicleType,omitempty"`
	VehicleTypeName string            `protobuf:"bytes,9,opt,name=VehicleTypeName,json=vehicleTypeName" json:"VehicleTypeName,omitempty"`
	Plates          []*LicensePlate   `protobuf:"bytes,10,rep,name=Plates,json=plates" json:"Plates,omitempty"`
	Passengers      []*Passenger      `protobuf:"bytes,11,rep,name=Passengers,json=passengers" json:"Passengers,omitempty"`
}

func (m *RecVehicle) Reset()                    { *m = RecVehicle{} }
func (m *RecVehicle) String() string            { return proto.CompactTextString(m) }
func (*RecVehicle) ProtoMessage()               {}
func (*RecVehicle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RecVehicle) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecVehicle) GetModelType() *VehicleModelType {
	if m != nil {
		return m.ModelType
	}
	return nil
}

func (m *RecVehicle) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *RecVehicle) GetPlate() *LicensePlate {
	if m != nil {
		return m.Plate
	}
	return nil
}

func (m *RecVehicle) GetImg() *CutboardImage {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *RecVehicle) GetSymbols() []*VehicleSymbol {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *RecVehicle) GetFeatures() string {
	if m != nil {
		return m.Features
	}
	return ""
}

func (m *RecVehicle) GetVehicleType() ObjType {
	if m != nil {
		return m.VehicleType
	}
	return ObjType_OBJ_TYPE_UNKNOWN
}

func (m *RecVehicle) GetVehicleTypeName() string {
	if m != nil {
		return m.VehicleTypeName
	}
	return ""
}

func (m *RecVehicle) GetPlates() []*LicensePlate {
	if m != nil {
		return m.Plates
	}
	return nil
}

func (m *RecVehicle) GetPassengers() []*Passenger {
	if m != nil {
		return m.Passengers
	}
	return nil
}

type RecNonMotorVehicle struct {
	Id                int64                                    `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	NMVehicleType     int64                                    `protobuf:"varint,2,opt,name=NMVehicleType,json=nMVehicleType" json:"NMVehicleType,omitempty"`
	NMVehicleTypeName string                                   `protobuf:"bytes,3,opt,name=NMVehicleTypeName,json=nMVehicleTypeName" json:"NMVehicleTypeName,omitempty"`
	Img               *CutboardImage                           `protobuf:"bytes,4,opt,name=Img,json=img" json:"Img,omitempty"`
	NMVehicleGesture  NonMotorVehicleGesture                   `protobuf:"varint,5,opt,name=NMVehicleGesture,json=nMVehicleGesture,enum=dg.model.NonMotorVehicleGesture" json:"NMVehicleGesture,omitempty"`
	Passenger         []*RecNonMotorVehicle_NonMotorPedestrian `protobuf:"bytes,6,rep,name=Passenger,json=passenger" json:"Passenger,omitempty"`
	NMVehicle         []*CategoryAndFeature                    `protobuf:"bytes,7,rep,name=NMVehicle,json=nMVehicle" json:"NMVehicle,omitempty"`
}

func (m *RecNonMotorVehicle) Reset()                    { *m = RecNonMotorVehicle{} }
func (m *RecNonMotorVehicle) String() string            { return proto.CompactTextString(m) }
func (*RecNonMotorVehicle) ProtoMessage()               {}
func (*RecNonMotorVehicle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RecNonMotorVehicle) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecNonMotorVehicle) GetNMVehicleType() int64 {
	if m != nil {
		return m.NMVehicleType
	}
	return 0
}

func (m *RecNonMotorVehicle) GetNMVehicleTypeName() string {
	if m != nil {
		return m.NMVehicleTypeName
	}
	return ""
}

func (m *RecNonMotorVehicle) GetImg() *CutboardImage {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *RecNonMotorVehicle) GetNMVehicleGesture() NonMotorVehicleGesture {
	if m != nil {
		return m.NMVehicleGesture
	}
	return NonMotorVehicleGesture_ATTITUDE_POSITIVE
}

func (m *RecNonMotorVehicle) GetPassenger() []*RecNonMotorVehicle_NonMotorPedestrian {
	if m != nil {
		return m.Passenger
	}
	return nil
}

func (m *RecNonMotorVehicle) GetNMVehicle() []*CategoryAndFeature {
	if m != nil {
		return m.NMVehicle
	}
	return nil
}

type RecNonMotorVehicle_NonMotorPedestrian struct {
	Id        int64                 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Sex       *NameAndConfidence    `protobuf:"bytes,2,opt,name=Sex,json=sex" json:"Sex,omitempty"`
	Attribute []*CategoryAndFeature `protobuf:"bytes,3,rep,name=Attribute,json=attribute" json:"Attribute,omitempty"`
}

func (m *RecNonMotorVehicle_NonMotorPedestrian) Reset()         { *m = RecNonMotorVehicle_NonMotorPedestrian{} }
func (m *RecNonMotorVehicle_NonMotorPedestrian) String() string { return proto.CompactTextString(m) }
func (*RecNonMotorVehicle_NonMotorPedestrian) ProtoMessage()    {}
func (*RecNonMotorVehicle_NonMotorPedestrian) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

func (m *RecNonMotorVehicle_NonMotorPedestrian) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecNonMotorVehicle_NonMotorPedestrian) GetSex() *NameAndConfidence {
	if m != nil {
		return m.Sex
	}
	return nil
}

func (m *RecNonMotorVehicle_NonMotorPedestrian) GetAttribute() []*CategoryAndFeature {
	if m != nil {
		return m.Attribute
	}
	return nil
}

type Passenger struct {
	Id            int64          `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	PassengerAttr *PeopleAttr    `protobuf:"bytes,2,opt,name=PassengerAttr,json=passengerAttr" json:"PassengerAttr,omitempty"`
	Face          *RecFace       `protobuf:"bytes,3,opt,name=Face,json=face" json:"Face,omitempty"`
	Driver        bool           `protobuf:"varint,4,opt,name=Driver,json=driver" json:"Driver,omitempty"`
	Img           *CutboardImage `protobuf:"bytes,5,opt,name=Img,json=img" json:"Img,omitempty"`
}

func (m *Passenger) Reset()                    { *m = Passenger{} }
func (m *Passenger) String() string            { return proto.CompactTextString(m) }
func (*Passenger) ProtoMessage()               {}
func (*Passenger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Passenger) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Passenger) GetPassengerAttr() *PeopleAttr {
	if m != nil {
		return m.PassengerAttr
	}
	return nil
}

func (m *Passenger) GetFace() *RecFace {
	if m != nil {
		return m.Face
	}
	return nil
}

func (m *Passenger) GetDriver() bool {
	if m != nil {
		return m.Driver
	}
	return false
}

func (m *Passenger) GetImg() *CutboardImage {
	if m != nil {
		return m.Img
	}
	return nil
}

type RecPedestrian struct {
	Id         int64          `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Img        *CutboardImage `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img,omitempty"`
	Confidence float32        `protobuf:"fixed32,3,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	PedesAttr  *PeopleAttr    `protobuf:"bytes,4,opt,name=PedesAttr,json=pedesAttr" json:"PedesAttr,omitempty"`
	Face       *RecFace       `protobuf:"bytes,5,opt,name=Face,json=face" json:"Face,omitempty"`
}

func (m *RecPedestrian) Reset()                    { *m = RecPedestrian{} }
func (m *RecPedestrian) String() string            { return proto.CompactTextString(m) }
func (*RecPedestrian) ProtoMessage()               {}
func (*RecPedestrian) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RecPedestrian) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RecPedestrian) GetImg() *CutboardImage {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *RecPedestrian) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *RecPedestrian) GetPedesAttr() *PeopleAttr {
	if m != nil {
		return m.PedesAttr
	}
	return nil
}

func (m *RecPedestrian) GetFace() *RecFace {
	if m != nil {
		return m.Face
	}
	return nil
}

type VehicleModelType struct {
	Id          int64   `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	BrandId     int32   `protobuf:"varint,2,opt,name=BrandId,json=brandId" json:"BrandId,omitempty"`
	SubBrandId  int32   `protobuf:"varint,3,opt,name=SubBrandId,json=subBrandId" json:"SubBrandId,omitempty"`
	ModelYearId int32   `protobuf:"varint,4,opt,name=ModelYearId,json=modelYearId" json:"ModelYearId,omitempty"`
	Confidence  float32 `protobuf:"fixed32,5,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	Type        string  `protobuf:"bytes,6,opt,name=Type,json=type" json:"Type,omitempty"`
	Brand       string  `protobuf:"bytes,7,opt,name=Brand,json=brand" json:"Brand,omitempty"`
	SubBrand    string  `protobuf:"bytes,8,opt,name=SubBrand,json=subBrand" json:"SubBrand,omitempty"`
	ModelYear   string  `protobuf:"bytes,9,opt,name=ModelYear,json=modelYear" json:"ModelYear,omitempty"`
	TypeId      int32   `protobuf:"varint,10,opt,name=TypeId,json=typeId" json:"TypeId,omitempty"`
	Model       string  `protobuf:"bytes,11,opt,name=Model,json=model" json:"Model,omitempty"`
	IsHead      int32   `protobuf:"varint,12,opt,name=IsHead,json=isHead" json:"IsHead,omitempty"`
}

func (m *VehicleModelType) Reset()                    { *m = VehicleModelType{} }
func (m *VehicleModelType) String() string            { return proto.CompactTextString(m) }
func (*VehicleModelType) ProtoMessage()               {}
func (*VehicleModelType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *VehicleModelType) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *VehicleModelType) GetBrandId() int32 {
	if m != nil {
		return m.BrandId
	}
	return 0
}

func (m *VehicleModelType) GetSubBrandId() int32 {
	if m != nil {
		return m.SubBrandId
	}
	return 0
}

func (m *VehicleModelType) GetModelYearId() int32 {
	if m != nil {
		return m.ModelYearId
	}
	return 0
}

func (m *VehicleModelType) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *VehicleModelType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VehicleModelType) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *VehicleModelType) GetSubBrand() string {
	if m != nil {
		return m.SubBrand
	}
	return ""
}

func (m *VehicleModelType) GetModelYear() string {
	if m != nil {
		return m.ModelYear
	}
	return ""
}

func (m *VehicleModelType) GetTypeId() int32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *VehicleModelType) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *VehicleModelType) GetIsHead() int32 {
	if m != nil {
		return m.IsHead
	}
	return 0
}

type LicensePlate struct {
	PlateText               string    `protobuf:"bytes,1,opt,name=PlateText,json=plateText" json:"PlateText,omitempty"`
	Color                   *Color    `protobuf:"bytes,2,opt,name=Color,json=color" json:"Color,omitempty"`
	TypeId                  int32     `protobuf:"varint,3,opt,name=TypeId,json=typeId" json:"TypeId,omitempty"`
	TypeName                string    `protobuf:"bytes,4,opt,name=TypeName,json=typeName" json:"TypeName,omitempty"`
	Confidence              float32   `protobuf:"fixed32,5,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	Cutboard                *Cutboard `protobuf:"bytes,6,opt,name=Cutboard,json=cutboard" json:"Cutboard,omitempty"`
	LocalProvinceConfidence float32   `protobuf:"fixed32,7,opt,name=LocalProvinceConfidence,json=localProvinceConfidence" json:"LocalProvinceConfidence,omitempty"`
}

func (m *LicensePlate) Reset()                    { *m = LicensePlate{} }
func (m *LicensePlate) String() string            { return proto.CompactTextString(m) }
func (*LicensePlate) ProtoMessage()               {}
func (*LicensePlate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *LicensePlate) GetPlateText() string {
	if m != nil {
		return m.PlateText
	}
	return ""
}

func (m *LicensePlate) GetColor() *Color {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *LicensePlate) GetTypeId() int32 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *LicensePlate) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *LicensePlate) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *LicensePlate) GetCutboard() *Cutboard {
	if m != nil {
		return m.Cutboard
	}
	return nil
}

func (m *LicensePlate) GetLocalProvinceConfidence() float32 {
	if m != nil {
		return m.LocalProvinceConfidence
	}
	return 0
}

type VehicleSymbol struct {
	SymbolId   int32     `protobuf:"varint,1,opt,name=SymbolId,json=symbolId" json:"SymbolId,omitempty"`
	SymbolName string    `protobuf:"bytes,2,opt,name=SymbolName,json=symbolName" json:"SymbolName,omitempty"`
	Symbols    []*Symbol `protobuf:"bytes,3,rep,name=Symbols,json=symbols" json:"Symbols,omitempty"`
}

func (m *VehicleSymbol) Reset()                    { *m = VehicleSymbol{} }
func (m *VehicleSymbol) String() string            { return proto.CompactTextString(m) }
func (*VehicleSymbol) ProtoMessage()               {}
func (*VehicleSymbol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *VehicleSymbol) GetSymbolId() int32 {
	if m != nil {
		return m.SymbolId
	}
	return 0
}

func (m *VehicleSymbol) GetSymbolName() string {
	if m != nil {
		return m.SymbolName
	}
	return ""
}

func (m *VehicleSymbol) GetSymbols() []*Symbol {
	if m != nil {
		return m.Symbols
	}
	return nil
}

type Symbol struct {
	Cutboard   *Cutboard `protobuf:"bytes,1,opt,name=Cutboard,json=cutboard" json:"Cutboard,omitempty"`
	Confidence float32   `protobuf:"fixed32,2,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
}

func (m *Symbol) Reset()                    { *m = Symbol{} }
func (m *Symbol) String() string            { return proto.CompactTextString(m) }
func (*Symbol) ProtoMessage()               {}
func (*Symbol) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Symbol) GetCutboard() *Cutboard {
	if m != nil {
		return m.Cutboard
	}
	return nil
}

func (m *Symbol) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type StorageConfig struct {
	Address string   `protobuf:"bytes,1,opt,name=Address,json=address" json:"Address,omitempty"`
	Type    DBType   `protobuf:"varint,2,opt,name=Type,json=type,enum=dg.model.DBType" json:"Type,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=Tags,json=tags" json:"Tags,omitempty"`
}

func (m *StorageConfig) Reset()                    { *m = StorageConfig{} }
func (m *StorageConfig) String() string            { return proto.CompactTextString(m) }
func (*StorageConfig) ProtoMessage()               {}
func (*StorageConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *StorageConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StorageConfig) GetType() DBType {
	if m != nil {
		return m.Type
	}
	return DBType_KAFKA
}

func (m *StorageConfig) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type VehicleObj struct {
	Metadata *SrcMetadata  `protobuf:"bytes,1,opt,name=Metadata,json=metadata" json:"Metadata,omitempty"`
	Img      *Image        `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img,omitempty"`
	Vehicle  []*RecVehicle `protobuf:"bytes,3,rep,name=Vehicle,json=vehicle" json:"Vehicle,omitempty"`
}

func (m *VehicleObj) Reset()                    { *m = VehicleObj{} }
func (m *VehicleObj) String() string            { return proto.CompactTextString(m) }
func (*VehicleObj) ProtoMessage()               {}
func (*VehicleObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *VehicleObj) GetMetadata() *SrcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *VehicleObj) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *VehicleObj) GetVehicle() []*RecVehicle {
	if m != nil {
		return m.Vehicle
	}
	return nil
}

type PedestrianObj struct {
	Metadata   *SrcMetadata     `protobuf:"bytes,1,opt,name=Metadata,json=metadata" json:"Metadata,omitempty"`
	Img        *Image           `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img,omitempty"`
	Pedestrian []*RecPedestrian `protobuf:"bytes,3,rep,name=Pedestrian,json=pedestrian" json:"Pedestrian,omitempty"`
}

func (m *PedestrianObj) Reset()                    { *m = PedestrianObj{} }
func (m *PedestrianObj) String() string            { return proto.CompactTextString(m) }
func (*PedestrianObj) ProtoMessage()               {}
func (*PedestrianObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PedestrianObj) GetMetadata() *SrcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PedestrianObj) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *PedestrianObj) GetPedestrian() []*RecPedestrian {
	if m != nil {
		return m.Pedestrian
	}
	return nil
}

type NonMotorVehicleObj struct {
	Metadata        *SrcMetadata          `protobuf:"bytes,1,opt,name=Metadata,json=metadata" json:"Metadata,omitempty"`
	Img             *Image                `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img,omitempty"`
	NonMotorVehicle []*RecNonMotorVehicle `protobuf:"bytes,3,rep,name=NonMotorVehicle,json=nonMotorVehicle" json:"NonMotorVehicle,omitempty"`
}

func (m *NonMotorVehicleObj) Reset()                    { *m = NonMotorVehicleObj{} }
func (m *NonMotorVehicleObj) String() string            { return proto.CompactTextString(m) }
func (*NonMotorVehicleObj) ProtoMessage()               {}
func (*NonMotorVehicleObj) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *NonMotorVehicleObj) GetMetadata() *SrcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *NonMotorVehicleObj) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *NonMotorVehicleObj) GetNonMotorVehicle() []*RecNonMotorVehicle {
	if m != nil {
		return m.NonMotorVehicle
	}
	return nil
}

func init() {
	proto.RegisterType((*SrcMetadata)(nil), "dg.model.SrcMetadata")
	proto.RegisterType((*Cutboard)(nil), "dg.model.Cutboard")
	proto.RegisterType((*PointF)(nil), "dg.model.PointF")
	proto.RegisterType((*Rect)(nil), "dg.model.Rect")
	proto.RegisterType((*RotatedRect)(nil), "dg.model.RotatedRect")
	proto.RegisterType((*CutboardImage)(nil), "dg.model.CutboardImage")
	proto.RegisterType((*Color)(nil), "dg.model.Color")
	proto.RegisterType((*FeatureVector)(nil), "dg.model.FeatureVector")
	proto.RegisterType((*NullMessage)(nil), "dg.model.NullMessage")
	proto.RegisterType((*FaceAttribute)(nil), "dg.model.FaceAttribute")
	proto.RegisterType((*Image)(nil), "dg.model.Image")
	proto.RegisterType((*FaceAlignResult)(nil), "dg.model.FaceAlignResult")
	proto.RegisterType((*RecFace)(nil), "dg.model.RecFace")
	proto.RegisterType((*NameAndConfidence)(nil), "dg.model.NameAndConfidence")
	proto.RegisterType((*CategoryAndFeature)(nil), "dg.model.CategoryAndFeature")
	proto.RegisterType((*PeopleAttr)(nil), "dg.model.PeopleAttr")
	proto.RegisterType((*RecVehicle)(nil), "dg.model.RecVehicle")
	proto.RegisterType((*RecNonMotorVehicle)(nil), "dg.model.RecNonMotorVehicle")
	proto.RegisterType((*RecNonMotorVehicle_NonMotorPedestrian)(nil), "dg.model.RecNonMotorVehicle.NonMotorPedestrian")
	proto.RegisterType((*Passenger)(nil), "dg.model.Passenger")
	proto.RegisterType((*RecPedestrian)(nil), "dg.model.RecPedestrian")
	proto.RegisterType((*VehicleModelType)(nil), "dg.model.VehicleModelType")
	proto.RegisterType((*LicensePlate)(nil), "dg.model.LicensePlate")
	proto.RegisterType((*VehicleSymbol)(nil), "dg.model.VehicleSymbol")
	proto.RegisterType((*Symbol)(nil), "dg.model.Symbol")
	proto.RegisterType((*StorageConfig)(nil), "dg.model.StorageConfig")
	proto.RegisterType((*VehicleObj)(nil), "dg.model.VehicleObj")
	proto.RegisterType((*PedestrianObj)(nil), "dg.model.PedestrianObj")
	proto.RegisterType((*NonMotorVehicleObj)(nil), "dg.model.NonMotorVehicleObj")
	proto.RegisterEnum("dg.model.ObjType", ObjType_name, ObjType_value)
	proto.RegisterEnum("dg.model.DataFmtType", DataFmtType_name, DataFmtType_value)
	proto.RegisterEnum("dg.model.SexType", SexType_name, SexType_value)
	proto.RegisterEnum("dg.model.NationalType", NationalType_name, NationalType_value)
	proto.RegisterEnum("dg.model.AgeType", AgeType_name, AgeType_value)
	proto.RegisterEnum("dg.model.NonMotorVehicleGesture", NonMotorVehicleGesture_name, NonMotorVehicleGesture_value)
	proto.RegisterEnum("dg.model.DBType", DBType_name, DBType_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x59, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0x36, 0x49, 0x51, 0x22, 0x8f, 0x2c, 0x9b, 0x9e, 0x75, 0x62, 0xc6, 0x9b, 0x6e, 0xb5, 0xc4,
	0xa6, 0x70, 0xdc, 0xad, 0x9b, 0x38, 0x08, 0x92, 0x4d, 0x7f, 0x00, 0x59, 0x96, 0x6c, 0xae, 0x6d,
	0x49, 0x1d, 0xc9, 0x4e, 0x0c, 0x14, 0x08, 0x68, 0x72, 0xa2, 0x68, 0x23, 0x91, 0x5e, 0x92, 0xf6,
	0xda, 0xe8, 0x4d, 0x76, 0x17, 0x7b, 0xd7, 0x1f, 0xb4, 0x0f, 0xd0, 0xab, 0x5e, 0xef, 0x45, 0xdf,
	0xa0, 0x28, 0x0a, 0xf4, 0x25, 0xfa, 0x00, 0x7d, 0x8b, 0x62, 0x86, 0xc3, 0x21, 0x29, 0x39, 0x4e,
	0x02, 0x74, 0xaf, 0xc4, 0xf3, 0x33, 0x73, 0xbe, 0x39, 0x73, 0xfe, 0x48, 0xc1, 0xbc, 0x1b, 0x4c,
	0x26, 0x81, 0xbf, 0x71, 0x1a, 0x06, 0x71, 0x80, 0x34, 0x6f, 0xb8, 0x31, 0x09, 0x3c, 0x32, 0xb6,
	0xfe, 0x26, 0x43, 0xb5, 0x1f, 0xba, 0x07, 0x24, 0x76, 0x3c, 0x27, 0x76, 0xd0, 0x6d, 0xd0, 0x07,
	0xa3, 0x09, 0x89, 0x62, 0x67, 0x72, 0x6a, 0x4a, 0x75, 0x69, 0x4d, 0xc1, 0x7a, 0x9c, 0x32, 0xd0,
	0x2a, 0x68, 0xdb, 0x67, 0xa1, 0x13, 0x8f, 0x02, 0xdf, 0x94, 0xeb, 0xd2, 0x9a, 0x8a, 0x35, 0x8f,
	0xd3, 0x54, 0xd6, 0x27, 0x7e, 0x14, 0x84, 0xb6, 0x67, 0x2a, 0x89, 0x2c, 0xe2, 0x34, 0xfa, 0x08,
	0x20, 0x91, 0x75, 0x9c, 0x09, 0x31, 0x4b, 0x75, 0x69, 0x4d, 0xc7, 0x10, 0x09, 0x0e, 0xb5, 0x9a,
	0xc8, 0x0f, 0xc3, 0xb1, 0xa9, 0x32, 0xb1, 0x1e, 0xa5, 0x0c, 0x74, 0x13, 0xca, 0x98, 0x9c, 0x06,
	0xb6, 0x67, 0x96, 0xd9, 0xbe, 0xe5, 0x90, 0x51, 0xd4, 0x22, 0xe3, 0xfb, 0x2f, 0x02, 0xb3, 0xc2,
	0x16, 0x69, 0x21, 0xa7, 0xd1, 0x4f, 0xa1, 0xd2, 0x3d, 0xf9, 0x62, 0x70, 0x79, 0x4a, 0x4c, 0xad,
	0x2e, 0xad, 0x2d, 0x6c, 0x2e, 0x6d, 0xa4, 0x67, 0xde, 0xe0, 0x02, 0x5c, 0x09, 0x92, 0x07, 0x54,
	0x87, 0x6a, 0x0a, 0xbd, 0x1f, 0x87, 0xa6, 0xce, 0xf6, 0xaa, 0x46, 0x19, 0xcb, 0xfa, 0x5e, 0x02,
	0xad, 0x79, 0x16, 0x9f, 0x04, 0x4e, 0xe8, 0xa1, 0x79, 0x90, 0x9e, 0x31, 0xdf, 0xa8, 0x58, 0xba,
	0xa0, 0xd4, 0x31, 0x77, 0x86, 0x74, 0x89, 0x96, 0x41, 0x7d, 0x3a, 0xf2, 0xe2, 0x97, 0xdc, 0x05,
	0xea, 0x57, 0x94, 0xa0, 0x27, 0xd8, 0x25, 0xa3, 0xe1, 0xcb, 0x98, 0x9d, 0x5d, 0xc5, 0xe5, 0x97,
	0x8c, 0x4a, 0x4e, 0x10, 0x25, 0x0b, 0xd4, 0xc4, 0x67, 0x21, 0xa7, 0xa9, 0x4f, 0x30, 0x89, 0xf8,
	0xb2, 0xe4, 0xe0, 0x7a, 0x98, 0x32, 0xa8, 0x47, 0x9b, 0x81, 0xff, 0x62, 0xe4, 0x11, 0xdf, 0x25,
	0xec, 0xf4, 0x32, 0x06, 0x57, 0x70, 0xac, 0x4f, 0xa0, 0xdc, 0x0b, 0x46, 0x7e, 0xdc, 0xce, 0xd0,
	0xca, 0x05, 0xb4, 0x32, 0x96, 0x2e, 0xad, 0x1e, 0x94, 0x30, 0x71, 0xe3, 0xff, 0xdf, 0x89, 0xac,
	0xef, 0x24, 0xa8, 0xe2, 0x20, 0x76, 0x62, 0xe2, 0xb1, 0x9d, 0x4d, 0xa8, 0x34, 0x89, 0x1f, 0x93,
	0x30, 0xc5, 0x50, 0x71, 0x13, 0x32, 0x93, 0xa4, 0x78, 0xb8, 0xe4, 0xb8, 0x68, 0x51, 0xbe, 0xda,
	0xa2, 0x2c, 0x7c, 0xb8, 0x0c, 0x6a, 0xc3, 0x1f, 0x8e, 0x09, 0x73, 0xa0, 0x8c, 0x55, 0x87, 0x12,
	0xd6, 0x1f, 0x24, 0xa8, 0xa5, 0x17, 0x66, 0x4f, 0x9c, 0x21, 0x41, 0x1b, 0xd9, 0x0d, 0x32, 0x28,
	0xd5, 0x4d, 0x94, 0x85, 0x44, 0x2a, 0xc1, 0x9a, 0x9b, 0xde, 0xf2, 0xc7, 0xa0, 0xd8, 0x93, 0x21,
	0xc3, 0x56, 0xdd, 0x5c, 0xcc, 0x54, 0xd9, 0x6e, 0x58, 0x19, 0x4d, 0x86, 0xe8, 0x6e, 0xe2, 0x3e,
	0x86, 0xb3, 0xba, 0x79, 0x23, 0xd3, 0xc9, 0x79, 0x00, 0x97, 0x42, 0xe2, 0xc6, 0xd6, 0x73, 0x50,
	0x9b, 0xc1, 0x38, 0x08, 0xd9, 0xb1, 0xe9, 0x83, 0xed, 0x71, 0x87, 0x57, 0xdc, 0x84, 0x9c, 0xba,
	0x52, 0x79, 0xfa, 0x4a, 0x69, 0x40, 0xb0, 0x95, 0x2c, 0x87, 0x94, 0x24, 0x49, 0xdc, 0x94, 0x61,
	0x7d, 0x06, 0xb5, 0x36, 0x71, 0xe2, 0xb3, 0x90, 0x1c, 0x11, 0x37, 0x0e, 0x42, 0xb4, 0x00, 0x32,
	0xb7, 0xa1, 0x60, 0x79, 0xe4, 0x51, 0xc3, 0x5c, 0x81, 0xed, 0xad, 0xe3, 0xca, 0x8b, 0x84, 0xb4,
	0x6a, 0x50, 0xed, 0x9c, 0x8d, 0xc7, 0x07, 0x24, 0x8a, 0x9c, 0x21, 0xb1, 0x7e, 0x2f, 0x43, 0xad,
	0xed, 0xb8, 0xa4, 0x11, 0xc7, 0xe1, 0xe8, 0xe4, 0x2c, 0x66, 0xf9, 0x21, 0x08, 0x81, 0xbb, 0xea,
	0x64, 0x2c, 0x84, 0xa0, 0xc4, 0x60, 0x25, 0x3b, 0x97, 0x7c, 0x9a, 0xd4, 0x26, 0x54, 0x8e, 0x9c,
	0xf1, 0x19, 0x11, 0xf5, 0xa0, 0x72, 0x9e, 0x90, 0x53, 0x27, 0x2d, 0xcd, 0x9c, 0xf4, 0x23, 0xd0,
	0xd9, 0xca, 0xad, 0x20, 0x18, 0xb3, 0x6c, 0xd4, 0x76, 0xe7, 0xb0, 0x7e, 0x9e, 0xb2, 0xd0, 0x6d,
	0xd0, 0x92, 0x9d, 0xfd, 0xd8, 0x04, 0xba, 0xf5, 0xee, 0x1c, 0xd6, 0xce, 0x39, 0x07, 0xd5, 0x01,
	0x98, 0xb4, 0x3d, 0x0e, 0x9c, 0xd8, 0xac, 0xd2, 0xdd, 0x77, 0xe7, 0x30, 0x9c, 0x0b, 0x1e, 0xb2,
	0xa0, 0xca, 0x34, 0xfa, 0x71, 0x38, 0xf2, 0x87, 0xe6, 0x3c, 0x05, 0xbd, 0x3b, 0x87, 0xab, 0xe7,
	0x19, 0x73, 0xab, 0x02, 0x2a, 0xd3, 0xb1, 0xbe, 0x04, 0x35, 0x09, 0xa0, 0xcc, 0xa1, 0x3a, 0x73,
	0xa8, 0x08, 0x53, 0xf9, 0xea, 0xc4, 0x50, 0x0a, 0xa9, 0x6e, 0x80, 0x72, 0x88, 0x6d, 0x5e, 0xfb,
	0x94, 0x33, 0x6c, 0x53, 0xff, 0x6c, 0x8d, 0xfc, 0x6d, 0x27, 0x76, 0x78, 0xc9, 0xab, 0x9c, 0x24,
	0xa4, 0xf5, 0x9d, 0x0c, 0x8b, 0xec, 0x06, 0xc6, 0xa3, 0xa1, 0x8f, 0x49, 0x74, 0x36, 0x8e, 0xd1,
	0x06, 0xe8, 0xfb, 0x8e, 0xef, 0x1d, 0x38, 0xe1, 0xab, 0xc8, 0x94, 0xea, 0xca, 0x5a, 0x75, 0xd3,
	0xc8, 0x02, 0x2e, 0xc9, 0x75, 0xac, 0x8f, 0x53, 0x15, 0xf4, 0x13, 0x58, 0x48, 0xf5, 0xfb, 0x6e,
	0x10, 0x92, 0xc8, 0x94, 0xeb, 0xca, 0x9a, 0x8c, 0x17, 0xc6, 0x05, 0x2e, 0xaa, 0x83, 0xb2, 0x15,
	0x5c, 0xf0, 0x10, 0x5e, 0xc8, 0x85, 0x30, 0x8d, 0x5d, 0xe5, 0x24, 0xb8, 0x40, 0xbf, 0x82, 0x32,
	0xdf, 0xa1, 0xc4, 0xcc, 0xde, 0xc9, 0x94, 0xa6, 0x40, 0x6e, 0x24, 0x7a, 0x2d, 0x3f, 0x0e, 0x2f,
	0x71, 0x39, 0x62, 0xc4, 0xea, 0x67, 0x50, 0xcd, 0xb1, 0xa9, 0x1f, 0x5e, 0x91, 0x4b, 0xee, 0x46,
	0xfa, 0x48, 0xfd, 0xc8, 0x1c, 0xcf, 0x43, 0x3e, 0x21, 0x9e, 0xc8, 0x8f, 0x25, 0xeb, 0x7b, 0x05,
	0x2a, 0x98, 0xb8, 0xd4, 0xca, 0x4c, 0x38, 0xbf, 0x2d, 0x5b, 0xee, 0x26, 0xe9, 0x9b, 0x9c, 0x6b,
	0x65, 0x36, 0xd3, 0x73, 0x69, 0xfc, 0x0b, 0xa8, 0xe6, 0x0e, 0xc1, 0xae, 0xa8, 0xba, 0x79, 0xeb,
	0x8d, 0xa7, 0xc4, 0x55, 0x27, 0x77, 0x2f, 0xbf, 0x06, 0xfd, 0x37, 0x67, 0xce, 0x78, 0x14, 0x8f,
	0x48, 0x64, 0xaa, 0xcc, 0x41, 0xf5, 0x82, 0x17, 0xe9, 0xea, 0x0d, 0xa1, 0x92, 0xf8, 0x46, 0xff,
	0x32, 0xa5, 0x69, 0x0b, 0xe0, 0x69, 0x19, 0xb1, 0x2a, 0xaf, 0x63, 0x8d, 0xe7, 0x65, 0x84, 0x1e,
	0x01, 0x88, 0xbc, 0x8b, 0xcc, 0x0a, 0xdb, 0x7c, 0x65, 0x0a, 0x57, 0x2a, 0xc7, 0x20, 0xf2, 0x31,
	0xd9, 0xd4, 0x71, 0x09, 0xa6, 0xb9, 0xb7, 0xcc, 0x37, 0xe5, 0x34, 0x2d, 0x23, 0x09, 0x9a, 0xcb,
	0xee, 0x9e, 0x79, 0x83, 0x26, 0x57, 0x0a, 0xe7, 0xb2, 0xbb, 0xb7, 0xfa, 0x4b, 0x58, 0x28, 0x62,
	0x7d, 0xaf, 0x0b, 0x7b, 0x0a, 0x4b, 0xb4, 0x0c, 0x34, 0x7c, 0x2f, 0xbb, 0x9b, 0xdc, 0xcd, 0xa9,
	0xec, 0xe6, 0xae, 0xaa, 0x15, 0xc5, 0xdb, 0x54, 0x66, 0xda, 0xd9, 0xef, 0x00, 0x35, 0x9d, 0x98,
	0x0c, 0x83, 0xf0, 0xb2, 0xe1, 0x7b, 0xdc, 0x61, 0x33, 0x3b, 0x5b, 0x30, 0x9f, 0x6a, 0xe5, 0x2c,
	0xcc, 0xbb, 0x39, 0x1e, 0xba, 0x0f, 0xaa, 0x1d, 0x93, 0x49, 0x64, 0x2a, 0xcc, 0x9d, 0x1f, 0x66,
	0xee, 0x9c, 0x41, 0x8e, 0xd5, 0x11, 0xd5, 0xb4, 0xfe, 0x23, 0x01, 0xf4, 0x48, 0x70, 0x3a, 0x66,
	0xde, 0x46, 0x3f, 0x03, 0xa5, 0x4f, 0x2e, 0x78, 0x0f, 0xb9, 0x76, 0xbd, 0x12, 0x91, 0x0b, 0xaa,
	0xde, 0x18, 0x12, 0xde, 0x47, 0xae, 0x57, 0xa7, 0x55, 0xe6, 0x11, 0x68, 0x1d, 0x36, 0x50, 0x39,
	0x63, 0x1e, 0xbc, 0xd7, 0xae, 0xd1, 0x7c, 0xae, 0x8c, 0x1e, 0x83, 0x96, 0x1e, 0x9e, 0x27, 0xea,
	0xed, 0x5c, 0xd4, 0xcf, 0x38, 0x0f, 0x6b, 0xa9, 0x5b, 0xac, 0xff, 0x2a, 0x00, 0x98, 0xb8, 0x47,
	0xe4, 0xe5, 0xc8, 0x1d, 0xcf, 0x66, 0xda, 0x63, 0xd0, 0x0f, 0xe8, 0x26, 0x6c, 0x98, 0x4a, 0x8e,
	0xb1, 0x9a, 0xed, 0xcc, 0x57, 0x09, 0x0d, 0xac, 0x4f, 0xd2, 0x47, 0x74, 0x87, 0x37, 0x3d, 0x7e,
	0x90, 0x5c, 0x13, 0x65, 0x6c, 0xac, 0xb2, 0xf6, 0x85, 0x3e, 0x05, 0xb5, 0x37, 0x76, 0x62, 0xc2,
	0x33, 0xef, 0x66, 0xa6, 0xb6, 0x3f, 0x72, 0x89, 0x1f, 0x11, 0x26, 0xc5, 0xea, 0x29, 0xfd, 0x49,
	0x13, 0x5b, 0x7d, 0x87, 0xc4, 0xbe, 0x0f, 0x95, 0xfe, 0xe5, 0xe4, 0x24, 0x18, 0xd3, 0xd4, 0x9a,
	0x4a, 0x1e, 0x8e, 0x3b, 0x91, 0xe3, 0x4a, 0x94, 0xe8, 0x15, 0xd2, 0xb1, 0x32, 0x95, 0x8e, 0x0f,
	0xa0, 0xca, 0x57, 0x5d, 0x3f, 0x57, 0x56, 0xcf, 0x33, 0x2d, 0xb4, 0x06, 0x8b, 0xb9, 0x45, 0x2c,
	0x2c, 0x93, 0xf9, 0x72, 0xf1, 0xbc, 0xc8, 0x46, 0x1b, 0x50, 0x66, 0x07, 0x8d, 0x4c, 0x60, 0x60,
	0xdf, 0xe4, 0x87, 0x32, 0xf3, 0x03, 0x85, 0x03, 0x3d, 0x27, 0x8a, 0x88, 0x3f, 0x24, 0x61, 0x64,
	0x56, 0xd9, 0x9a, 0x0f, 0x72, 0x2d, 0x21, 0x95, 0x61, 0x38, 0x15, 0x6a, 0xd6, 0x1f, 0x4b, 0x80,
	0x30, 0x71, 0x3b, 0x81, 0x7f, 0x10, 0xc4, 0x41, 0xf8, 0xa6, 0x3b, 0xff, 0x04, 0x6a, 0x9d, 0x83,
	0xfc, 0x61, 0x65, 0x26, 0xaa, 0xf9, 0x79, 0x26, 0xfa, 0x14, 0x96, 0x0a, 0x5a, 0xb9, 0xc9, 0x64,
	0xc9, 0x9f, 0x16, 0xa4, 0x17, 0x57, 0x7a, 0x87, 0x8b, 0xdb, 0x07, 0x43, 0x6c, 0xbc, 0x43, 0x22,
	0x36, 0xb4, 0xa8, 0xcc, 0xdd, 0xb9, 0xda, 0x3a, 0x75, 0x06, 0xae, 0x87, 0x0d, 0x7f, 0x6a, 0x25,
	0x3a, 0x00, 0x5d, 0x38, 0x83, 0x07, 0xc2, 0xcf, 0x0b, 0x25, 0x7a, 0x6a, 0x27, 0xb1, 0x73, 0x8f,
	0x78, 0x24, 0x8a, 0xc3, 0x91, 0xe3, 0x63, 0x5d, 0xf8, 0x10, 0x3d, 0x01, 0x5d, 0x80, 0xe3, 0x45,
	0xf9, 0xfa, 0x4c, 0xd3, 0x05, 0xa2, 0xd5, 0x3f, 0x49, 0x80, 0x66, 0x77, 0x9f, 0x71, 0x3f, 0x2f,
	0x31, 0xf2, 0x3b, 0x96, 0x98, 0x27, 0xa0, 0x8b, 0x3e, 0xc0, 0xeb, 0xda, 0x5b, 0x10, 0x89, 0x5e,
	0x61, 0xfd, 0x43, 0xca, 0x79, 0x67, 0x06, 0xc8, 0x13, 0xa8, 0x09, 0x21, 0x35, 0xc1, 0x21, 0x2d,
	0xe7, 0xc2, 0x4c, 0x14, 0x46, 0x5c, 0x3b, 0xcd, 0xab, 0xa2, 0x3b, 0x50, 0xa2, 0x4d, 0x88, 0x27,
	0xff, 0xd2, 0x4c, 0x53, 0xc4, 0x25, 0xda, 0x93, 0xe8, 0xc0, 0xb4, 0x1d, 0x8e, 0xce, 0x49, 0xc8,
	0x22, 0x43, 0xc3, 0x65, 0x8f, 0x51, 0xef, 0x91, 0xe7, 0xd6, 0xbf, 0x24, 0xa8, 0x61, 0xe2, 0x5e,
	0xe3, 0xd0, 0xbb, 0xf9, 0x61, 0xfe, 0xfa, 0xd8, 0x7b, 0x4b, 0x2b, 0x42, 0x9b, 0xa0, 0x33, 0x43,
	0xcc, 0x1d, 0xa5, 0x6b, 0xdc, 0xa1, 0x9f, 0xa6, 0x6a, 0xc2, 0x15, 0xea, 0xb5, 0xae, 0xb0, 0xfe,
	0x2d, 0x83, 0x31, 0x5d, 0x4f, 0xaf, 0x9a, 0xe3, 0xb7, 0x42, 0xc7, 0xf7, 0x6c, 0x8f, 0x0f, 0x9e,
	0x95, 0x93, 0x84, 0x64, 0x6f, 0xd9, 0x67, 0x27, 0xa9, 0x30, 0x19, 0x3f, 0x21, 0x12, 0x1c, 0x3a,
	0xc6, 0xb3, 0x6d, 0x8f, 0x89, 0x43, 0x5f, 0x3f, 0x92, 0x17, 0xb7, 0xea, 0x24, 0x63, 0x4d, 0x9d,
	0x5d, 0x9d, 0x39, 0x3b, 0x82, 0x12, 0xab, 0x06, 0xc9, 0xa0, 0x52, 0x8a, 0x29, 0xbe, 0x65, 0x50,
	0x99, 0x01, 0x5e, 0x2e, 0x55, 0x86, 0x86, 0x7d, 0x0d, 0xe0, 0x96, 0x59, 0xa1, 0xd4, 0xb1, 0x96,
	0x22, 0xa1, 0x13, 0x88, 0xc0, 0xc1, 0x8b, 0xa1, 0x2e, 0x50, 0xd0, 0x78, 0xa0, 0x36, 0x6c, 0x2f,
	0x19, 0xed, 0x71, 0x39, 0x66, 0x14, 0xb5, 0xc3, 0x56, 0xb1, 0x89, 0x5e, 0xc7, 0x2a, 0x5b, 0x41,
	0xb5, 0xed, 0x68, 0x97, 0x38, 0x1e, 0x9b, 0xe2, 0x55, 0x5c, 0x1e, 0x31, 0xca, 0xfa, 0xb3, 0x0c,
	0xf3, 0xf9, 0xaa, 0x49, 0x8d, 0xb2, 0x87, 0x01, 0xb9, 0x88, 0xf9, 0x30, 0xa3, 0x9f, 0xa6, 0x8c,
	0xac, 0x53, 0xc9, 0xd7, 0x76, 0xaa, 0x0c, 0x9b, 0x52, 0xc0, 0xb6, 0x0a, 0x9a, 0xa8, 0x7f, 0xc9,
	0x84, 0xaf, 0xc5, 0x69, 0xd9, 0x7b, 0x9b, 0x4f, 0xf3, 0xef, 0xa5, 0xe5, 0x77, 0x78, 0x2f, 0x7d,
	0x0c, 0x2b, 0xfb, 0x81, 0xeb, 0x8c, 0x7b, 0x61, 0x70, 0x3e, 0xf2, 0x5d, 0x32, 0xf3, 0x19, 0x60,
	0x65, 0x7c, 0xb5, 0xd8, 0xfa, 0x0a, 0x6a, 0x85, 0xae, 0xc7, 0x2e, 0x89, 0x3d, 0x89, 0x29, 0x4a,
	0x8b, 0x38, 0xcd, 0x82, 0x89, 0x3d, 0xe7, 0x26, 0x29, 0x88, 0x04, 0x07, 0xad, 0x67, 0xbd, 0x55,
	0x99, 0x7e, 0x1b, 0x99, 0x6a, 0xaa, 0xd6, 0x33, 0x28, 0x73, 0x8b, 0xef, 0xfb, 0x12, 0xfe, 0x96,
	0x29, 0xdf, 0x72, 0xa1, 0xd6, 0x8f, 0x83, 0xd0, 0x19, 0x26, 0xe7, 0x1c, 0xd2, 0xec, 0x68, 0x78,
	0x5e, 0x48, 0xa2, 0x88, 0x5f, 0x72, 0xc5, 0x49, 0x48, 0xf4, 0x09, 0x8f, 0x5d, 0x99, 0xf5, 0x91,
	0x1c, 0xda, 0xed, 0x2d, 0xd6, 0xb5, 0x93, 0x68, 0xa6, 0x11, 0xee, 0x0c, 0x93, 0x33, 0xd1, 0x08,
	0x77, 0x86, 0x91, 0xf5, 0x17, 0x09, 0x80, 0x3b, 0xae, 0x7b, 0xf2, 0x05, 0xba, 0x0f, 0x5a, 0xfa,
	0xb9, 0x8c, 0x9f, 0x21, 0xf7, 0xe6, 0x9f, 0xfb, 0x96, 0x86, 0xb5, 0x49, 0xfa, 0x55, 0xed, 0x1d,
	0xbe, 0x25, 0x6c, 0x40, 0x25, 0xed, 0x29, 0x89, 0x3f, 0x97, 0x0b, 0x55, 0x82, 0xcb, 0x70, 0x85,
	0x4f, 0x0d, 0xd6, 0x5f, 0x25, 0xa8, 0x65, 0x05, 0xef, 0x87, 0xc3, 0xf5, 0x88, 0xce, 0xbe, 0xa9,
	0x19, 0x0e, 0x6d, 0xa5, 0x00, 0x2d, 0xd7, 0x25, 0xe1, 0x54, 0x3c, 0x5b, 0x7f, 0xcf, 0xb5, 0xba,
	0x1f, 0xdc, 0x7b, 0x6d, 0x58, 0x9c, 0xb2, 0x35, 0xdb, 0x07, 0x67, 0x1b, 0x3d, 0x5e, 0xf4, 0x8b,
	0x8c, 0xf5, 0x7f, 0x2a, 0xe2, 0xbb, 0x21, 0x5a, 0x06, 0xa3, 0xbb, 0xf5, 0xf9, 0xf3, 0xc1, 0x71,
	0xaf, 0xf5, 0xfc, 0xb0, 0xb3, 0xd7, 0xe9, 0x3e, 0xed, 0x18, 0x73, 0xc8, 0x80, 0x79, 0xc1, 0x6d,
	0x36, 0xb0, 0x21, 0x15, 0xf4, 0xb6, 0xec, 0xe6, 0x71, 0x73, 0xbf, 0x65, 0xc8, 0xe8, 0x06, 0x2c,
	0x09, 0xee, 0x00, 0x73, 0xb6, 0x82, 0x56, 0xe0, 0x03, 0xc1, 0xee, 0xb5, 0xb6, 0x5b, 0xfd, 0x01,
	0xb6, 0x1b, 0x1d, 0xa3, 0x84, 0x10, 0xd4, 0x84, 0xa0, 0xdd, 0x68, 0xb6, 0x8c, 0xd7, 0x1a, 0xba,
	0x0d, 0x2b, 0x82, 0x77, 0xd4, 0xda, 0xb5, 0x9b, 0xfb, 0xf4, 0xb7, 0x39, 0xe8, 0x62, 0xe3, 0xb5,
	0x51, 0x90, 0x72, 0xbb, 0xa9, 0xf4, 0x6b, 0x03, 0xfd, 0x08, 0xcc, 0x19, 0xfb, 0xa9, 0xf8, 0x1b,
	0x03, 0xfd, 0x18, 0x56, 0xaf, 0xc0, 0x91, 0x2a, 0x7c, 0x6b, 0xa0, 0x5b, 0xb0, 0x5c, 0xc0, 0x23,
	0x0c, 0x9b, 0xe8, 0x23, 0xb8, 0x35, 0x03, 0xab, 0x79, 0x38, 0xd8, 0xea, 0x36, 0xf0, 0xb6, 0xf1,
	0xba, 0x5e, 0x90, 0xa7, 0xc0, 0x84, 0xfc, 0xeb, 0x7a, 0xc1, 0xb6, 0x80, 0x26, 0x14, 0xbe, 0xa9,
	0xa3, 0x8f, 0xe1, 0xf6, 0x55, 0xe0, 0x84, 0xca, 0xb7, 0x75, 0xf4, 0x21, 0xdc, 0x2c, 0xc2, 0xcb,
	0x00, 0xac, 0xad, 0xef, 0x40, 0x75, 0xdb, 0x89, 0x9d, 0xf6, 0x24, 0xe6, 0x1d, 0x14, 0xf8, 0xfd,
	0xb5, 0x0f, 0x06, 0xc6, 0x1c, 0xd2, 0xa0, 0xf4, 0x79, 0xbf, 0xdb, 0x31, 0x24, 0x34, 0x0f, 0x5a,
	0x0f, 0x77, 0x07, 0xdd, 0xad, 0xc3, 0xb6, 0x21, 0xa3, 0x0a, 0x28, 0xcd, 0xfe, 0x91, 0xa1, 0xd0,
	0x87, 0xde, 0x76, 0xdb, 0x28, 0xad, 0xef, 0x40, 0xa5, 0x4f, 0x2e, 0xd2, 0x68, 0xe8, 0xb7, 0x9e,
	0x4d, 0x47, 0xc3, 0x12, 0xd4, 0x04, 0xf7, 0xa0, 0xb1, 0xdf, 0x32, 0x24, 0xf4, 0x01, 0x2c, 0x0a,
	0x56, 0xbb, 0xc5, 0x98, 0xf2, 0xfa, 0x6f, 0x61, 0x3e, 0x7d, 0xab, 0x63, 0xbb, 0xdd, 0x82, 0x1b,
	0x9d, 0xc6, 0xc0, 0xee, 0x76, 0x1a, 0xfb, 0xd3, 0x5b, 0xde, 0x80, 0xa5, 0xa2, 0x68, 0xb7, 0x41,
	0xa1, 0xae, 0xc2, 0xcd, 0x22, 0xfb, 0xc0, 0xee, 0x74, 0xb1, 0x3d, 0x38, 0x36, 0xe4, 0xf5, 0x57,
	0x50, 0x69, 0x0c, 0x49, 0x0a, 0xb3, 0xb1, 0xd3, 0xba, 0x02, 0xa6, 0xe0, 0xee, 0x0f, 0xee, 0x3f,
	0x34, 0xa4, 0x02, 0xeb, 0xfe, 0xc3, 0x07, 0xf7, 0x0c, 0xb9, 0xc0, 0x7a, 0x70, 0xef, 0xe1, 0x3d,
	0x43, 0x29, 0xb0, 0x1e, 0xde, 0x3b, 0xec, 0x19, 0xa5, 0xf5, 0x11, 0xdc, 0xbc, 0x7a, 0xf2, 0xa6,
	0xc8, 0x1b, 0x83, 0x81, 0x3d, 0x38, 0xdc, 0x6e, 0x3d, 0xef, 0x75, 0xfb, 0xf6, 0xc0, 0x3e, 0x6a,
	0x19, 0x73, 0x08, 0xc1, 0x82, 0x60, 0x63, 0x7b, 0x67, 0x77, 0xc0, 0xad, 0xa7, 0xbc, 0xfd, 0x56,
	0x7b, 0xc0, 0xad, 0xa7, 0xac, 0xad, 0x46, 0x73, 0xcf, 0x50, 0xd6, 0xef, 0x41, 0x39, 0x29, 0xce,
	0x48, 0x07, 0x75, 0xaf, 0xd1, 0xde, 0x6b, 0x18, 0x73, 0xec, 0xce, 0xba, 0xfd, 0xc1, 0x0e, 0x6e,
	0xf5, 0x0d, 0x09, 0xd5, 0x40, 0x6f, 0xdb, 0xfb, 0x2d, 0xfb, 0xa0, 0xb1, 0xd3, 0x32, 0xe4, 0x93,
	0x32, 0xfb, 0x7f, 0xe3, 0xc1, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xae, 0x61, 0xf7, 0xfd, 0xef,
	0x18, 0x00, 0x00,
}
