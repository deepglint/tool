// Code generated by protoc-gen-go.
// source: searchcommon.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SwitcherStatus int32

const (
	SwitcherStatus_Switcher_Status_Unknown SwitcherStatus = 0
	SwitcherStatus_Switcher_Status_Started SwitcherStatus = 1
	SwitcherStatus_Switcher_Status_Stopped SwitcherStatus = 2
	SwitcherStatus_Switcher_Status_Paused  SwitcherStatus = 3
)

var SwitcherStatus_name = map[int32]string{
	0: "Switcher_Status_Unknown",
	1: "Switcher_Status_Started",
	2: "Switcher_Status_Stopped",
	3: "Switcher_Status_Paused",
}
var SwitcherStatus_value = map[string]int32{
	"Switcher_Status_Unknown": 0,
	"Switcher_Status_Started": 1,
	"Switcher_Status_Stopped": 2,
	"Switcher_Status_Paused":  3,
}

func (x SwitcherStatus) String() string {
	return proto.EnumName(SwitcherStatus_name, int32(x))
}
func (SwitcherStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

type TaskStatus int32

const (
	TaskStatus_Task_Status_Unknown    TaskStatus = 0
	TaskStatus_Task_Status_Created    TaskStatus = 1
	TaskStatus_Task_Status_Processing TaskStatus = 2
	TaskStatus_Task_Status_Finished   TaskStatus = 3
	TaskStatus_Task_Status_Deleted    TaskStatus = 4
	TaskStatus_Task_Status_Outdate    TaskStatus = 5
	TaskStatus_Task_Status_Paused     TaskStatus = 6
	TaskStatus_Task_Status_Stopped    TaskStatus = 7
)

var TaskStatus_name = map[int32]string{
	0: "Task_Status_Unknown",
	1: "Task_Status_Created",
	2: "Task_Status_Processing",
	3: "Task_Status_Finished",
	4: "Task_Status_Deleted",
	5: "Task_Status_Outdate",
	6: "Task_Status_Paused",
	7: "Task_Status_Stopped",
}
var TaskStatus_value = map[string]int32{
	"Task_Status_Unknown":    0,
	"Task_Status_Created":    1,
	"Task_Status_Processing": 2,
	"Task_Status_Finished":   3,
	"Task_Status_Deleted":    4,
	"Task_Status_Outdate":    5,
	"Task_Status_Paused":     6,
	"Task_Status_Stopped":    7,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}
func (TaskStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

type GroupByDimensions int32

const (
	GroupByDimensions_UNKNOWN_DIMENSION GroupByDimensions = 0
	GroupByDimensions_ID                GroupByDimensions = 1
	GroupByDimensions_SENSOR_ID         GroupByDimensions = 2
	GroupByDimensions_SENSOR_GROUP_ID   GroupByDimensions = 3
	GroupByDimensions_COLOR_ID          GroupByDimensions = 4
	GroupByDimensions_TS_MONTH          GroupByDimensions = 5
	GroupByDimensions_TS_WEEK           GroupByDimensions = 6
	GroupByDimensions_TS_DAY            GroupByDimensions = 7
	GroupByDimensions_TS_HOUR           GroupByDimensions = 8
	GroupByDimensions_BUSINESS_ID       GroupByDimensions = 1024
	GroupByDimensions_BRAND_ID          GroupByDimensions = 1025
	GroupByDimensions_SUBBRAND_ID       GroupByDimensions = 1026
	GroupByDimensions_MODELYEAR_ID      GroupByDimensions = 1027
	GroupByDimensions_TYPE_ID           GroupByDimensions = 1028
	GroupByDimensions_PLATE_TEXT        GroupByDimensions = 1029
	GroupByDimensions_PLATE_COLOR       GroupByDimensions = 1030
	GroupByDimensions_PLATE_TYPE        GroupByDimensions = 1031
	GroupByDimensions_SIDE              GroupByDimensions = 1032
)

var GroupByDimensions_name = map[int32]string{
	0:    "UNKNOWN_DIMENSION",
	1:    "ID",
	2:    "SENSOR_ID",
	3:    "SENSOR_GROUP_ID",
	4:    "COLOR_ID",
	5:    "TS_MONTH",
	6:    "TS_WEEK",
	7:    "TS_DAY",
	8:    "TS_HOUR",
	1024: "BUSINESS_ID",
	1025: "BRAND_ID",
	1026: "SUBBRAND_ID",
	1027: "MODELYEAR_ID",
	1028: "TYPE_ID",
	1029: "PLATE_TEXT",
	1030: "PLATE_COLOR",
	1031: "PLATE_TYPE",
	1032: "SIDE",
}
var GroupByDimensions_value = map[string]int32{
	"UNKNOWN_DIMENSION": 0,
	"ID":                1,
	"SENSOR_ID":         2,
	"SENSOR_GROUP_ID":   3,
	"COLOR_ID":          4,
	"TS_MONTH":          5,
	"TS_WEEK":           6,
	"TS_DAY":            7,
	"TS_HOUR":           8,
	"BUSINESS_ID":       1024,
	"BRAND_ID":          1025,
	"SUBBRAND_ID":       1026,
	"MODELYEAR_ID":      1027,
	"TYPE_ID":           1028,
	"PLATE_TEXT":        1029,
	"PLATE_COLOR":       1030,
	"PLATE_TYPE":        1031,
	"SIDE":              1032,
}

func (x GroupByDimensions) String() string {
	return proto.EnumName(GroupByDimensions_name, int32(x))
}
func (GroupByDimensions) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

type CountDimensions int32

const (
	CountDimensions_COUNT_DIMENSION_UNKNOWN CountDimensions = 0
	CountDimensions_COUNT_DIMENSION_MONTH   CountDimensions = 1
	CountDimensions_COUNT_DIMENSION_DAY     CountDimensions = 2
	CountDimensions_COUNT_DIMENSION_HOUR    CountDimensions = 3
	CountDimensions_COUNT_DIMENSION_PLATE   CountDimensions = 4
	CountDimensions_COUNT_DIMENSION_SENSOR  CountDimensions = 5
)

var CountDimensions_name = map[int32]string{
	0: "COUNT_DIMENSION_UNKNOWN",
	1: "COUNT_DIMENSION_MONTH",
	2: "COUNT_DIMENSION_DAY",
	3: "COUNT_DIMENSION_HOUR",
	4: "COUNT_DIMENSION_PLATE",
	5: "COUNT_DIMENSION_SENSOR",
}
var CountDimensions_value = map[string]int32{
	"COUNT_DIMENSION_UNKNOWN": 0,
	"COUNT_DIMENSION_MONTH":   1,
	"COUNT_DIMENSION_DAY":     2,
	"COUNT_DIMENSION_HOUR":    3,
	"COUNT_DIMENSION_PLATE":   4,
	"COUNT_DIMENSION_SENSOR":  5,
}

func (x CountDimensions) String() string {
	return proto.EnumName(CountDimensions_name, int32(x))
}
func (CountDimensions) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

type QueryTimeRange struct {
	TimestampStart int64 `protobuf:"varint,1,opt,name=TimestampStart,json=timestampStart" json:"TimestampStart"`
	TimestampEnd   int64 `protobuf:"varint,2,opt,name=TimestampEnd,json=timestampEnd" json:"TimestampEnd"`
}

func (m *QueryTimeRange) Reset()                    { *m = QueryTimeRange{} }
func (m *QueryTimeRange) String() string            { return proto.CompactTextString(m) }
func (*QueryTimeRange) ProtoMessage()               {}
func (*QueryTimeRange) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

type QueryTimeSpacialRange struct {
	RepoId     int32             `protobuf:"varint,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorIds  []int32           `protobuf:"varint,2,rep,packed,name=SensorIds,json=sensorIds" json:"SensorIds"`
	TimeRanges []*QueryTimeRange `protobuf:"bytes,3,rep,name=TimeRanges,json=timeRanges" json:"TimeRanges"`
}

func (m *QueryTimeSpacialRange) Reset()                    { *m = QueryTimeSpacialRange{} }
func (m *QueryTimeSpacialRange) String() string            { return proto.CompactTextString(m) }
func (*QueryTimeSpacialRange) ProtoMessage()               {}
func (*QueryTimeSpacialRange) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *QueryTimeSpacialRange) GetTimeRanges() []*QueryTimeRange {
	if m != nil {
		return m.TimeRanges
	}
	return nil
}

type BaseQuery struct {
	QueryId                string                   `protobuf:"bytes,1,opt,name=QueryId,json=queryId" json:"QueryId"`
	Type                   ObjType                  `protobuf:"varint,2,opt,name=Type,json=type,enum=dg.model.ObjType" json:"Type"`
	QueryTimeSpacialRanges []*QueryTimeSpacialRange `protobuf:"bytes,3,rep,name=QueryTimeSpacialRanges,json=queryTimeSpacialRanges" json:"QueryTimeSpacialRanges"`
	Id                     []int64                  `protobuf:"varint,4,rep,packed,name=Id,json=id" json:"Id"`
	Columns                []string                 `protobuf:"bytes,8,rep,name=columns" json:"columns"`
	Offset                 int32                    `protobuf:"varint,9,opt,name=Offset,json=offset" json:"Offset"`
	Limit                  int32                    `protobuf:"varint,10,opt,name=Limit,json=limit" json:"Limit"`
	SortBy                 string                   `protobuf:"bytes,11,opt,name=SortBy,json=sortBy" json:"SortBy"`
	SortOrderAsc           bool                     `protobuf:"varint,12,opt,name=SortOrderAsc,json=sortOrderAsc" json:"SortOrderAsc"`
	GroupByDimensions      GroupByDimensions        `protobuf:"varint,64,opt,name=GroupByDimensions,json=groupByDimensions,enum=dg.model.GroupByDimensions" json:"GroupByDimensions"`
	OutputFmt              DataFmtType              `protobuf:"varint,13,opt,name=OutputFmt,json=outputFmt,enum=dg.model.DataFmtType" json:"OutputFmt"`
	Img                    *Image                   `protobuf:"bytes,16,opt,name=Img,json=img" json:"Img"`
	Cutboard               *Cutboard                `protobuf:"bytes,17,opt,name=Cutboard,json=cutboard" json:"Cutboard"`
	Feature                []byte                   `protobuf:"bytes,18,opt,name=Feature,json=feature,proto3" json:"Feature"`
}

func (m *BaseQuery) Reset()                    { *m = BaseQuery{} }
func (m *BaseQuery) String() string            { return proto.CompactTextString(m) }
func (*BaseQuery) ProtoMessage()               {}
func (*BaseQuery) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *BaseQuery) GetQueryTimeSpacialRanges() []*QueryTimeSpacialRange {
	if m != nil {
		return m.QueryTimeSpacialRanges
	}
	return nil
}

func (m *BaseQuery) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *BaseQuery) GetCutboard() *Cutboard {
	if m != nil {
		return m.Cutboard
	}
	return nil
}

type DimensionalCountRequest struct {
	QueryTimeSpacialRange *QueryTimeSpacialRange `protobuf:"bytes,1,opt,name=QueryTimeSpacialRange,json=queryTimeSpacialRange" json:"QueryTimeSpacialRange"`
	CountDimension        CountDimensions        `protobuf:"varint,2,opt,name=CountDimension,json=countDimension,enum=dg.model.CountDimensions" json:"CountDimension"`
}

func (m *DimensionalCountRequest) Reset()                    { *m = DimensionalCountRequest{} }
func (m *DimensionalCountRequest) String() string            { return proto.CompactTextString(m) }
func (*DimensionalCountRequest) ProtoMessage()               {}
func (*DimensionalCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *DimensionalCountRequest) GetQueryTimeSpacialRange() *QueryTimeSpacialRange {
	if m != nil {
		return m.QueryTimeSpacialRange
	}
	return nil
}

type DimensionalCountResponse struct {
	DimensionalCounts map[string]int32 `protobuf:"bytes,1,rep,name=DimensionalCounts,json=dimensionalCounts" json:"DimensionalCounts" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *DimensionalCountResponse) Reset()                    { *m = DimensionalCountResponse{} }
func (m *DimensionalCountResponse) String() string            { return proto.CompactTextString(m) }
func (*DimensionalCountResponse) ProtoMessage()               {}
func (*DimensionalCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *DimensionalCountResponse) GetDimensionalCounts() map[string]int32 {
	if m != nil {
		return m.DimensionalCounts
	}
	return nil
}

// VehicleCount
type ObjCount struct {
	Count int32 `protobuf:"varint,1,opt,name=Count,json=count" json:"Count"`
}

func (m *ObjCount) Reset()                    { *m = ObjCount{} }
func (m *ObjCount) String() string            { return proto.CompactTextString(m) }
func (*ObjCount) ProtoMessage()               {}
func (*ObjCount) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

func init() {
	proto.RegisterType((*QueryTimeRange)(nil), "dg.model.QueryTimeRange")
	proto.RegisterType((*QueryTimeSpacialRange)(nil), "dg.model.QueryTimeSpacialRange")
	proto.RegisterType((*BaseQuery)(nil), "dg.model.BaseQuery")
	proto.RegisterType((*DimensionalCountRequest)(nil), "dg.model.DimensionalCountRequest")
	proto.RegisterType((*DimensionalCountResponse)(nil), "dg.model.DimensionalCountResponse")
	proto.RegisterType((*ObjCount)(nil), "dg.model.ObjCount")
	proto.RegisterEnum("dg.model.SwitcherStatus", SwitcherStatus_name, SwitcherStatus_value)
	proto.RegisterEnum("dg.model.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterEnum("dg.model.GroupByDimensions", GroupByDimensions_name, GroupByDimensions_value)
	proto.RegisterEnum("dg.model.CountDimensions", CountDimensions_name, CountDimensions_value)
}

func init() { proto.RegisterFile("searchcommon.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0xfe, 0x75, 0xa7, 0x8e, 0x15, 0x99, 0x9a, 0xc4, 0x36, 0xe3, 0xfc, 0x40, 0x53, 0x01, 0x2d,
	0x0a, 0x2f, 0xbc, 0x70, 0x36, 0x69, 0x57, 0x95, 0x2c, 0x3a, 0x11, 0x62, 0x8b, 0xee, 0x50, 0x82,
	0x6b, 0xa0, 0x80, 0x40, 0x8b, 0x63, 0x99, 0xb5, 0x78, 0x09, 0x67, 0xd8, 0x40, 0xbb, 0xb6, 0x69,
	0x9b, 0x3e, 0x49, 0x37, 0x5d, 0xf6, 0x29, 0xfa, 0x04, 0x7d, 0x9d, 0x9e, 0x19, 0x52, 0x37, 0x5a,
	0x01, 0xba, 0x11, 0x78, 0xbe, 0xef, 0x9b, 0x73, 0x9b, 0x73, 0x46, 0x40, 0x38, 0x73, 0xe2, 0xc9,
	0xdd, 0x24, 0xf4, 0xfd, 0x30, 0x38, 0x8e, 0xe2, 0x50, 0x84, 0x44, 0x73, 0xa7, 0xc7, 0x7e, 0xe8,
	0xb2, 0xd9, 0x61, 0x63, 0x1d, 0x6f, 0x7f, 0x07, 0xcd, 0x6f, 0x12, 0x16, 0xcf, 0x87, 0x9e, 0xcf,
	0xa8, 0x13, 0x4c, 0x19, 0xf9, 0x1c, 0x9a, 0xd2, 0xe0, 0xc2, 0xf1, 0x23, 0x5b, 0x38, 0xb1, 0x30,
	0x0a, 0xcf, 0x0b, 0x5f, 0x94, 0x68, 0x53, 0x6c, 0xa0, 0xa4, 0x0d, 0x8d, 0xa5, 0xce, 0x0c, 0x5c,
	0xa3, 0xa8, 0x54, 0x0d, 0xb1, 0x86, 0xb5, 0x3f, 0x14, 0x60, 0x6f, 0xe9, 0xde, 0x8e, 0x9c, 0x89,
	0xe7, 0xcc, 0xd2, 0x28, 0xfb, 0x50, 0xa5, 0x2c, 0x0a, 0xfb, 0xae, 0xf2, 0x5e, 0xa1, 0xd5, 0x58,
	0x59, 0xe4, 0xff, 0x50, 0xb7, 0x59, 0xc0, 0xc3, 0xb8, 0xef, 0x72, 0x74, 0x59, 0x42, 0xaa, 0xce,
	0x17, 0x00, 0x79, 0x09, 0xb0, 0x4c, 0x94, 0x1b, 0x25, 0xa4, 0x77, 0x4e, 0x8c, 0xe3, 0x45, 0x69,
	0xc7, 0x9b, 0x95, 0x50, 0x10, 0x4b, 0x6d, 0xfb, 0x8f, 0x32, 0xd4, 0xbb, 0x0e, 0x67, 0x4a, 0x42,
	0x0c, 0xa8, 0xa9, 0x8f, 0x2c, 0x7c, 0x9d, 0xd6, 0xde, 0xa6, 0x26, 0xf9, 0x0c, 0xca, 0xc3, 0x79,
	0xc4, 0x54, 0x35, 0xcd, 0x93, 0xd6, 0xca, 0xb7, 0x75, 0xf3, 0xbd, 0x24, 0x68, 0x59, 0xe0, 0x2f,
	0xb9, 0x82, 0xfd, 0xad, 0x75, 0x2d, 0x92, 0xfa, 0x64, 0x4b, 0x52, 0xeb, 0x3a, 0xba, 0xff, 0x76,
	0xeb, 0x71, 0xd2, 0x84, 0x22, 0x26, 0x55, 0x46, 0x27, 0x25, 0x5a, 0xf4, 0x5c, 0x99, 0xe9, 0x24,
	0x9c, 0x25, 0x7e, 0xc0, 0x0d, 0x0d, 0x41, 0xcc, 0x34, 0x33, 0x65, 0x07, 0xad, 0xdb, 0x5b, 0xce,
	0x84, 0x51, 0x4f, 0x3b, 0x18, 0x2a, 0x8b, 0x3c, 0x81, 0xca, 0xb9, 0xe7, 0x7b, 0xc2, 0x00, 0x05,
	0x57, 0x66, 0xd2, 0x90, 0x6a, 0x3b, 0x8c, 0x45, 0x77, 0x6e, 0xec, 0xa8, 0x82, 0xab, 0x5c, 0x59,
	0xf2, 0x16, 0x25, 0x6e, 0xc5, 0x2e, 0x8b, 0x3b, 0x7c, 0x62, 0x34, 0x90, 0xd5, 0x68, 0x83, 0xaf,
	0x61, 0xa4, 0x0f, 0xad, 0x57, 0x71, 0x98, 0x44, 0xdd, 0x79, 0x0f, 0xf3, 0x0d, 0xb8, 0x17, 0x62,
	0x36, 0x5f, 0xab, 0x06, 0x3d, 0x5b, 0xd5, 0xf9, 0x40, 0x42, 0x5b, 0xd3, 0x3c, 0x44, 0x5e, 0x40,
	0xdd, 0x4a, 0x44, 0x94, 0x88, 0x33, 0x5f, 0x18, 0x8f, 0x94, 0x8b, 0xbd, 0x95, 0x8b, 0x9e, 0x23,
	0x1c, 0x24, 0x54, 0x9f, 0xeb, 0xe1, 0x42, 0x47, 0x3e, 0x85, 0x52, 0xdf, 0x9f, 0x1a, 0x3a, 0xca,
	0x77, 0x4e, 0x76, 0x57, 0xf2, 0xbe, 0xef, 0x60, 0x27, 0x4b, 0x9e, 0x3f, 0x25, 0xc7, 0xa0, 0x9d,
	0x26, 0xe2, 0x26, 0x74, 0x62, 0xd7, 0x68, 0x29, 0x1d, 0x59, 0xe9, 0x16, 0x0c, 0xd5, 0x26, 0xd9,
	0x97, 0x6c, 0xeb, 0x19, 0x73, 0x44, 0x12, 0x33, 0x83, 0xa0, 0xbc, 0x41, 0x6b, 0xb7, 0xa9, 0xd9,
	0xfe, 0xab, 0x00, 0x07, 0xcb, 0x84, 0x9d, 0xd9, 0x69, 0x98, 0x04, 0x82, 0x32, 0xbc, 0x2d, 0x2e,
	0xc8, 0xe8, 0x23, 0xd3, 0xac, 0x86, 0xe8, 0x3f, 0x5c, 0xfa, 0xde, 0xd6, 0x4b, 0x27, 0x1d, 0x68,
	0xaa, 0x30, 0xcb, 0xb0, 0xd9, 0xf4, 0x3d, 0x5d, 0x2b, 0x61, 0x83, 0xe7, 0xb4, 0x39, 0xd9, 0x00,
	0xda, 0x7f, 0x17, 0xc0, 0x78, 0x98, 0x35, 0x8f, 0x50, 0xcb, 0xc8, 0x14, 0x5a, 0x79, 0x8e, 0x63,
	0xca, 0x72, 0x4e, 0xbf, 0x5c, 0x6b, 0xfe, 0x47, 0x8e, 0x3f, 0x20, 0xb8, 0x19, 0x88, 0x78, 0x4e,
	0x5b, 0x6e, 0x1e, 0x3f, 0xec, 0xc1, 0xfe, 0x76, 0x31, 0xd1, 0xa1, 0x74, 0xcf, 0xe6, 0xd9, 0xb2,
	0xc9, 0x4f, 0x39, 0xa6, 0x3f, 0x38, 0xb3, 0x24, 0xdd, 0x34, 0x1c, 0x53, 0x65, 0x7c, 0x55, 0x7c,
	0x59, 0x68, 0x3f, 0x07, 0x0d, 0x97, 0x4d, 0x9d, 0x96, 0x2a, 0xf5, 0x91, 0xbd, 0x12, 0x15, 0x55,
	0xf6, 0xd1, 0xfb, 0x02, 0x34, 0xed, 0x77, 0x9e, 0x98, 0xdc, 0xb1, 0x18, 0x1f, 0x23, 0x91, 0x70,
	0xf2, 0x0c, 0x0e, 0x16, 0xc8, 0x38, 0x85, 0xc6, 0xa3, 0xe0, 0x3e, 0x08, 0xdf, 0x05, 0xfa, 0xff,
	0xb6, 0x91, 0xea, 0x0d, 0x63, 0xae, 0x5e, 0xd8, 0x4e, 0x86, 0x51, 0x84, 0x64, 0x91, 0x1c, 0xc2,
	0x7e, 0x9e, 0xbc, 0x74, 0x12, 0x8e, 0x5c, 0xe9, 0xe8, 0x9f, 0x02, 0xbe, 0x46, 0x0e, 0xbf, 0xcf,
	0x32, 0x38, 0x80, 0xc7, 0xd2, 0x7a, 0x18, 0x3d, 0x47, 0x9c, 0xc6, 0x38, 0x69, 0x2a, 0x32, 0x3a,
	0x5f, 0x27, 0x2e, 0xe3, 0x70, 0xc2, 0x38, 0xf7, 0x82, 0x29, 0x06, 0x36, 0xe0, 0xc9, 0x3a, 0x77,
	0xe6, 0x05, 0x1e, 0xbf, 0x93, 0x61, 0xf3, 0xee, 0x7a, 0x6c, 0xc6, 0xa4, 0xbb, 0x72, 0x9e, 0xc0,
	0x3d, 0x73, 0x31, 0x90, 0x5e, 0xc1, 0xdd, 0x27, 0x1b, 0x71, 0xd2, 0x02, 0xaa, 0xf9, 0x03, 0x8b,
	0xaa, 0x6b, 0x47, 0x7f, 0x16, 0xb7, 0x6c, 0x3c, 0xd9, 0x83, 0xd6, 0x68, 0xf0, 0x66, 0x60, 0x5d,
	0x0d, 0xc6, 0xbd, 0xfe, 0x85, 0x39, 0xb0, 0xfb, 0xd6, 0x00, 0xcb, 0xab, 0xe2, 0x8b, 0xd5, 0xc3,
	0x6a, 0x1e, 0xe1, 0xcb, 0x8d, 0xa0, 0x45, 0xc7, 0x68, 0x16, 0xc9, 0x63, 0xd8, 0xcd, 0xcc, 0x57,
	0xd4, 0x1a, 0x5d, 0x4a, 0xb0, 0x44, 0x1a, 0xb8, 0xa6, 0xd6, 0x79, 0x2a, 0x29, 0x4b, 0x6b, 0x68,
	0x8f, 0x2f, 0xac, 0xc1, 0xf0, 0x35, 0x66, 0xb9, 0x03, 0x35, 0xb4, 0xae, 0x4c, 0xf3, 0x0d, 0xa6,
	0x06, 0x50, 0x45, 0xa3, 0xd7, 0xb9, 0xd6, 0x6b, 0x19, 0xf1, 0xda, 0x1a, 0x51, 0x5d, 0xc3, 0x41,
	0xda, 0xe9, 0x8e, 0xec, 0xfe, 0xc0, 0xb4, 0x6d, 0xe9, 0xe4, 0x47, 0x0d, 0xe3, 0x6a, 0x5d, 0xda,
	0x19, 0xf4, 0xa4, 0xf9, 0x93, 0x12, 0xd8, 0xa3, 0xee, 0x12, 0xf9, 0x59, 0x23, 0x2d, 0x68, 0x5c,
	0x58, 0x3d, 0xf3, 0xfc, 0xda, 0xec, 0xa8, 0xc0, 0xef, 0x35, 0x8c, 0x5c, 0x1b, 0x5e, 0x5f, 0x9a,
	0xd2, 0xfa, 0x45, 0x23, 0xbb, 0x00, 0x97, 0xe7, 0x9d, 0xa1, 0x39, 0x1e, 0x9a, 0xdf, 0x0e, 0xf5,
	0x5f, 0x95, 0x8f, 0x14, 0x50, 0xc9, 0xea, 0xbf, 0xad, 0x4b, 0xf0, 0x98, 0xfe, 0x41, 0x23, 0x75,
	0x28, 0xdb, 0xfd, 0x9e, 0xa9, 0xff, 0xae, 0x1d, 0xe1, 0x8b, 0xb1, 0x9b, 0xdb, 0x4f, 0x39, 0x54,
	0xa7, 0xd6, 0x68, 0x30, 0x5c, 0x75, 0x6a, 0x9c, 0xf5, 0x0e, 0x3b, 0xf6, 0x14, 0xf6, 0xf2, 0x64,
	0xda, 0x84, 0x82, 0xbc, 0x92, 0x3c, 0x25, 0x9b, 0xa0, 0xe6, 0x21, 0x4f, 0xa8, 0x8e, 0x94, 0xb6,
	0x79, 0x53, 0xa9, 0x62, 0x83, 0x71, 0xc0, 0xf2, 0x54, 0x7a, 0x27, 0x7a, 0xe5, 0xa6, 0xaa, 0xfe,
	0xff, 0x5f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x76, 0xf0, 0x82, 0xbc, 0x2d, 0x08, 0x00, 0x00,
}
