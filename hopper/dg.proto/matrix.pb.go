// Code generated by protoc-gen-go.
// source: matrix.proto
// DO NOT EDIT!

package dg_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DetectionType int32

const (
	DetectionType_DetectionType_Unknown DetectionType = 0
	DetectionType_DetectionType_Face    DetectionType = 1
	DetectionType_DetectionType_Body    DetectionType = 2
	DetectionType_DetectionType_Vehicle DetectionType = 3
)

var DetectionType_name = map[int32]string{
	0: "DetectionType_Unknown",
	1: "DetectionType_Face",
	2: "DetectionType_Body",
	3: "DetectionType_Vehicle",
}
var DetectionType_value = map[string]int32{
	"DetectionType_Unknown": 0,
	"DetectionType_Face":    1,
	"DetectionType_Body":    2,
	"DetectionType_Vehicle": 3,
}

func (x DetectionType) String() string {
	return proto.EnumName(DetectionType_name, int32(x))
}
func (DetectionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ValueType int32

const (
	ValueType_ValueType_Unknown ValueType = 0
	ValueType_ValueType_String  ValueType = 1
	ValueType_ValueType_Int     ValueType = 2
	ValueType_ValueType_Float   ValueType = 3
	ValueType_ValueType_Bool    ValueType = 4
)

var ValueType_name = map[int32]string{
	0: "ValueType_Unknown",
	1: "ValueType_String",
	2: "ValueType_Int",
	3: "ValueType_Float",
	4: "ValueType_Bool",
}
var ValueType_value = map[string]int32{
	"ValueType_Unknown": 0,
	"ValueType_String":  1,
	"ValueType_Int":     2,
	"ValueType_Float":   3,
	"ValueType_Bool":    4,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Meta struct {
	Timestamp        int64                 `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	SensorId         string                `protobuf:"bytes,2,opt,name=SensorId,json=sensorId" json:"SensorId,omitempty"`
	CustomerSensorId string                `protobuf:"bytes,3,opt,name=CustomerSensorId,json=customerSensorId" json:"CustomerSensorId,omitempty"`
	Attributes       map[string]*Attribute `protobuf:"bytes,4,rep,name=Attributes,json=attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Meta) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Meta) GetSensorId() string {
	if m != nil {
		return m.SensorId
	}
	return ""
}

func (m *Meta) GetCustomerSensorId() string {
	if m != nil {
		return m.CustomerSensorId
	}
	return ""
}

func (m *Meta) GetAttributes() map[string]*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Image struct {
	Id         string                `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	URL        string                `protobuf:"bytes,2,opt,name=URL,json=uRL" json:"URL,omitempty"`
	BinData    string                `protobuf:"bytes,3,opt,name=BinData,json=binData" json:"BinData,omitempty"`
	Width      int32                 `protobuf:"varint,4,opt,name=Width,json=width" json:"Width,omitempty"`
	Height     int32                 `protobuf:"varint,5,opt,name=Height,json=height" json:"Height,omitempty"`
	Attributes map[string]*Attribute `protobuf:"bytes,6,rep,name=Attributes,json=attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Image) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Image) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Image) GetBinData() string {
	if m != nil {
		return m.BinData
	}
	return ""
}

func (m *Image) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Image) GetAttributes() map[string]*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Object struct {
	Id             string                `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Level          int32                 `protobuf:"varint,2,opt,name=Level,json=level" json:"Level,omitempty"`
	ParentId       string                `protobuf:"bytes,3,opt,name=ParentId,json=parentId" json:"ParentId,omitempty"`
	ReId           string                `protobuf:"bytes,4,opt,name=ReId,json=reId" json:"ReId,omitempty"`
	ReDuration     string                `protobuf:"bytes,5,opt,name=ReDuration,json=reDuration" json:"ReDuration,omitempty"`
	Type           string                `protobuf:"bytes,6,opt,name=Type,json=type" json:"Type,omitempty"`
	Confidence     float32               `protobuf:"fixed32,7,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	Feature        string                `protobuf:"bytes,8,opt,name=Feature,json=feature" json:"Feature,omitempty"`
	QualityOK      bool                  `protobuf:"varint,9,opt,name=QualityOK,json=qualityOK" json:"QualityOK,omitempty"`
	URL            string                `protobuf:"bytes,16,opt,name=URL,json=uRL" json:"URL,omitempty"`
	BinData        string                `protobuf:"bytes,17,opt,name=BinData,json=binData" json:"BinData,omitempty"`
	X              int32                 `protobuf:"varint,18,opt,name=X,json=x" json:"X,omitempty"`
	Y              int32                 `protobuf:"varint,19,opt,name=Y,json=y" json:"Y,omitempty"`
	RelativeWidth  int32                 `protobuf:"varint,20,opt,name=RelativeWidth,json=relativeWidth" json:"RelativeWidth,omitempty"`
	RelativeHeight int32                 `protobuf:"varint,21,opt,name=RelativeHeight,json=relativeHeight" json:"RelativeHeight,omitempty"`
	AbsoluteWidth  int32                 `protobuf:"varint,22,opt,name=AbsoluteWidth,json=absoluteWidth" json:"AbsoluteWidth,omitempty"`
	AbsoluteHeight int32                 `protobuf:"varint,23,opt,name=AbsoluteHeight,json=absoluteHeight" json:"AbsoluteHeight,omitempty"`
	Attributes     map[string]*Attribute `protobuf:"bytes,32,rep,name=Attributes,json=attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Object) Reset()                    { *m = Object{} }
func (m *Object) String() string            { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()               {}
func (*Object) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Object) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Object) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Object) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Object) GetReId() string {
	if m != nil {
		return m.ReId
	}
	return ""
}

func (m *Object) GetReDuration() string {
	if m != nil {
		return m.ReDuration
	}
	return ""
}

func (m *Object) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Object) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *Object) GetFeature() string {
	if m != nil {
		return m.Feature
	}
	return ""
}

func (m *Object) GetQualityOK() bool {
	if m != nil {
		return m.QualityOK
	}
	return false
}

func (m *Object) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *Object) GetBinData() string {
	if m != nil {
		return m.BinData
	}
	return ""
}

func (m *Object) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Object) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Object) GetRelativeWidth() int32 {
	if m != nil {
		return m.RelativeWidth
	}
	return 0
}

func (m *Object) GetRelativeHeight() int32 {
	if m != nil {
		return m.RelativeHeight
	}
	return 0
}

func (m *Object) GetAbsoluteWidth() int32 {
	if m != nil {
		return m.AbsoluteWidth
	}
	return 0
}

func (m *Object) GetAbsoluteHeight() int32 {
	if m != nil {
		return m.AbsoluteHeight
	}
	return 0
}

func (m *Object) GetAttributes() map[string]*Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Attribute struct {
	Id          int32                 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Name        string                `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	ValueType   ValueType             `protobuf:"varint,3,opt,name=ValueType,json=valueType,enum=dg.proto.ValueType" json:"ValueType,omitempty"`
	Value       string                `protobuf:"bytes,4,opt,name=Value,json=value" json:"Value,omitempty"`
	Confidence  float32               `protobuf:"fixed32,5,opt,name=Confidence,json=confidence" json:"Confidence,omitempty"`
	MoreDetails map[string]*Attribute `protobuf:"bytes,6,rep,name=MoreDetails,json=moreDetails" json:"MoreDetails,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ValueId     int32                 `protobuf:"varint,7,opt,name=ValueId,json=valueId" json:"ValueId,omitempty"`
}

func (m *Attribute) Reset()                    { *m = Attribute{} }
func (m *Attribute) String() string            { return proto.CompactTextString(m) }
func (*Attribute) ProtoMessage()               {}
func (*Attribute) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Attribute) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attribute) GetValueType() ValueType {
	if m != nil {
		return m.ValueType
	}
	return ValueType_ValueType_Unknown
}

func (m *Attribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Attribute) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *Attribute) GetMoreDetails() map[string]*Attribute {
	if m != nil {
		return m.MoreDetails
	}
	return nil
}

func (m *Attribute) GetValueId() int32 {
	if m != nil {
		return m.ValueId
	}
	return 0
}

type RecResult struct {
	Id             string    `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Meta           *Meta     `protobuf:"bytes,2,opt,name=Meta,json=meta" json:"Meta,omitempty"`
	Image          *Image    `protobuf:"bytes,3,opt,name=Image,json=image" json:"Image,omitempty"`
	ThumbnailImage *Image    `protobuf:"bytes,4,opt,name=ThumbnailImage,json=thumbnailImage" json:"ThumbnailImage,omitempty"`
	Objects        []*Object `protobuf:"bytes,5,rep,name=Objects,json=objects" json:"Objects,omitempty"`
}

func (m *RecResult) Reset()                    { *m = RecResult{} }
func (m *RecResult) String() string            { return proto.CompactTextString(m) }
func (*RecResult) ProtoMessage()               {}
func (*RecResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *RecResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RecResult) GetMeta() *Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RecResult) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *RecResult) GetThumbnailImage() *Image {
	if m != nil {
		return m.ThumbnailImage
	}
	return nil
}

func (m *RecResult) GetObjects() []*Object {
	if m != nil {
		return m.Objects
	}
	return nil
}

func init() {
	proto.RegisterType((*Meta)(nil), "dg.proto.Meta")
	proto.RegisterType((*Image)(nil), "dg.proto.Image")
	proto.RegisterType((*Object)(nil), "dg.proto.Object")
	proto.RegisterType((*Attribute)(nil), "dg.proto.Attribute")
	proto.RegisterType((*RecResult)(nil), "dg.proto.RecResult")
	proto.RegisterEnum("dg.proto.DetectionType", DetectionType_name, DetectionType_value)
	proto.RegisterEnum("dg.proto.ValueType", ValueType_name, ValueType_value)
}

func init() { proto.RegisterFile("matrix.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x54, 0x4d, 0x93, 0xdb, 0x44,
	0x10, 0x45, 0xb2, 0x64, 0x5b, 0xed, 0xac, 0x56, 0x3b, 0xfb, 0x81, 0xd8, 0xa2, 0x82, 0x6a, 0x2b,
	0x50, 0x66, 0x0f, 0xae, 0x62, 0x39, 0x40, 0x71, 0x00, 0xb2, 0x59, 0xb6, 0x70, 0xb1, 0x21, 0x30,
	0xbb, 0x09, 0x70, 0xa2, 0xc6, 0x52, 0xc7, 0x1e, 0xa2, 0x0f, 0x23, 0x8d, 0x9c, 0xf8, 0xc6, 0x89,
	0x3f, 0xc7, 0x81, 0x3f, 0xc1, 0x0f, 0xa1, 0x66, 0x46, 0x1f, 0x96, 0xbd, 0xb7, 0x54, 0xe5, 0xa6,
	0x7e, 0xf3, 0xfa, 0x4d, 0x4f, 0xf7, 0x53, 0xc3, 0x83, 0x84, 0x89, 0x9c, 0xbf, 0x99, 0x2c, 0xf3,
	0x4c, 0x64, 0x64, 0x18, 0xcd, 0xf5, 0xd7, 0xd9, 0x5f, 0x26, 0x58, 0x4f, 0x51, 0x30, 0xf2, 0x21,
	0x38, 0x77, 0x3c, 0xc1, 0x42, 0xb0, 0x64, 0xe9, 0x1b, 0x81, 0x31, 0xee, 0x51, 0x47, 0xd4, 0x00,
	0x39, 0x85, 0xe1, 0x2d, 0xa6, 0x45, 0x96, 0x4f, 0x23, 0xdf, 0x0c, 0x8c, 0xb1, 0x43, 0x87, 0x45,
	0x15, 0x93, 0x73, 0xf0, 0x9e, 0x94, 0x85, 0xc8, 0x12, 0xcc, 0x1b, 0x4e, 0x4f, 0x71, 0xbc, 0x70,
	0x0b, 0x27, 0x5f, 0x03, 0x3c, 0x16, 0x22, 0xe7, 0xb3, 0x52, 0x60, 0xe1, 0x5b, 0x41, 0x6f, 0x3c,
	0xba, 0x78, 0x38, 0xa9, 0xab, 0x99, 0xc8, 0x4a, 0x26, 0x2d, 0xe1, 0xbb, 0x54, 0xe4, 0x6b, 0x0a,
	0xac, 0x01, 0x4e, 0x29, 0xec, 0x6f, 0x1d, 0x13, 0x0f, 0x7a, 0xaf, 0x70, 0xad, 0x4a, 0x76, 0xa8,
	0xfc, 0x24, 0x9f, 0x82, 0xbd, 0x62, 0x71, 0x89, 0xaa, 0xd2, 0xd1, 0xc5, 0x61, 0xab, 0xdf, 0xe4,
	0x52, 0xcd, 0xf8, 0xca, 0xfc, 0xd2, 0x38, 0xfb, 0xdb, 0x04, 0x7b, 0x9a, 0xb0, 0x39, 0x12, 0x17,
	0xcc, 0x69, 0x54, 0x29, 0x99, 0x3c, 0x92, 0xd2, 0xcf, 0xe9, 0x4d, 0xf5, 0xe0, 0x5e, 0x49, 0x6f,
	0x88, 0x0f, 0x83, 0x4b, 0x9e, 0x5e, 0x31, 0xc1, 0xaa, 0x27, 0x0e, 0x66, 0x3a, 0x24, 0x47, 0x60,
	0xff, 0xc2, 0x23, 0xb1, 0xf0, 0xad, 0xc0, 0x18, 0xdb, 0xd4, 0x7e, 0x2d, 0x03, 0x72, 0x02, 0xfd,
	0xef, 0x91, 0xcf, 0x17, 0xc2, 0xb7, 0x15, 0xdc, 0x5f, 0xa8, 0x88, 0x7c, 0xd3, 0xe9, 0x43, 0x5f,
	0xf5, 0xe1, 0xa3, 0xb6, 0x4e, 0x55, 0xce, 0x3b, 0x6f, 0xc4, 0x7f, 0x16, 0xf4, 0x9f, 0xcd, 0xfe,
	0xc0, 0x50, 0xec, 0x74, 0xe2, 0x08, 0xec, 0x1b, 0x5c, 0x61, 0xac, 0x94, 0x6c, 0x6a, 0xc7, 0x32,
	0x90, 0xae, 0xf8, 0x89, 0xe5, 0x98, 0x8a, 0x66, 0xe2, 0xc3, 0x65, 0x15, 0x13, 0x02, 0x16, 0xc5,
	0x69, 0xa4, 0xda, 0xe1, 0x50, 0x2b, 0xc7, 0x69, 0x44, 0x1e, 0x02, 0x50, 0xbc, 0x2a, 0x73, 0x26,
	0x78, 0x96, 0xaa, 0x8e, 0x38, 0x14, 0xf2, 0x06, 0x91, 0x39, 0x77, 0xeb, 0x25, 0xfa, 0x7d, 0x9d,
	0x23, 0xd6, 0x4b, 0x94, 0x39, 0x4f, 0xb2, 0xf4, 0x25, 0x8f, 0x30, 0x0d, 0xd1, 0x1f, 0x04, 0xc6,
	0xd8, 0xa4, 0x10, 0x36, 0x88, 0x9c, 0xc8, 0x35, 0x32, 0x51, 0xe6, 0xe8, 0x0f, 0xf5, 0x44, 0x5e,
	0xea, 0x50, 0x3a, 0xfa, 0xe7, 0x92, 0xc5, 0x5c, 0xac, 0x9f, 0xfd, 0xe0, 0x3b, 0x81, 0x31, 0x1e,
	0x52, 0xe7, 0xcf, 0x1a, 0xa8, 0x67, 0xeb, 0xdd, 0x3b, 0xdb, 0x83, 0xee, 0x6c, 0x1f, 0x80, 0xf1,
	0xab, 0x4f, 0xd4, 0xcb, 0x8d, 0x37, 0x32, 0xfa, 0xcd, 0x3f, 0xd4, 0xd1, 0x9a, 0x3c, 0x82, 0x3d,
	0x8a, 0x31, 0x13, 0x7c, 0x85, 0x7a, 0xfe, 0x47, 0xea, 0x64, 0x2f, 0xdf, 0x04, 0xc9, 0x27, 0xe0,
	0xd6, 0xac, 0xca, 0x0f, 0xc7, 0x8a, 0xe6, 0xe6, 0x1d, 0x54, 0xaa, 0x3d, 0x9e, 0x15, 0x59, 0x5c,
	0x8a, 0x4a, 0xed, 0x44, 0xab, 0xb1, 0x4d, 0x50, 0xaa, 0xd5, 0xac, 0x4a, 0xed, 0x7d, 0xad, 0xc6,
	0x3a, 0x28, 0xf9, 0xb6, 0xe3, 0xb2, 0x40, 0xb9, 0x2c, 0x68, 0x4d, 0xa0, 0x67, 0xfd, 0xce, 0x6d,
	0xf6, 0xaf, 0x09, 0x4e, 0x73, 0xb0, 0xe1, 0x34, 0x5b, 0x39, 0x8d, 0x80, 0xf5, 0x23, 0x4b, 0xb0,
	0xfa, 0xe9, 0xac, 0x94, 0x25, 0x48, 0x3e, 0x03, 0xe7, 0x85, 0x4c, 0x57, 0xe6, 0x90, 0x46, 0x73,
	0x37, 0x2f, 0x69, 0x8e, 0xa8, 0xb3, 0xaa, 0x3f, 0xa5, 0x61, 0x15, 0x5e, 0xf9, 0x4f, 0x5f, 0xbf,
	0x65, 0x26, 0x7b, 0xc7, 0x4c, 0xd7, 0x30, 0x7a, 0x9a, 0xe5, 0x78, 0x85, 0x82, 0xf1, 0xb8, 0xfe,
	0x2f, 0x1f, 0xdd, 0xf3, 0x9e, 0xc9, 0x06, 0x4d, 0x77, 0x6d, 0x94, 0xb4, 0x88, 0xb4, 0x92, 0xba,
	0x7d, 0x1a, 0x29, 0xc7, 0xda, 0x74, 0xb0, 0xd2, 0xe1, 0xe9, 0x2d, 0x78, 0xdb, 0xa9, 0x6f, 0xdf,
	0xd1, 0x7f, 0x0c, 0x70, 0x28, 0x86, 0x14, 0x8b, 0x32, 0xde, 0xfd, 0x77, 0xcf, 0xf4, 0x86, 0xaf,
	0xb4, 0xdc, 0xee, 0xb6, 0xa5, 0x56, 0x22, 0xb7, 0xff, 0xc7, 0xd5, 0x0a, 0x54, 0xdd, 0x1d, 0x5d,
	0xec, 0x6f, 0xad, 0x22, 0x6a, 0x73, 0xb5, 0x20, 0xbf, 0x00, 0xf7, 0x6e, 0x51, 0x26, 0xb3, 0x94,
	0xf1, 0x58, 0xf3, 0xad, 0xfb, 0xf9, 0xae, 0xe8, 0xd0, 0xc8, 0x39, 0x0c, 0xb4, 0xdb, 0x0a, 0xdf,
	0x56, 0x4d, 0xf5, 0xb6, 0x6d, 0x48, 0x07, 0x99, 0x26, 0x9c, 0x97, 0xb0, 0x77, 0x85, 0x02, 0x43,
	0xb9, 0x12, 0xd4, 0x2c, 0x3f, 0x80, 0xe3, 0x0e, 0xf0, 0xfb, 0xf3, 0xf4, 0x55, 0x9a, 0xbd, 0x4e,
	0xbd, 0xf7, 0xc8, 0x09, 0x90, 0xee, 0xd1, 0x35, 0x0b, 0xd1, 0x33, 0x76, 0xf1, 0xcb, 0x2c, 0x5a,
	0x7b, 0xe6, 0xae, 0xd4, 0x0b, 0x5c, 0xf0, 0x30, 0x46, 0xaf, 0x77, 0x2e, 0x36, 0x4c, 0x46, 0x8e,
	0xe1, 0xa0, 0x09, 0x36, 0xae, 0x3b, 0x02, 0xaf, 0x85, 0x6f, 0x45, 0xce, 0xd3, 0xb9, 0x67, 0x90,
	0x03, 0xd8, 0x6b, 0xd1, 0x69, 0x2a, 0x3c, 0x93, 0x1c, 0xc2, 0x7e, 0x0b, 0x5d, 0xc7, 0x19, 0x13,
	0x5e, 0x8f, 0x10, 0x70, 0x5b, 0xf0, 0x32, 0xcb, 0x62, 0xcf, 0x9a, 0xf5, 0x55, 0x0f, 0x3e, 0xff,
	0x3f, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x62, 0x36, 0x31, 0xa0, 0x07, 0x00, 0x00,
}
