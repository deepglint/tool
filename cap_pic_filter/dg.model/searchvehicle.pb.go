// Code generated by protoc-gen-go.
// source: searchvehicle.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VehicleBrandModel struct {
	BrandId     int32 `protobuf:"varint,1,opt,name=BrandId,json=brandId" json:"BrandId"`
	SubBrandId  int32 `protobuf:"varint,2,opt,name=SubBrandId,json=subBrandId" json:"SubBrandId"`
	ModelYearId int32 `protobuf:"varint,3,opt,name=ModelYearId,json=modelYearId" json:"ModelYearId"`
}

func (m *VehicleBrandModel) Reset()                    { *m = VehicleBrandModel{} }
func (m *VehicleBrandModel) String() string            { return proto.CompactTextString(m) }
func (*VehicleBrandModel) ProtoMessage()               {}
func (*VehicleBrandModel) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

type VehicleQuery struct {
	BaseQuery               *BaseQuery           `protobuf:"bytes,1,opt,name=BaseQuery,json=baseQuery" json:"BaseQuery"`
	PlateText               []string             `protobuf:"bytes,2,rep,name=PlateText,json=plateText" json:"PlateText"`
	TypeId                  []int32              `protobuf:"varint,3,rep,packed,name=TypeId,json=typeId" json:"TypeId"`
	TypeConfidence          int32                `protobuf:"varint,4,opt,name=TypeConfidence,json=typeConfidence" json:"TypeConfidence"`
	VehicleBrandModels      []*VehicleBrandModel `protobuf:"bytes,5,rep,name=VehicleBrandModels,json=vehicleBrandModels" json:"VehicleBrandModels"`
	ModelTypeConfidence     int32                `protobuf:"varint,6,opt,name=ModelTypeConfidence,json=modelTypeConfidence" json:"ModelTypeConfidence"`
	ColorId                 []int32              `protobuf:"varint,7,rep,packed,name=ColorId,json=colorId" json:"ColorId"`
	ColorConfidence         int32                `protobuf:"varint,8,opt,name=ColorConfidence,json=colorConfidence" json:"ColorConfidence"`
	PlateColor              []int32              `protobuf:"varint,9,rep,packed,name=PlateColor,json=plateColor" json:"PlateColor"`
	PlateColorConfidence    int32                `protobuf:"varint,10,opt,name=PlateColorConfidence,json=plateColorConfidence" json:"PlateColorConfidence"`
	PlateType               []int32              `protobuf:"varint,11,rep,packed,name=PlateType,json=plateType" json:"PlateType"`
	PlateTypeConfidence     int32                `protobuf:"varint,12,opt,name=PlateTypeConfidence,json=plateTypeConfidence" json:"PlateTypeConfidence"`
	Side                    []int32              `protobuf:"varint,13,rep,packed,name=Side,json=side" json:"Side"`
	HasSymbols              []bool               `protobuf:"varint,14,rep,packed,name=HasSymbols,json=hasSymbols" json:"HasSymbols"`
	HasIllegals             map[int32]bool       `protobuf:"bytes,15,rep,name=HasIllegals,json=hasIllegals" json:"HasIllegals" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	HasCoIllegals           map[int32]bool       `protobuf:"bytes,16,rep,name=HasCoIllegals,json=hasCoIllegals" json:"HasCoIllegals" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	NotBusinessId           []int64              `protobuf:"varint,32,rep,packed,name=NotBusinessId,json=notBusinessId" json:"NotBusinessId"`
	NotTypeId               []int32              `protobuf:"varint,33,rep,packed,name=NotTypeId,json=notTypeId" json:"NotTypeId"`
	NotPlateText            []string             `protobuf:"bytes,34,rep,name=NotPlateText,json=notPlateText" json:"NotPlateText"`
	NotPlateColor           []int32              `protobuf:"varint,35,rep,packed,name=NotPlateColor,json=notPlateColor" json:"NotPlateColor"`
	NotPlateType            []int32              `protobuf:"varint,36,rep,packed,name=NotPlateType,json=notPlateType" json:"NotPlateType"`
	NotSide                 []int32              `protobuf:"varint,37,rep,packed,name=NotSide,json=notSide" json:"NotSide"`
	SilencePeriod           int32                `protobuf:"varint,64,opt,name=SilencePeriod,json=silencePeriod" json:"SilencePeriod"`
	CooldownPeriod          int32                `protobuf:"varint,65,opt,name=CooldownPeriod,json=cooldownPeriod" json:"CooldownPeriod"`
	UsualAppearanceTimes    int32                `protobuf:"varint,66,opt,name=UsualAppearanceTimes,json=usualAppearanceTimes" json:"UsualAppearanceTimes"`
	MaxAppearanceTimes      int32                `protobuf:"varint,67,opt,name=MaxAppearanceTimes,json=maxAppearanceTimes" json:"MaxAppearanceTimes"`
	FollowPlateText         string               `protobuf:"bytes,68,opt,name=FollowPlateText,json=followPlateText" json:"FollowPlateText"`
	FollowingTimes          int32                `protobuf:"varint,69,opt,name=FollowingTimes,json=followingTimes" json:"FollowingTimes"`
	FollowingPeriodicPeriod int32                `protobuf:"varint,70,opt,name=FollowingPeriodicPeriod,json=followingPeriodicPeriod" json:"FollowingPeriodicPeriod"`
	FollowingWholePeriod    int32                `protobuf:"varint,71,opt,name=FollowingWholePeriod,json=followingWholePeriod" json:"FollowingWholePeriod"`
	PlateSimilarity         int32                `protobuf:"varint,72,opt,name=PlateSimilarity,json=plateSimilarity" json:"PlateSimilarity"`
	InvalidType             int32                `protobuf:"varint,73,opt,name=InvalidType,json=invalidType" json:"InvalidType"`
}

func (m *VehicleQuery) Reset()                    { *m = VehicleQuery{} }
func (m *VehicleQuery) String() string            { return proto.CompactTextString(m) }
func (*VehicleQuery) ProtoMessage()               {}
func (*VehicleQuery) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

func (m *VehicleQuery) GetBaseQuery() *BaseQuery {
	if m != nil {
		return m.BaseQuery
	}
	return nil
}

func (m *VehicleQuery) GetVehicleBrandModels() []*VehicleBrandModel {
	if m != nil {
		return m.VehicleBrandModels
	}
	return nil
}

func (m *VehicleQuery) GetHasIllegals() map[int32]bool {
	if m != nil {
		return m.HasIllegals
	}
	return nil
}

func (m *VehicleQuery) GetHasCoIllegals() map[int32]bool {
	if m != nil {
		return m.HasCoIllegals
	}
	return nil
}

type VehicleFuzzyQuery struct {
	Ids       []int64 `protobuf:"varint,1,rep,packed,name=Ids,json=ids" json:"Ids"`
	RepoId    int32   `protobuf:"varint,2,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorIds []int32 `protobuf:"varint,3,rep,packed,name=SensorIds,json=sensorIds" json:"SensorIds"`
	Limit     int32   `protobuf:"varint,4,opt,name=Limit,json=limit" json:"Limit"`
}

func (m *VehicleFuzzyQuery) Reset()                    { *m = VehicleFuzzyQuery{} }
func (m *VehicleFuzzyQuery) String() string            { return proto.CompactTextString(m) }
func (*VehicleFuzzyQuery) ProtoMessage()               {}
func (*VehicleFuzzyQuery) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{2} }

type VehicleTimeSpacial struct {
	RepoId    int32 `protobuf:"varint,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorId  int32 `protobuf:"varint,2,opt,name=SensorId,json=sensorId" json:"SensorId"`
	Timestamp int64 `protobuf:"varint,3,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
}

func (m *VehicleTimeSpacial) Reset()                    { *m = VehicleTimeSpacial{} }
func (m *VehicleTimeSpacial) String() string            { return proto.CompactTextString(m) }
func (*VehicleTimeSpacial) ProtoMessage()               {}
func (*VehicleTimeSpacial) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{3} }

type VehicleAuxiliaryInfo struct {
	ThumbnailImageUri string          `protobuf:"bytes,1,opt,name=ThumbnailImageUri,json=thumbnailImageUri" json:"ThumbnailImageUri"`
	DriverImageUri    string          `protobuf:"bytes,2,opt,name=DriverImageUri,json=driverImageUri" json:"DriverImageUri"`
	CodriverImageUri  string          `protobuf:"bytes,3,opt,name=CodriverImageUri,json=codriverImageUri" json:"CodriverImageUri"`
	HasSymbols        map[string]bool `protobuf:"bytes,4,rep,name=HasSymbols,json=hasSymbols" json:"HasSymbols" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	HasIllegals       map[string]bool `protobuf:"bytes,5,rep,name=HasIllegals,json=hasIllegals" json:"HasIllegals" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	HasCoIllegals     map[string]bool `protobuf:"bytes,6,rep,name=HasCoIllegals,json=hasCoIllegals" json:"HasCoIllegals" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SilencePeriod     int32           `protobuf:"varint,8,opt,name=SilencePeriod,json=silencePeriod" json:"SilencePeriod"`
	CooldownPeriod    int32           `protobuf:"varint,9,opt,name=CooldownPeriod,json=cooldownPeriod" json:"CooldownPeriod"`
	FollowingPeriod   int32           `protobuf:"varint,10,opt,name=FollowingPeriod,json=followingPeriod" json:"FollowingPeriod"`
	InvalidType       int32           `protobuf:"varint,11,opt,name=InvalidType,json=invalidType" json:"InvalidType"`
	SimilarConfidence int32           `protobuf:"varint,12,opt,name=SimilarConfidence,json=similarConfidence" json:"SimilarConfidence"`
	FuzzyScore        float32         `protobuf:"fixed32,13,opt,name=FuzzyScore,json=fuzzyScore" json:"FuzzyScore"`
}

func (m *VehicleAuxiliaryInfo) Reset()                    { *m = VehicleAuxiliaryInfo{} }
func (m *VehicleAuxiliaryInfo) String() string            { return proto.CompactTextString(m) }
func (*VehicleAuxiliaryInfo) ProtoMessage()               {}
func (*VehicleAuxiliaryInfo) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{4} }

func (m *VehicleAuxiliaryInfo) GetHasSymbols() map[string]bool {
	if m != nil {
		return m.HasSymbols
	}
	return nil
}

func (m *VehicleAuxiliaryInfo) GetHasIllegals() map[string]bool {
	if m != nil {
		return m.HasIllegals
	}
	return nil
}

func (m *VehicleAuxiliaryInfo) GetHasCoIllegals() map[string]bool {
	if m != nil {
		return m.HasCoIllegals
	}
	return nil
}

type RetVehicle struct {
	Metadata             *SrcMetadata          `protobuf:"bytes,1,opt,name=Metadata,json=metadata" json:"Metadata"`
	Img                  *Image                `protobuf:"bytes,2,opt,name=Img,json=img" json:"Img"`
	RecVehicle           *RecVehicle           `protobuf:"bytes,3,opt,name=RecVehicle,json=recVehicle" json:"RecVehicle"`
	VehicleAuxiliaryInfo *VehicleAuxiliaryInfo `protobuf:"bytes,4,opt,name=VehicleAuxiliaryInfo,json=vehicleAuxiliaryInfo" json:"VehicleAuxiliaryInfo"`
}

func (m *RetVehicle) Reset()                    { *m = RetVehicle{} }
func (m *RetVehicle) String() string            { return proto.CompactTextString(m) }
func (*RetVehicle) ProtoMessage()               {}
func (*RetVehicle) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{5} }

func (m *RetVehicle) GetMetadata() *SrcMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RetVehicle) GetImg() *Image {
	if m != nil {
		return m.Img
	}
	return nil
}

func (m *RetVehicle) GetRecVehicle() *RecVehicle {
	if m != nil {
		return m.RecVehicle
	}
	return nil
}

func (m *RetVehicle) GetVehicleAuxiliaryInfo() *VehicleAuxiliaryInfo {
	if m != nil {
		return m.VehicleAuxiliaryInfo
	}
	return nil
}

type VehicleResult struct {
	AllSize      int32         `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize int32         `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	RetVehicles  []*RetVehicle `protobuf:"bytes,3,rep,name=RetVehicles,json=retVehicles" json:"RetVehicles"`
}

func (m *VehicleResult) Reset()                    { *m = VehicleResult{} }
func (m *VehicleResult) String() string            { return proto.CompactTextString(m) }
func (*VehicleResult) ProtoMessage()               {}
func (*VehicleResult) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{6} }

func (m *VehicleResult) GetRetVehicles() []*RetVehicle {
	if m != nil {
		return m.RetVehicles
	}
	return nil
}

type GroupVehicleAuxiliaryInfo struct {
	AppearenceTimes int32 `protobuf:"varint,1,opt,name=AppearenceTimes,json=appearenceTimes" json:"AppearenceTimes"`
	FollowingTimes  int32 `protobuf:"varint,2,opt,name=FollowingTimes,json=followingTimes" json:"FollowingTimes"`
}

func (m *GroupVehicleAuxiliaryInfo) Reset()                    { *m = GroupVehicleAuxiliaryInfo{} }
func (m *GroupVehicleAuxiliaryInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupVehicleAuxiliaryInfo) ProtoMessage()               {}
func (*GroupVehicleAuxiliaryInfo) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{7} }

type GroupVehicle struct {
	RetVehicles               []*RetVehicle              `protobuf:"bytes,1,rep,name=RetVehicles,json=retVehicles" json:"RetVehicles"`
	GroupVehicleAuxiliaryInfo *GroupVehicleAuxiliaryInfo `protobuf:"bytes,2,opt,name=GroupVehicleAuxiliaryInfo,json=groupVehicleAuxiliaryInfo" json:"GroupVehicleAuxiliaryInfo"`
}

func (m *GroupVehicle) Reset()                    { *m = GroupVehicle{} }
func (m *GroupVehicle) String() string            { return proto.CompactTextString(m) }
func (*GroupVehicle) ProtoMessage()               {}
func (*GroupVehicle) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{8} }

func (m *GroupVehicle) GetRetVehicles() []*RetVehicle {
	if m != nil {
		return m.RetVehicles
	}
	return nil
}

func (m *GroupVehicle) GetGroupVehicleAuxiliaryInfo() *GroupVehicleAuxiliaryInfo {
	if m != nil {
		return m.GroupVehicleAuxiliaryInfo
	}
	return nil
}

type GroupVehicleResult struct {
	AllSize      int32           `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize int32           `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	GroupVehicle []*GroupVehicle `protobuf:"bytes,3,rep,name=GroupVehicle,json=groupVehicle" json:"GroupVehicle"`
}

func (m *GroupVehicleResult) Reset()                    { *m = GroupVehicleResult{} }
func (m *GroupVehicleResult) String() string            { return proto.CompactTextString(m) }
func (*GroupVehicleResult) ProtoMessage()               {}
func (*GroupVehicleResult) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{9} }

func (m *GroupVehicleResult) GetGroupVehicle() []*GroupVehicle {
	if m != nil {
		return m.GroupVehicle
	}
	return nil
}

type VehicleStatistics struct {
	RepoId   int32  `protobuf:"varint,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorId int32  `protobuf:"varint,2,opt,name=SensorId,json=sensorId" json:"SensorId"`
	Hour     int32  `protobuf:"varint,3,opt,name=Hour,json=hour" json:"Hour"`
	Plate    string `protobuf:"bytes,4,opt,name=Plate,json=plate" json:"Plate"`
	Count    int32  `protobuf:"varint,5,opt,name=Count,json=count" json:"Count"`
}

func (m *VehicleStatistics) Reset()                    { *m = VehicleStatistics{} }
func (m *VehicleStatistics) String() string            { return proto.CompactTextString(m) }
func (*VehicleStatistics) ProtoMessage()               {}
func (*VehicleStatistics) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{10} }

type VehicleStatisticsResult struct {
	Statistics []*VehicleStatistics `protobuf:"bytes,1,rep,name=Statistics,json=statistics" json:"Statistics"`
}

func (m *VehicleStatisticsResult) Reset()                    { *m = VehicleStatisticsResult{} }
func (m *VehicleStatisticsResult) String() string            { return proto.CompactTextString(m) }
func (*VehicleStatisticsResult) ProtoMessage()               {}
func (*VehicleStatisticsResult) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{11} }

func (m *VehicleStatisticsResult) GetStatistics() []*VehicleStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

func init() {
	proto.RegisterType((*VehicleBrandModel)(nil), "dg.model.VehicleBrandModel")
	proto.RegisterType((*VehicleQuery)(nil), "dg.model.VehicleQuery")
	proto.RegisterType((*VehicleFuzzyQuery)(nil), "dg.model.VehicleFuzzyQuery")
	proto.RegisterType((*VehicleTimeSpacial)(nil), "dg.model.VehicleTimeSpacial")
	proto.RegisterType((*VehicleAuxiliaryInfo)(nil), "dg.model.VehicleAuxiliaryInfo")
	proto.RegisterType((*RetVehicle)(nil), "dg.model.RetVehicle")
	proto.RegisterType((*VehicleResult)(nil), "dg.model.VehicleResult")
	proto.RegisterType((*GroupVehicleAuxiliaryInfo)(nil), "dg.model.GroupVehicleAuxiliaryInfo")
	proto.RegisterType((*GroupVehicle)(nil), "dg.model.GroupVehicle")
	proto.RegisterType((*GroupVehicleResult)(nil), "dg.model.GroupVehicleResult")
	proto.RegisterType((*VehicleStatistics)(nil), "dg.model.VehicleStatistics")
	proto.RegisterType((*VehicleStatisticsResult)(nil), "dg.model.VehicleStatisticsResult")
}

func init() { proto.RegisterFile("searchvehicle.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 1323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0x6d, 0x73, 0xdb, 0xc4,
	0x13, 0x1f, 0xc7, 0x89, 0x63, 0x9d, 0xec, 0x38, 0xb9, 0xf8, 0xdf, 0xba, 0xfe, 0x33, 0x9d, 0x56,
	0x2d, 0x10, 0x18, 0xc6, 0x50, 0xc3, 0x30, 0x9d, 0x32, 0x30, 0x4d, 0xdc, 0xa6, 0xf1, 0x40, 0x4a,
	0x2b, 0xa7, 0xed, 0xf0, 0xf2, 0x2c, 0x9d, 0x6d, 0x0d, 0x92, 0x4e, 0xe8, 0x21, 0x8d, 0xf3, 0x9e,
	0xe1, 0x1d, 0xdf, 0x83, 0x0f, 0xc1, 0x97, 0xe1, 0x35, 0x1f, 0x82, 0xbb, 0x3d, 0x3d, 0xcb, 0x89,
	0xcb, 0xc3, 0xbb, 0xbb, 0xdf, 0xee, 0xed, 0xee, 0xdd, 0xee, 0xfe, 0x56, 0x42, 0xfb, 0x01, 0x25,
	0xbe, 0xb1, 0x38, 0xa7, 0x0b, 0xcb, 0xb0, 0xe9, 0xc0, 0xf3, 0x59, 0xc8, 0x70, 0xd3, 0x9c, 0x0f,
	0x1c, 0x66, 0x52, 0xbb, 0xdf, 0x32, 0x98, 0xe3, 0x30, 0x57, 0xe2, 0x7d, 0x2c, 0x95, 0xf3, 0x98,
	0xc6, 0xd0, 0xde, 0x6b, 0x79, 0xf8, 0xc8, 0x27, 0xae, 0x79, 0x2a, 0x8e, 0xe1, 0x1e, 0xda, 0x86,
	0xdd, 0xd8, 0xec, 0xd5, 0xee, 0xd4, 0x0e, 0xb6, 0xf4, 0xed, 0xa9, 0xdc, 0xe2, 0xdb, 0x08, 0x4d,
	0xa2, 0x69, 0x22, 0xdc, 0x00, 0x21, 0x0a, 0x52, 0x04, 0xdf, 0x41, 0x2a, 0x98, 0xf8, 0x81, 0x7b,
	0xe2, 0x0a, 0x75, 0x50, 0x50, 0x9d, 0x0c, 0xd2, 0xfe, 0x50, 0x51, 0x2b, 0xf6, 0xf8, 0x32, 0xa2,
	0xfe, 0x12, 0x3f, 0x40, 0xca, 0x11, 0x09, 0xe4, 0x06, 0xdc, 0xa9, 0xc3, 0xfd, 0x41, 0x72, 0x83,
	0x41, 0x2a, 0xd2, 0x95, 0x69, 0xb2, 0xc4, 0xef, 0x21, 0xe5, 0x85, 0x4d, 0x42, 0x7a, 0x46, 0x2f,
	0x42, 0x1e, 0x44, 0xfd, 0x40, 0xd1, 0x15, 0x2f, 0x01, 0xf0, 0x0d, 0xd4, 0x38, 0x5b, 0x7a, 0x14,
	0xdc, 0xd7, 0xb9, 0xfb, 0x46, 0x08, 0x3b, 0xfc, 0x01, 0xda, 0x11, 0xf8, 0x88, 0xb9, 0x33, 0xcb,
	0xa4, 0xae, 0x41, 0x7b, 0x9b, 0x10, 0xde, 0x4e, 0x58, 0x40, 0xf1, 0xb7, 0x08, 0x57, 0x9e, 0x24,
	0xe8, 0x6d, 0x71, 0x5b, 0xea, 0xf0, 0xff, 0x59, 0x64, 0x15, 0x1d, 0x1d, 0x9f, 0x57, 0x8e, 0xe1,
	0xcf, 0xd0, 0x3e, 0xac, 0x4a, 0x9e, 0x1b, 0xe0, 0x79, 0xdf, 0xa9, 0x8a, 0xc4, 0xe3, 0x8f, 0x98,
	0xcd, 0xc4, 0xf3, 0x6d, 0x43, 0xfc, 0xdb, 0x86, 0xdc, 0xe2, 0x03, 0xd4, 0x01, 0x49, 0xce, 0x4e,
	0x13, 0xec, 0x74, 0x8c, 0x22, 0x2c, 0xd2, 0x04, 0x0f, 0x04, 0xea, 0x3d, 0x05, 0xcc, 0x20, 0x2f,
	0x45, 0xf0, 0x10, 0x75, 0x33, 0x79, 0xce, 0x1c, 0x02, 0x73, 0x5d, 0x6f, 0x85, 0x2c, 0x7b, 0x74,
	0x1e, 0x6e, 0x4f, 0x05, 0x93, 0xf1, 0xa3, 0x73, 0x40, 0xdc, 0x33, 0x95, 0xe6, 0x0c, 0xb6, 0xe4,
	0x3d, 0xbd, 0xaa, 0x08, 0x63, 0xb4, 0x39, 0xe1, 0xcb, 0x5e, 0x1b, 0x4c, 0x6d, 0x06, 0x7c, 0x2d,
	0xe2, 0x3e, 0x21, 0xc1, 0x64, 0xe9, 0x4c, 0x19, 0x7f, 0xf2, 0x1d, 0x2e, 0x69, 0xea, 0x68, 0x91,
	0x22, 0x78, 0x8c, 0x54, 0x2e, 0x1f, 0xdb, 0x36, 0x9d, 0x13, 0xae, 0xd0, 0x81, 0x9c, 0x7c, 0x58,
	0xc9, 0x09, 0x54, 0xc9, 0x20, 0xa7, 0xf9, 0xd4, 0x0d, 0x79, 0x05, 0xa9, 0x8b, 0x0c, 0xc1, 0xdf,
	0xa3, 0x36, 0x57, 0x18, 0xb1, 0xd4, 0xd8, 0x2e, 0x18, 0xfb, 0xe8, 0x6a, 0x63, 0x99, 0xae, 0x34,
	0xd7, 0x5e, 0xe4, 0x31, 0x7c, 0x1f, 0xb5, 0x9f, 0xb3, 0xf0, 0x28, 0x0a, 0x2c, 0x97, 0x06, 0x01,
	0xcf, 0xde, 0x1d, 0x6e, 0xb0, 0xae, 0xb7, 0xdd, 0x3c, 0x28, 0x5e, 0x91, 0x6b, 0xc5, 0xf5, 0x79,
	0x57, 0xbe, 0xa2, 0x9b, 0x00, 0x58, 0x43, 0x2d, 0x2e, 0xcd, 0x6a, 0x5b, 0x83, 0xda, 0x6e, 0xb9,
	0x39, 0x2c, 0xf6, 0x93, 0x4b, 0xef, 0x3d, 0xb0, 0xd2, 0x76, 0xf3, 0x60, 0xc1, 0x92, 0x48, 0xd8,
	0x7d, 0x50, 0xca, 0x2c, 0x89, 0x9c, 0xf1, 0x4a, 0xe3, 0x3a, 0x90, 0x84, 0xf7, 0x65, 0xa5, 0xb9,
	0x72, 0x2b, 0x7c, 0x4c, 0x2c, 0x5b, 0xa4, 0xe9, 0x05, 0xf5, 0x2d, 0x66, 0xf6, 0x1e, 0x43, 0x1e,
	0xdb, 0x41, 0x1e, 0x14, 0x0d, 0x35, 0x62, 0xcc, 0x36, 0xd9, 0x5b, 0x37, 0x56, 0x3b, 0x94, 0x0d,
	0x65, 0x14, 0x50, 0x51, 0x6d, 0xaf, 0x82, 0x88, 0xd8, 0x87, 0x9e, 0xc7, 0x39, 0x80, 0x70, 0x03,
	0x67, 0x96, 0x43, 0x83, 0xde, 0x91, 0xac, 0xb6, 0x68, 0x85, 0x0c, 0x0f, 0x10, 0x3e, 0x25, 0x17,
	0xe5, 0x13, 0x23, 0x38, 0x81, 0x9d, 0x8a, 0x44, 0xf4, 0xc6, 0x31, 0xb3, 0x6d, 0xf6, 0x36, 0x7b,
	0xbc, 0x27, 0x5c, 0x59, 0xd1, 0x3b, 0xb3, 0x22, 0x2c, 0xa2, 0x96, 0x9a, 0x96, 0x3b, 0x97, 0x56,
	0x9f, 0xca, 0xa8, 0x67, 0x05, 0x14, 0x3f, 0x44, 0x37, 0x53, 0x3d, 0x79, 0x11, 0xcb, 0x88, 0xaf,
	0x79, 0x0c, 0x07, 0x6e, 0xce, 0x56, 0x8b, 0xc5, 0x7d, 0xd3, 0x93, 0x6f, 0x16, 0xcc, 0x4e, 0x1e,
	0xf1, 0x99, 0xbc, 0xef, 0x6c, 0x85, 0x4c, 0xc4, 0x0f, 0x21, 0x4e, 0x2c, 0xc7, 0xb2, 0x89, 0x6f,
	0x85, 0xcb, 0xde, 0x89, 0xec, 0x6d, 0xaf, 0x08, 0x0b, 0x8a, 0x1d, 0xbb, 0xe7, 0xc4, 0xb6, 0x4c,
	0x48, 0xec, 0x58, 0x52, 0xac, 0x95, 0x41, 0xfd, 0x6f, 0xd0, 0x6e, 0xb9, 0xf6, 0xf1, 0x2e, 0xaa,
	0xff, 0x48, 0x97, 0x31, 0x9d, 0x8b, 0x25, 0xee, 0xa2, 0x2d, 0x7e, 0x24, 0xa2, 0xc0, 0xe2, 0x4d,
	0x5d, 0x6e, 0x1e, 0x6d, 0x3c, 0xac, 0xf5, 0x1f, 0x23, 0x5c, 0x2d, 0xf7, 0xbf, 0x63, 0x41, 0xfb,
	0x29, 0x9d, 0x2a, 0xc7, 0xd1, 0xe5, 0xe5, 0x52, 0xb2, 0x36, 0x37, 0x30, 0x36, 0x03, 0x6e, 0x40,
	0xb4, 0x45, 0xdd, 0x32, 0x03, 0xc1, 0xd4, 0x3a, 0xf5, 0x58, 0x3a, 0x49, 0x1a, 0x3e, 0xec, 0x44,
	0x93, 0x4c, 0xa8, 0x1b, 0x08, 0xd2, 0x0b, 0x62, 0x12, 0x57, 0x82, 0x04, 0x10, 0x6e, 0xbf, 0xe3,
	0xcf, 0x11, 0xc6, 0xf4, 0xbd, 0x65, 0x8b, 0x8d, 0x36, 0x4b, 0x59, 0x5b, 0xa4, 0x6f, 0xe2, 0x11,
	0xc3, 0x22, 0x76, 0xce, 0x43, 0xad, 0xe0, 0xa1, 0x8f, 0x9a, 0x89, 0x87, 0xd8, 0x77, 0x33, 0x71,
	0x20, 0xbc, 0x43, 0x05, 0x84, 0xc4, 0xf1, 0x60, 0x82, 0xd5, 0x75, 0x25, 0x4c, 0x00, 0xed, 0xf7,
	0x06, 0xea, 0xc6, 0x8e, 0x0e, 0xa3, 0x0b, 0xcb, 0xb6, 0x88, 0xbf, 0x1c, 0xbb, 0x33, 0x86, 0x3f,
	0x41, 0x7b, 0x67, 0x8b, 0xc8, 0x99, 0xba, 0xc4, 0xb2, 0xc7, 0x0e, 0x99, 0xd3, 0x57, 0xbe, 0x05,
	0x5e, 0x15, 0x7d, 0x2f, 0x2c, 0x0b, 0x44, 0x15, 0x3e, 0xf1, 0xad, 0x73, 0xea, 0xa7, 0xaa, 0x1b,
	0xa0, 0xba, 0x63, 0x16, 0x50, 0xfc, 0x31, 0xda, 0x1d, 0xb1, 0x22, 0x06, 0x31, 0x29, 0xfa, 0xae,
	0x51, 0xc2, 0xf1, 0xf3, 0x02, 0x7b, 0x6e, 0x02, 0x9f, 0x0d, 0x2a, 0x7c, 0x56, 0x88, 0x7a, 0x90,
	0x1d, 0x90, 0xa4, 0x96, 0x67, 0xdb, 0x97, 0x45, 0xb6, 0x95, 0x13, 0xf0, 0xd3, 0xf5, 0x06, 0xaf,
	0x61, 0xdd, 0x37, 0x65, 0xd6, 0x6d, 0x80, 0xd1, 0x07, 0xeb, 0x8d, 0xae, 0x67, 0xdf, 0x22, 0x63,
	0x35, 0xdf, 0x8d, 0xb1, 0x94, 0x95, 0x8c, 0x95, 0xb2, 0x49, 0xda, 0xdc, 0xf1, 0x68, 0xec, 0x94,
	0x7a, 0xbe, 0xdc, 0x8d, 0x6a, 0xa5, 0x1b, 0x45, 0x5d, 0xc4, 0xdd, 0x5b, 0x99, 0x8b, 0x7b, 0x41,
	0x59, 0x20, 0x26, 0x20, 0xb4, 0xcc, 0xc4, 0x60, 0xbe, 0x98, 0x8d, 0xb5, 0x83, 0x0d, 0x1d, 0xcd,
	0x52, 0xa4, 0xff, 0x35, 0xea, 0x94, 0x52, 0x96, 0x6f, 0x4c, 0x65, 0x5d, 0x6b, 0xaf, 0xa1, 0x06,
	0xe5, 0x5f, 0x53, 0xc3, 0x3a, 0x0b, 0xda, 0x9f, 0x35, 0x84, 0x74, 0x1a, 0xc6, 0x69, 0xe6, 0x5f,
	0x7f, 0xcd, 0x53, 0x1a, 0x12, 0x93, 0x84, 0x24, 0xfe, 0xf8, 0xfb, 0x5f, 0x56, 0x0b, 0x13, 0xdf,
	0x48, 0x84, 0x7a, 0xd3, 0x89, 0x57, 0xf8, 0x2e, 0xe7, 0x11, 0x67, 0x0e, 0x96, 0xd5, 0x61, 0x27,
	0xd3, 0x86, 0x3e, 0xe0, 0xc4, 0xe2, 0xcc, 0xf1, 0x17, 0xc2, 0x87, 0x11, 0xfb, 0x80, 0x7e, 0x51,
	0x87, 0xdd, 0x4c, 0x33, 0x93, 0xe9, 0xc8, 0x4f, 0xd7, 0x58, 0x5f, 0xdd, 0xd9, 0xc0, 0x33, 0xea,
	0xf0, 0xf6, 0xf5, 0x35, 0xaa, 0x77, 0xcf, 0x57, 0xa0, 0xda, 0xcf, 0x35, 0xd4, 0x4e, 0x7c, 0xd1,
	0x20, 0xb2, 0x43, 0x31, 0x75, 0x0f, 0x6d, 0x7b, 0x62, 0x5d, 0xd2, 0xe4, 0xe3, 0x9a, 0xc8, 0xad,
	0x98, 0xd9, 0xfc, 0x65, 0x22, 0xdf, 0xa5, 0x26, 0x88, 0x25, 0x31, 0xb5, 0xfc, 0x1c, 0x86, 0xbf,
	0x44, 0x6a, 0xf6, 0x7a, 0x92, 0x1c, 0x4b, 0x57, 0x4b, 0x84, 0xba, 0xea, 0x67, 0x8a, 0x9a, 0x83,
	0x6e, 0x3d, 0xf3, 0x59, 0xe4, 0xad, 0xa4, 0x2e, 0x5e, 0xee, 0x72, 0x9e, 0xd2, 0x74, 0xd2, 0xca,
	0xd0, 0x3a, 0xa4, 0x08, 0xaf, 0x18, 0x9e, 0x1b, 0xab, 0x86, 0xa7, 0xf6, 0x5b, 0x0d, 0xb5, 0xf2,
	0xfe, 0xca, 0x71, 0xd7, 0xde, 0x31, 0x6e, 0x4c, 0xae, 0x89, 0x3b, 0x2e, 0x81, 0x7b, 0x99, 0x95,
	0x2b, 0x55, 0xf5, 0x5b, 0xf3, 0xab, 0x44, 0xda, 0xaf, 0x35, 0x84, 0xf3, 0x07, 0xff, 0x93, 0x3c,
	0x3d, 0x2a, 0xde, 0x3f, 0x4e, 0xd4, 0x8d, 0xd5, 0xa1, 0xea, 0xad, 0x7c, 0x74, 0xda, 0x2f, 0xb5,
	0x74, 0x7c, 0x4e, 0x42, 0x12, 0x5a, 0x41, 0x68, 0x19, 0xc1, 0x3f, 0x1a, 0x65, 0xfc, 0x1b, 0xfb,
	0x84, 0x45, 0x7e, 0xfc, 0x1f, 0xb6, 0xb9, 0xe0, 0x6b, 0xd1, 0x9a, 0xf0, 0xa5, 0x01, 0x65, 0xad,
	0xe8, 0x5b, 0xf0, 0x7d, 0x21, 0xd0, 0x11, 0x8b, 0xdc, 0x90, 0xb3, 0x3c, 0x0c, 0x55, 0x43, 0x6c,
	0xb4, 0xd7, 0xe8, 0x66, 0x25, 0x90, 0xf8, 0x79, 0xbe, 0xe2, 0x7f, 0x82, 0x29, 0x16, 0xe7, 0xb3,
	0xfa, 0x77, 0x94, 0x3b, 0x86, 0x82, 0x74, 0x3d, 0x6d, 0xc0, 0xcf, 0xe7, 0xe7, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0x51, 0x03, 0x47, 0x3f, 0xbf, 0x0e, 0x00, 0x00,
}
