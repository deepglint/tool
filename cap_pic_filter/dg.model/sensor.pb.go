// Code generated by protoc-gen-go.
// source: sensor.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SensorType int32

const (
	SensorType_Sensor_Type_Unknown SensorType = 0
	SensorType_Sensor_Type_Face    SensorType = 1
	SensorType_Sensor_Type_Vehicle SensorType = 2
	SensorType_Sensor_Type_Ipc     SensorType = 3
)

var SensorType_name = map[int32]string{
	0: "Sensor_Type_Unknown",
	1: "Sensor_Type_Face",
	2: "Sensor_Type_Vehicle",
	3: "Sensor_Type_Ipc",
}
var SensorType_value = map[string]int32{
	"Sensor_Type_Unknown": 0,
	"Sensor_Type_Face":    1,
	"Sensor_Type_Vehicle": 2,
	"Sensor_Type_Ipc":     3,
}

func (x SensorType) String() string {
	return proto.EnumName(SensorType_name, int32(x))
}
func (SensorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

type SensorRepo struct {
	Timestamp int64      `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	RepoId    string     `protobuf:"bytes,2,opt,name=RepoId,json=repoId" json:"RepoId"`
	RepoName  string     `protobuf:"bytes,3,opt,name=RepoName,json=repoName" json:"RepoName"`
	Status    TaskStatus `protobuf:"varint,4,opt,name=Status,json=status,enum=dg.model.TaskStatus" json:"Status"`
	LevelId   int32      `protobuf:"varint,8,opt,name=LevelId,json=levelId" json:"LevelId"`
	ParentId  string     `protobuf:"bytes,9,opt,name=ParentId,json=parentId" json:"ParentId"`
	LeftId    string     `protobuf:"bytes,10,opt,name=LeftId,json=leftId" json:"LeftId"`
	RightId   string     `protobuf:"bytes,11,opt,name=RightId,json=rightId" json:"RightId"`
	Comment   string     `protobuf:"bytes,16,opt,name=Comment,json=comment" json:"Comment"`
}

func (m *SensorRepo) Reset()                    { *m = SensorRepo{} }
func (m *SensorRepo) String() string            { return proto.CompactTextString(m) }
func (*SensorRepo) ProtoMessage()               {}
func (*SensorRepo) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

type Sensor struct {
	Timestamp   int64      `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp"`
	RepoId      string     `protobuf:"bytes,2,opt,name=RepoId,json=repoId" json:"RepoId"`
	RepoName    string     `protobuf:"bytes,3,opt,name=RepoName,json=repoName" json:"RepoName"`
	SensorId    string     `protobuf:"bytes,4,opt,name=SensorId,json=sensorId" json:"SensorId"`
	SensorName  string     `protobuf:"bytes,5,opt,name=SensorName,json=sensorName" json:"SensorName"`
	SerialId    string     `protobuf:"bytes,6,opt,name=SerialId,json=serialId" json:"SerialId"`
	Type        SensorType `protobuf:"varint,8,opt,name=Type,json=type,enum=dg.model.SensorType" json:"Type"`
	Status      TaskStatus `protobuf:"varint,9,opt,name=Status,json=status,enum=dg.model.TaskStatus" json:"Status"`
	LiveActive  bool       `protobuf:"varint,10,opt,name=LiveActive,json=liveActive" json:"LiveActive"`
	DataActive  bool       `protobuf:"varint,11,opt,name=DataActive,json=dataActive" json:"DataActive"`
	Longitude   float32    `protobuf:"fixed32,18,opt,name=Longitude,json=longitude" json:"Longitude"`
	Latitude    float32    `protobuf:"fixed32,19,opt,name=Latitude,json=latitude" json:"Latitude"`
	Ip          string     `protobuf:"bytes,20,opt,name=Ip,json=ip" json:"Ip"`
	Port        string     `protobuf:"bytes,21,opt,name=Port,json=port" json:"Port"`
	Url         string     `protobuf:"bytes,22,opt,name=Url,json=url" json:"Url"`
	RenderedUrl string     `protobuf:"bytes,23,opt,name=RenderedUrl,json=renderedUrl" json:"RenderedUrl"`
	RtmpUrl     string     `protobuf:"bytes,24,opt,name=RtmpUrl,json=rtmpUrl" json:"RtmpUrl"`
	Comment     string     `protobuf:"bytes,25,opt,name=Comment,json=comment" json:"Comment"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{1} }

type SubRepoAndSensor struct {
	RepoId      string        `protobuf:"bytes,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	LevelId     int32         `protobuf:"varint,2,opt,name=LevelId,json=levelId" json:"LevelId"`
	SensorRepos []*SensorRepo `protobuf:"bytes,3,rep,name=SensorRepos,json=sensorRepos" json:"SensorRepos"`
	Sensors     []*Sensor     `protobuf:"bytes,4,rep,name=Sensors,json=sensors" json:"Sensors"`
}

func (m *SubRepoAndSensor) Reset()                    { *m = SubRepoAndSensor{} }
func (m *SubRepoAndSensor) String() string            { return proto.CompactTextString(m) }
func (*SubRepoAndSensor) ProtoMessage()               {}
func (*SubRepoAndSensor) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{2} }

func (m *SubRepoAndSensor) GetSensorRepos() []*SensorRepo {
	if m != nil {
		return m.SensorRepos
	}
	return nil
}

func (m *SubRepoAndSensor) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type SensorRepoResult struct {
	AllSize      int32         `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize int32         `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	SensorRepos  []*SensorRepo `protobuf:"bytes,3,rep,name=SensorRepos,json=sensorRepos" json:"SensorRepos"`
}

func (m *SensorRepoResult) Reset()                    { *m = SensorRepoResult{} }
func (m *SensorRepoResult) String() string            { return proto.CompactTextString(m) }
func (*SensorRepoResult) ProtoMessage()               {}
func (*SensorRepoResult) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{3} }

func (m *SensorRepoResult) GetSensorRepos() []*SensorRepo {
	if m != nil {
		return m.SensorRepos
	}
	return nil
}

type SensorResult struct {
	AllSize      int32     `protobuf:"varint,1,opt,name=AllSize,json=allSize" json:"AllSize"`
	ReturnedSize int32     `protobuf:"varint,2,opt,name=ReturnedSize,json=returnedSize" json:"ReturnedSize"`
	Sensors      []*Sensor `protobuf:"bytes,3,rep,name=Sensors,json=sensors" json:"Sensors"`
}

func (m *SensorResult) Reset()                    { *m = SensorResult{} }
func (m *SensorResult) String() string            { return proto.CompactTextString(m) }
func (*SensorResult) ProtoMessage()               {}
func (*SensorResult) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{4} }

func (m *SensorResult) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type RepoSensorId struct {
	RepoId   int32 `protobuf:"varint,1,opt,name=RepoId,json=repoId" json:"RepoId"`
	SensorId int32 `protobuf:"varint,2,opt,name=SensorId,json=sensorId" json:"SensorId"`
}

func (m *RepoSensorId) Reset()                    { *m = RepoSensorId{} }
func (m *RepoSensorId) String() string            { return proto.CompactTextString(m) }
func (*RepoSensorId) ProtoMessage()               {}
func (*RepoSensorId) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{5} }

type RepoSensorName struct {
	RepoName   string `protobuf:"bytes,1,opt,name=RepoName,json=repoName" json:"RepoName"`
	SensorName string `protobuf:"bytes,2,opt,name=SensorName,json=sensorName" json:"SensorName"`
}

func (m *RepoSensorName) Reset()                    { *m = RepoSensorName{} }
func (m *RepoSensorName) String() string            { return proto.CompactTextString(m) }
func (*RepoSensorName) ProtoMessage()               {}
func (*RepoSensorName) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{6} }

func init() {
	proto.RegisterType((*SensorRepo)(nil), "dg.model.SensorRepo")
	proto.RegisterType((*Sensor)(nil), "dg.model.Sensor")
	proto.RegisterType((*SubRepoAndSensor)(nil), "dg.model.SubRepoAndSensor")
	proto.RegisterType((*SensorRepoResult)(nil), "dg.model.SensorRepoResult")
	proto.RegisterType((*SensorResult)(nil), "dg.model.SensorResult")
	proto.RegisterType((*RepoSensorId)(nil), "dg.model.RepoSensorId")
	proto.RegisterType((*RepoSensorName)(nil), "dg.model.RepoSensorName")
	proto.RegisterEnum("dg.model.SensorType", SensorType_name, SensorType_value)
}

func init() { proto.RegisterFile("sensor.proto", fileDescriptor19) }

var fileDescriptor19 = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x94, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xbf, 0xd8, 0x6e, 0x2e, 0xc7, 0x51, 0x3f, 0x6b, 0x5a, 0x5a, 0x53, 0x21, 0x54, 0x65,
	0x55, 0x55, 0x28, 0x0b, 0x90, 0xd8, 0x17, 0x10, 0x52, 0xa5, 0x08, 0x55, 0x93, 0x96, 0x6d, 0x35,
	0xb5, 0x87, 0xc6, 0xea, 0xf8, 0xa2, 0x99, 0x49, 0xb9, 0x3c, 0x01, 0x2b, 0xc4, 0x63, 0xf0, 0x98,
	0xcc, 0x99, 0xf1, 0x2d, 0xe9, 0x02, 0x84, 0x60, 0xe3, 0xe4, 0x7f, 0x7e, 0x73, 0xce, 0x1c, 0x9f,
	0x8b, 0x61, 0xaa, 0x78, 0xa1, 0x4a, 0x39, 0xaf, 0x64, 0xa9, 0x4b, 0x32, 0x4e, 0x6f, 0xe7, 0x79,
	0x99, 0x72, 0x71, 0x44, 0x14, 0x67, 0x32, 0x59, 0x25, 0x65, 0x9e, 0x97, 0x85, 0xa3, 0xb3, 0x6f,
	0x1e, 0xc0, 0xd2, 0x1e, 0xa7, 0xbc, 0x2a, 0xc9, 0x13, 0x98, 0x5c, 0x66, 0x39, 0x57, 0x9a, 0xe5,
	0x55, 0x3c, 0x38, 0x1e, 0x9c, 0xf8, 0x74, 0xa2, 0x1b, 0x03, 0x39, 0x80, 0x21, 0x9e, 0x3a, 0x4f,
	0x63, 0xcf, 0xa0, 0x09, 0x1d, 0x4a, 0xab, 0xc8, 0x11, 0x8c, 0xd1, 0xfe, 0x8e, 0xe5, 0x3c, 0xf6,
	0x2d, 0x19, 0xcb, 0x5a, 0x93, 0x67, 0x30, 0x5c, 0x6a, 0xa6, 0xd7, 0x2a, 0x0e, 0x0c, 0xd9, 0x7d,
	0xbe, 0x3f, 0x6f, 0xf2, 0x99, 0x5f, 0x32, 0x75, 0xe7, 0x18, 0x1d, 0x2a, 0xfb, 0x4b, 0x62, 0x18,
	0x2d, 0xf8, 0x3d, 0x17, 0xe6, 0x8a, 0xb1, 0x39, 0xbe, 0x43, 0x47, 0xc2, 0x49, 0xbc, 0xe3, 0x82,
	0x49, 0x5e, 0x68, 0x83, 0x26, 0xee, 0x8e, 0xaa, 0xd6, 0x98, 0xd7, 0x82, 0x7f, 0x40, 0x02, 0x2e,
	0x2f, 0x61, 0x15, 0x46, 0xa3, 0xd9, 0xed, 0x0a, 0x41, 0x68, 0xc1, 0x48, 0x3a, 0x89, 0xe4, 0xb5,
	0x29, 0x83, 0x71, 0x8f, 0x23, 0x47, 0x12, 0x27, 0x67, 0xdf, 0x03, 0x93, 0xb0, 0x2d, 0xc8, 0x3f,
	0x28, 0x86, 0x61, 0x2e, 0xb6, 0xf1, 0x0a, 0x1c, 0x53, 0xb5, 0x26, 0x4f, 0x9b, 0x46, 0x58, 0xcf,
	0x1d, 0x4b, 0x41, 0xb5, 0x16, 0xe7, 0x2b, 0x33, 0x86, 0xb5, 0x19, 0x36, 0xbe, 0x4e, 0x93, 0x13,
	0x08, 0x2e, 0x3f, 0x57, 0xdc, 0xd6, 0x6c, 0xa3, 0xc4, 0x2e, 0x22, 0x32, 0x1a, 0x68, 0xf3, 0xec,
	0xb5, 0x63, 0xf2, 0x1b, 0xed, 0x30, 0x39, 0x2d, 0xb2, 0x7b, 0x7e, 0x96, 0x68, 0xf3, 0xb4, 0xc5,
	0x1d, 0x53, 0x10, 0xad, 0x05, 0xf9, 0x1b, 0xa6, 0x59, 0xcd, 0x43, 0xc7, 0xd3, 0xd6, 0x82, 0x15,
	0x5c, 0x94, 0xc5, 0x6d, 0xa6, 0xd7, 0x29, 0x8f, 0x89, 0xc1, 0x1e, 0x9d, 0x88, 0xc6, 0x80, 0x6f,
	0xb4, 0x60, 0xda, 0xc1, 0x3d, 0x0b, 0xc7, 0xa2, 0xd6, 0x64, 0x17, 0xbc, 0xf3, 0x2a, 0xde, 0xb7,
	0xef, 0xe9, 0x65, 0x15, 0x21, 0x10, 0x5c, 0x94, 0x52, 0xc7, 0x8f, 0xac, 0x25, 0xa8, 0xcc, 0x7f,
	0x12, 0x81, 0x7f, 0x25, 0x45, 0x7c, 0x60, 0x4d, 0xfe, 0x5a, 0x0a, 0x72, 0x0c, 0x21, 0xe5, 0x45,
	0xca, 0x25, 0x4f, 0x91, 0x1c, 0x5a, 0x12, 0xca, 0xce, 0x64, 0x47, 0x42, 0xe7, 0x15, 0xd2, 0xb8,
	0x1e, 0x09, 0x27, 0xfb, 0x23, 0xf1, 0x78, 0x73, 0x24, 0x7e, 0x0c, 0x20, 0x5a, 0xae, 0x6f, 0xb0,
	0xab, 0x67, 0x45, 0x5a, 0x0f, 0x47, 0xd7, 0xfe, 0xc1, 0x46, 0xfb, 0x7b, 0x13, 0xec, 0x6d, 0x4e,
	0xf0, 0x4b, 0x08, 0xbb, 0x4d, 0x53, 0x66, 0x36, 0xfc, 0x93, 0xf0, 0x61, 0xaf, 0x10, 0xd2, 0x50,
	0x75, 0x07, 0xc9, 0x29, 0x8c, 0x1c, 0xc2, 0x15, 0x42, 0x9f, 0xe8, 0x81, 0xcf, 0xc8, 0x9d, 0x57,
	0xb3, 0xaf, 0x98, 0x6a, 0x17, 0x87, 0xab, 0xb5, 0xd0, 0x98, 0xd2, 0x99, 0x10, 0xcb, 0xec, 0x0b,
	0xb7, 0xb9, 0x9a, 0x94, 0x98, 0x93, 0x64, 0x06, 0x53, 0xca, 0xf5, 0x5a, 0x16, 0x3c, 0xb5, 0xd8,
	0x65, 0x3c, 0x95, 0x3d, 0xdb, 0x9f, 0xa6, 0x3d, 0xfb, 0x04, 0xd3, 0x06, 0xfd, 0x85, 0x2c, 0x7a,
	0x45, 0xf0, 0x7f, 0x55, 0x84, 0x57, 0x18, 0xaf, 0x2a, 0x9b, 0x4d, 0xdb, 0x6a, 0xd5, 0x4e, 0x7f,
	0x53, 0xdb, 0x6d, 0x74, 0x77, 0xb6, 0xdb, 0x38, 0x5b, 0xc0, 0x6e, 0x17, 0xa3, 0xd9, 0xbf, 0x76,
	0xaf, 0x07, 0x5b, 0x7b, 0xbd, 0xb9, 0xbb, 0xde, 0xf6, 0xee, 0x9e, 0x66, 0x0d, 0xc7, 0x4d, 0x24,
	0x87, 0xb0, 0xe7, 0xd4, 0x35, 0xca, 0xeb, 0xab, 0xe2, 0xae, 0x28, 0x3f, 0x16, 0xd1, 0x7f, 0x64,
	0xbf, 0x69, 0x9e, 0x03, 0x6f, 0x59, 0xc2, 0xa3, 0xc1, 0xf6, 0xf1, 0xf7, 0x7c, 0x95, 0x25, 0x82,
	0x47, 0x1e, 0xd9, 0x83, 0xff, 0xfb, 0xe0, 0xbc, 0x4a, 0x22, 0xff, 0x66, 0x68, 0xbf, 0xeb, 0x2f,
	0x7e, 0x06, 0x00, 0x00, 0xff, 0xff, 0xff, 0x9c, 0x69, 0x8f, 0x05, 0x06, 0x00, 0x00,
}
