syntax = "proto3";

package dg.model;

message SrcMetadata {
    int64 Timestamp = 1;
    int32 Duration = 2;
    int32 SensorId = 3;
    string SensorName = 4;
    string SensorUrl = 5;
    int32 RepoId = 6;
    string RepoInfo = 7;
    ObjType ObjType = 8;
    string SensorIdStr = 9;
}

message Cutboard {
    uint32 X = 1;
    uint32 Y = 2;
    uint32 Width = 3;
    uint32 Height = 4;
    uint32 ResWidth = 5;
    uint32 ResHeight = 6;
    float Confidence = 7;
}

message CutboardImage {
    Cutboard Cutboard = 1;
    Image Img = 2;
}

message Color {
    int32 ColorId = 1; //DEPLICATE!
    float Confidence = 2; //颜色识别置信度
    string ColorName = 3; //颜色汉字表示
}

enum ObjType {
    OBJ_TYPE_UNKNOWN = 0;
    OBJ_TYPE_CAR = 1;
    OBJ_TYPE_BICYCLE = 2;
    OBJ_TYPE_TRICYCLE = 3;
    OBJ_TYPE_PEDESTRIAN = 4;
    OBJ_TYPE_FACE = 1024;
    OBJ_TYPE_VEHICLE_VECTOR = 2048;
    OBJ_TYPE_BICYCLE_VECTOR = 2049;
    OBJ_TYPE_TRICYCLE_VECTOR = 2050;
    OBJ_TYPE_PEDESTRIAN_VECTOR = 2051;
    OBJ_TYPE_FACE_VECTOR = 3072;
    OBJ_TYPE_VEHICLE_CUTBOARD = 4096;
    OBJ_TYPE_BICYCLE_CUTBOARD = 4097;
    OBJ_TYPE_TRICYCLE_CUTBOARD = 4098;
    OBJ_TYPE_PEDESTRIAN_CUTBOARD = 4099;
    OBJ_TYPE_FACE_CUTBOARD = 5120;
}

enum DataFmtType {
    UNKNOWNFMT = 0;
    JSON = 1;
    PROTOBUF = 2;
    CSV = 3;
    PDF = 4;
}

message FeatureVector {
    int64 Id = 1; //特征的关键字
    string Feature = 2; //特征值
}

message NullMessage {

}

message Image {
    string Id = 1;
    int32 Width = 2;
    int32 Height = 3;
    string URI = 4;
    string BinData = 5; // base64 format image
}

message RecFacePose{
    int32 Type = 1;
    repeated float Angles = 2;
}
message RecFace {
    int64 Id = 1;
    CutboardImage Img = 2;
    string Features = 3;
    float Confidence = 4;
    RecFacePose Pose = 5;
    float BlurScore = 6;
    float AlignScore = 7;
}

enum SexType {
    SEX_TYPE_UNKNOWN = 0;
    SEX_TYPE_MALE = 1;
    SEX_TYPE_FEMALE = 2;
}

enum NationalType {
    NATIONAL_TYPE_UNKNOWN = 0;
    NATIONAL_TYPE_HAN = 1;
    NATIONAL_TYPE_MINORITY = 2;
}

enum AgeType {
    AGE_TYPE_UNKNOWN = 0;
    AGE_TYPE_LT15 = 1;
    AGE_TYPE_1530 = 2;
    AGE_TYPE_3050 = 3;
    AGE_TYPE_50UP = 4;
}

message NameAndConfidence {
    int32 Id = 1;
    string Name = 2;
    float Confidence = 3;
}

message CategoryAndFeature {
    int32 Id = 1;
    string CategoryName = 2;
    repeated NameAndConfidence Items = 3;
}

message PeopleAttr {
    NameAndConfidence Sex = 1;
    NameAndConfidence Age = 2;
    NameAndConfidence National = 3;
    repeated CategoryAndFeature Category = 4;
}

message RecVehicle {
    int64 Id = 1;
    VehicleModelType ModelType = 2;
    Color Color = 3;
    LicensePlate Plate = 4;
    CutboardImage Img = 5;
    repeated VehicleSymbol Symbols = 6;
    string Features = 7;
    ObjType VehicleType = 8;
    string VehicleTypeName = 9;
    repeated LicensePlate Plates = 10;
    repeated Passenger Passengers = 11;
}

//enum NonMotorVehicleType {
//    TRANSPORTATION_BICYCLE = 0;
//    TRANSPORTATION_VEHICLE2 = 1;
//    TRANSPORTATION_VEHICLE3 = 2;
//    TRANSPORTATION_ROOF = 3;
//    TRANSPORTATION_SEAL = 4;
//}

enum NonMotorVehicleGesture {
    ATTITUDE_POSITIVE = 0;
    ATTITUDE_RIGHT = 1;
    ATTITUDE_LEFT = 2;
    ATTITUDE_BACK = 3;
}

message RecNonMotorVehicle {
    int64 Id = 1;
    int64 NMVehicleType = 2;
    string NMVehicleTypeName = 3;
    CutboardImage Img = 4;
    NonMotorVehicleGesture NMVehicleGesture = 5;
    message NonMotorPedestrian {
        int64 Id = 1;
        NameAndConfidence Sex = 2;
        repeated CategoryAndFeature Attribute = 3;
    }
    repeated NonMotorPedestrian Passenger = 6;
    repeated CategoryAndFeature NMVehicle = 7;
}

message Passenger {
    int64 Id = 1;
    PeopleAttr PassengerAttr = 2;
    RecFace Face = 3;
    bool Driver = 4;
    CutboardImage Img = 5;
}

message RecPedestrian {
    int64 Id = 1;
    CutboardImage Img = 2;
    float Confidence = 3;
    PeopleAttr PedesAttr = 4;
    RecFace Face = 5;
}

message VehicleModelType {
    int64 Id = 1; // business id
    int32 BrandId = 2;
    int32 SubBrandId = 3;
    int32 ModelYearId = 4;
    float Confidence = 5;
    string Type = 6; //车模类型名称
    string Brand = 7; //车模主品牌名称
    string SubBrand = 8; //车模子品牌名称
    string ModelYear = 9; //车模年款名称
    int32 TypeId = 10;
    string Model = 11;
    int32 IsHead = 12;
}

message LicensePlate {
    string PlateText = 1;
    Color Color = 2;
    int32 TypeId = 3;
    string TypeName = 4;
    float Confidence = 5;
    Cutboard Cutboard = 6;
    float LocalProvinceConfidence=7;
}

message VehicleSymbol {
    int32 SymbolId = 1;
    string SymbolName = 2;
    repeated Symbol Symbols = 3;
}

message Symbol {
    Cutboard Cutboard = 1;
    float Confidence = 2;
}

enum DBType {
    KAFKA = 0;
    POSTGRES = 1;
    FILEIMAGE=2;
}

message StorageConfig {
    string Address = 1; //结构化信息输出地址 ip:port
    DBType Type = 2; //
    repeated string Tags = 3; //设定数据的信息标签
}

message VehicleObj {
    SrcMetadata Metadata = 1;
    Image Img = 2;
    repeated RecVehicle Vehicle = 3;
}
message PedestrianObj {
    SrcMetadata Metadata = 1;
    Image Img = 2;
    repeated RecPedestrian Pedestrian = 3;
}