// Code generated by protoc-gen-go.
// source: deepdata.proto
// DO NOT EDIT!

package dg_model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CutboardType int32

const (
	CutboardType_CUTBOARD_TYPE_UNKNOWN CutboardType = 0
	CutboardType_CUTBOARD_TYPE_VEHICLE CutboardType = 1
	CutboardType_CUTBOARD_TYPE_SYMBOL  CutboardType = 2
	CutboardType_CUTBOARD_TYPE_PLATE   CutboardType = 3
)

var CutboardType_name = map[int32]string{
	0: "CUTBOARD_TYPE_UNKNOWN",
	1: "CUTBOARD_TYPE_VEHICLE",
	2: "CUTBOARD_TYPE_SYMBOL",
	3: "CUTBOARD_TYPE_PLATE",
}
var CutboardType_value = map[string]int32{
	"CUTBOARD_TYPE_UNKNOWN": 0,
	"CUTBOARD_TYPE_VEHICLE": 1,
	"CUTBOARD_TYPE_SYMBOL":  2,
	"CUTBOARD_TYPE_PLATE":   3,
}

func (x CutboardType) String() string {
	return proto.EnumName(CutboardType_name, int32(x))
}
func (CutboardType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type GenericObj struct {
	ObjType ObjType     `protobuf:"varint,1,opt,name=ObjType,json=objType,enum=dg.model.ObjType" json:"ObjType"`
	FmtType DataFmtType `protobuf:"varint,2,opt,name=FmtType,json=fmtType,enum=dg.model.DataFmtType" json:"FmtType"`
	BinData []byte      `protobuf:"bytes,3,opt,name=BinData,json=binData,proto3" json:"BinData"`
}

func (m *GenericObj) Reset()                    { *m = GenericObj{} }
func (m *GenericObj) String() string            { return proto.CompactTextString(m) }
func (*GenericObj) ProtoMessage()               {}
func (*GenericObj) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func init() {
	proto.RegisterType((*GenericObj)(nil), "dg.model.GenericObj")
	proto.RegisterEnum("dg.model.CutboardType", CutboardType_name, CutboardType_value)
}

func init() { proto.RegisterFile("deepdata.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x49, 0x4d, 0x2d,
	0x48, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0x49, 0xd7, 0xcb,
	0xcd, 0x4f, 0x49, 0xcd, 0x91, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x2b, 0xb5,
	0x30, 0x72, 0x71, 0xb9, 0xa7, 0xe6, 0xa5, 0x16, 0x65, 0x26, 0xfb, 0x27, 0x65, 0x09, 0x69, 0x73,
	0xb1, 0x03, 0xa9, 0x90, 0xca, 0x82, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x41, 0x3d,
	0x98, 0x46, 0x3d, 0xa8, 0x44, 0x10, 0x7b, 0x3e, 0x84, 0x21, 0xa4, 0xcf, 0xc5, 0xee, 0x96, 0x5b,
	0x02, 0x56, 0xcc, 0x04, 0x56, 0x2c, 0x8a, 0x50, 0xec, 0x02, 0xb4, 0x1a, 0x2a, 0x19, 0xc4, 0x9e,
	0x06, 0x61, 0x08, 0x49, 0x70, 0xb1, 0x3b, 0x65, 0xe6, 0x81, 0xa4, 0x24, 0x98, 0x81, 0x1a, 0x78,
	0x82, 0xd8, 0x93, 0x20, 0x5c, 0xad, 0x72, 0x2e, 0x1e, 0xe7, 0xd2, 0x92, 0xa4, 0xfc, 0xc4, 0xa2,
	0x14, 0xb0, 0x4a, 0x49, 0x2e, 0x51, 0xe7, 0xd0, 0x10, 0x27, 0x7f, 0xc7, 0x20, 0x97, 0xf8, 0x90,
	0xc8, 0x00, 0xd7, 0xf8, 0x50, 0x3f, 0x6f, 0x3f, 0xff, 0x70, 0x3f, 0x01, 0x06, 0x4c, 0xa9, 0x30,
	0x57, 0x0f, 0x4f, 0x67, 0x1f, 0x57, 0x01, 0x46, 0xa0, 0xf9, 0x22, 0xa8, 0x52, 0xc1, 0x91, 0xbe,
	0x4e, 0xfe, 0x3e, 0x02, 0x4c, 0x42, 0xe2, 0x5c, 0xc2, 0xa8, 0x32, 0x01, 0x3e, 0x8e, 0x21, 0xae,
	0x02, 0xcc, 0x49, 0x6c, 0xe0, 0x60, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x42, 0xe1,
	0x40, 0x30, 0x01, 0x00, 0x00,
}
